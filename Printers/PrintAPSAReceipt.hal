external inner function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external inner procedure GetVATdouble(string,var val,var val,Integer);
external inner function Boolean FindLocalSerialPortDevice(Integer,LongInt,string,var record LSerialPortDeviceVc);

enum begin
  kAPSACommandOpen = 0,
  kAPSACommandVAT = 1,
  kAPSACommandClose = 2,
  kAPSACommandAddItem = 3,
  kAPSACommandPay = 4,
  kAPSACommandStatus = 5,
  kAPSACommandBeginReceipt = 6,
  kAPSACommandEndReceipt = 7,
  kAPSACommandComment = 8,
  kAPSACommandZReport = 9,
  kAPSACommandXReport = 10
end;

function string 255 GetAPSAUrl(record LSerialPortDeviceVc LSPDr)
begin
  string 255 res;

  res = LSPDr.Port;

  GetAPSAUrl = res;
  return;
end;

function Integer ExecAPSARequest(record LSerialPortDeviceVc LSPDr,string path,area request,var JSON js)
begin
  string 255 url,stat;
  area reply;
  Integer res;
  Longint tick;

  url = GetAPSAUrl(LSPDr);
  res = 12400;//problem with connection
  if (SendWebRequest(url,8111,-1,false,"POST",path,"application/json","",false,request,reply,30)) then begin
    js = ParseJSONArea(reply);
    if (right(path,4)=="open") then begin
      if (JSONGet(js,"OpenResult")=="000000" or len(JSONGet(js,"OpenResult"))!=6) then begin
        res = 19389;//failed to open session
      end else begin
        res = 0;
      end;
    end else begin
      if (right(path,5)=="close") then begin//should redo with a switch
        if (JSONGet(js,"CloseResult")=="OK") then begin
          res = 0;
        end else begin
          res = 19389;
        end;
      end else begin
        stat = JSONGet(js,"CmdlineResult");
        stat = left(stat,2);
        if (stat=="OK") then begin
          res = 0;
        end;
        if (stat=="ER") then begin
          res = 19381;//problem with reply. possibly get more info and return to user
        end;
        if (stat=="NO") then begin
          res = 12400;//no connection to printer
        end;
      end;
    end;
  end;
  tick = GetCurTick;
  writeareatofile(reply,"_apsa.reply." & tick & ".txt",0);
  writeareatofile(request,"_apsa.request" & tick & ".txt",0);

  ExecAPSARequest = res;
  return;
end;

function Integer SendAPSASimpleCommand(record LSerialPortDeviceVc LSPDr,Integer command)
begin
  Integer res;
  area request;
  string 255 path;
  JSON js;

  switch (command) begin
    case kAPSACommandOpen:
      path = "/json/fp550/Open";
      AddTextToArea("{""port"":""0"",""settings"":""0""}",request);
    case kAPSACommandClose:
      path = "/json/fp550/Close";
    case kAPSACommandBeginReceipt:
      path = "/json/fp550/Cmdline";
      AddTextToArea("{""cmd"":""48"",""parameter"":""""}",request);
    case kAPSACommandEndReceipt:
      path = "/json/fp550/Cmdline";
      AddTextToArea("{""cmd"":""56"",""parameter"":""""}",request);
    case kAPSACommandZReport:
      path = "/json/fp550/Cmdline";
      AddTextToArea("{""cmd"":""69"",""parameter"":""0""}",request);
    case kAPSACommandXReport:
      path = "/json/fp550/Cmdline";
      AddTextToArea("{""cmd"":""69"",""parameter"":""2""}",request);
  end;

  res = ExecAPSARequest(LSPDr,path,request,js);

  SendAPSASimpleCommand = res;
  return;
end;

function string 255 GetVATCode(Integer InclVAT,string vatcode,vector val vatrates)
begin
  string 255 res;
  val vatprc,tax1;

  GetVATdouble(vatcode,vatprc,tax1,0);

  if (vatprc==vatrates[0]) then begin 
    res = "A"; 
    goto LGetVATCode;
  end;
  if (vatprc==vatrates[1]) then begin 
    res = "B"; 
    goto LGetVATCode;
  end;
  if (vatprc==vatrates[2]) then begin 
    res = "C"; 
    goto LGetVATCode;
  end;
  if (vatprc==vatrates[3]) then begin 
    res = "D"; 
    goto LGetVATCode;
  end;
  if (vatprc==vatrates[4]) then begin 
    res = "E"; 
    goto LGetVATCode;
  end;
  if (vatprc==vatrates[5]) then begin 
    res = "F"; 
    goto LGetVATCode;
  end;
LGetVATCode:;
  GetVATCode = res;
  return;
end;

procedure LoadSpecialCharacters(var vector string vChr)
begin
  string 255 find,replace,str1,str2;
  Longint pos,pos2;
  string 255 find1,find2,find3,find4;
  string 255 replace1,replace2,replace3,replace4;


  find1 = "192,193,194,195,196,197,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,223,224,225,226,227,228,229,231,232,233,234,235,236,237,238,239,241,242,243,244,245,246,248,249,250,251,252,253,255,256,";
  find2 = "257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,308,309,310,311,313,314,315,316,";
  find3 = "317,318,319,320,321,322,323,324,325,326,327,328,329,332,333,334,335,336,337,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,";
  find4 = "377,378,379,380,381,382,383,402,416,417,431,432,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,506,507,510,511,902,940,904,941,908,972,911,974,906,943,970,912,910,973,971,944,905,942";

  replace1 = "65,65,65,65,65,65,67,69,69,69,69,73,73,73,73,68,78,79,79,79,79,79,79,85,85,85,85,89,115,97,97,97,97,97,97,99,101,101,101,101,105,105,105,105,110,111,111,111,111,111,111,117,117,117,117,121,121,65,97,65,97,65,97,67,99,67,99,67,99,";
  replace2= "67,99,68,100,68,100,69,101,69,101,69,101,69,101,69,101,71,103,71,103,71,103,71,103,72,104,72,104,73,105,73,105,73,105,73,105,73,105,74,106,75,107,76,108,76,108,76,108,76,108,108,108,78,110,78,110,78,110,110,79,111,79,111,79,111,";
  replace3 = "82,114,82,114,82,114,83,115,83,115,83,115,83,115,84,116,84,116,84,116,85,117,85,117,85,117,85,117,85,117,85,117,87,119,89,121,89,90,122,90,122,90,122,115,102,79,111,85,117,65,97,73,105,79,111,85,117,85,117,85,117,85,117,85,117,";
  replace4 = "65,97,79,111,913,945,917,949,927,959,937,969,921,953,953,953,933,965,965,965,919,951";

/*
  find1 = "192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,217,218,219,220,221,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,244,245,246,248,249,250,251,252,253,255,256,257,258,";
  find2 = "259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,313,314,315,316,317,318,319,320,";
  find3 = "321,322,323,324,325,326,327,328,329,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,402,";
  find4 = "416,417,431,432,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,506,507,508,509,510,511,902,940,904,941,908,972,911,974,906,943,970,912,910,973,971,944,905,942";
  replace1 = "39,65,65,65,65,65,65,65,69,67,69,69,69,69,73,73,73,73,68,78,79,79,79,79,79,79,85,85,85,85,89,115,97,97,97,97,97,97,97,101,99,101,101,101,101,105,105,105,105,110,111,111,111,111,111,111,117,117,117,117,121,121,65,97,65,97,65,97,67,99,67,99,67,";
  replace2 = "99,67,99,68,100,68,100,69,101,69,101,69,101,69,101,69,101,71,103,71,103,71,103,71,103,72,104,72,104,73,105,73,105,73,105,73,105,73,105,73,74,105,106,74,106,75,107,76,108,76,108,76,108,76,108,108,108,78,110,78,110,78,110,110,79,111,79,111,79,111,79,";
  replace3 = "69,111,101,82,114,82,114,82,114,83,115,83,115,83,115,83,115,84,116,84,116,84,116,85,117,85,117,85,117,85,117,85,117,85,117,87,119,89,121,89,90,122,90,122,90,122,115,102,79,111,85,117,65,97,73,105,79,111,85,117,85,117,85,117,85,117,85,117,65,";
  replace4 = "97,65,69,97,101,79,111,913,945,917,949,927,959,937,969,921,953,953,953,933,965,965,965,919,951";
 */

  find = find1 & find2 & find3 & find4;
  replace = replace1 & replace2 & replace3 & replace4;
 
  while (GetNextSubstring(replace,pos2,",",str2)) begin
    GetNextSubstring(find,pos,",",str1);
    vChr[str1] = chr(StringToInt(str2));
  end;


  return;
end;

function string 255 GetCleanName(string tstr,vector string vChr)
begin
  Integer i,c;
  string 255 res;

  for (i=0;i<len(tstr);i=i+1) begin
    c = asc(mid(tstr,i,1));
    if (c>170) then begin
      res = res & vChr[c];
    end else begin
      res = res & mid(tstr,i,1);
    end;
  end;

  GetCleanName = ConvertStringToCodePage("CP1257",res);
  return;
end;

function Integer IVCash_PrintRecItem(record LSerialPortDeviceVc LSPDr,record IVCashVc IVCashr,row IVCashVc IVCashrw,Boolean voidf,vector val vatrates,vector string vChr)
begin
  Integer res;
  area request;
  string 255 path,itemline,spec,vatcode;
  JSON js;

  spec = IVCashrw.Spec;
  if (nonblank(IVCashrw.SerialNr)) then begin
    spec = spec & "\\n" & IVCashrw.SerialNr;
  end;
  if (voidf) then begin
    IVCashrw.Quant = -IVCashrw.Quant;
  end;

  vatcode = GetVATCode(IVCashr.InclVAT,IVCashrw.VATCode,vatrates);

  itemline = spec & "\\t" & vatcode & IVCashrw.Price;
  if (IVCashrw.Quant!=1) then begin
    itemline = itemline & "*" & ValToString(IVCashrw.Quant,M40Val,"",".",0);
  end;
  
  if (nonblank(IVCashrw.vRebate)) then begin
    itemline = itemline & ",-" & IVCashrw.vRebate;
  end;
  itemline = GetCleanName(itemline,vChr);
  path = "/json/fp550/Cmdline";
  AddTextToArea("{""cmd"":""49"",""parameter"":""" & itemline & """}",request);

  res = ExecAPSARequest(LSPDr,path,request,js);

  IVCash_PrintRecItem = res;
  return;
end;

procedure IVCash_CalculatePaymentModeSums(record IVCashVc IVCashr,var vector val vpaymodesums)
begin
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  val t;
  
  vpaymodesums[kInvoiceRowTypeCreditCardPayment] = 0.00;
  vpaymodesums[kInvoiceRowTypeCashPayment] = 0.00;
  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    switch (IVCashrw.stp) begin
//      case kInvoiceRowTypeGiftVoucherPayment:
      case kInvoiceRowTypeCreditCardPayment:
        vpaymodesums[kInvoiceRowTypeCreditCardPayment] = vpaymodesums[kInvoiceRowTypeCreditCardPayment] + MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
//      case kInvoiceRowTypeLoyaltyPointsPayment:
      case kInvoiceRowTypeCashPayment:
        vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
//      case kInvoiceRowTypeChequePayment:
    end;
  end;
  t = IVCashr.BaseSum4 - vpaymodesums[kInvoiceRowTypeCashPayment] - vpaymodesums[kInvoiceRowTypeCreditCardPayment];
  if (t>0) then begin
    vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + t;  
  end;
  return;
end;

function Integer SendAPSAPayments(record LSerialPortDeviceVc LSPDr,record IVCashVc IVCashr)
begin
  Integer res;
  area request;
  string 255 path;
  vector val vpaymodesums;
  JSON js;

  //payments = GetPayments;

  IVCash_CalculatePaymentModeSums(IVCashr,vpaymodesums);
  
  path = "/json/fp550/Cmdline";
  if (vpaymodesums[kInvoiceRowTypeCreditCardPayment]!=0) then begin
    AddTextToArea("{""cmd"":""53"",""parameter"":""\\tC" & ValToString(vpaymodesums[kInvoiceRowTypeCreditCardPayment],M4Val,"",".",0) & """}",request);
    res = ExecAPSARequest(LSPDr,path,request,js);
  end;

  SetAreaZeroSize(request);
  if (vpaymodesums[kInvoiceRowTypeCashPayment]!=0) then begin
    AddTextToArea("{""cmd"":""53"",""parameter"":""\\tP" & ValToString(vpaymodesums[kInvoiceRowTypeCashPayment],M4Val,"",".",0) & """}",request);
    res = ExecAPSARequest(LSPDr,path,request,js);
  end;

  SendAPSAPayments = res;
  return;
end;


function Integer BeginFiscalReceipt(record LSerialPortDeviceVc LSPDr)
begin
  Integer res;
  
  res = SendAPSASimpleCommand(LSPDr,kAPSACommandBeginReceipt);

  BeginFiscalReceipt = res;
  return;
end;

function Integer APSAOpen(record LSerialPortDeviceVc LSPDr)
begin
  Integer res;
  
  res = SendAPSASimpleCommand(LSPDr,kAPSACommandOpen);

  APSAOpen = res;
  return;
end;

function Integer APSAClose(record LSerialPortDeviceVc LSPDr)
begin
  Integer res;
  
  res = SendAPSASimpleCommand(LSPDr,kAPSACommandClose);

  APSAClose = res;
  return;
end;

function Integer IVCash_PrintCommentLine(record LSerialPortDeviceVc LSPDr,string comment,vector string vChr)
begin
  Integer res;
  string 255 path;
  area request;
  JSON js;

  path = "/json/fp550/Cmdline";
  AddTextToArea("{""cmd"":""54"",""parameter"":""" & GetCleanName(comment,vChr) & """}",request);

  res = ExecAPSARequest(LSPDr,path,request,js);

  IVCash_PrintCommentLine = res;
  return;
end;


function Integer IVCash_EndFiscalReceipt(record LSerialPortDeviceVc LSPDr)
begin
  Integer res;

  res = SendAPSASimpleCommand(LSPDr,kAPSACommandEndReceipt);

  IVCash_EndFiscalReceipt = res;
  return;
end;


function Integer IVCash_PrintItemRows(record LSerialPortDeviceVc LSPDr,record IVCashVc IVCashr,vector val vatrates)
begin
  Integer res,noErr;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  vector string 255 vChr;

  LoadSpecialCharacters(vChr);

  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal2;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal2:;
        if (nonblank(IVCashrw.ArtCode)) then begin
          res = IVCash_PrintRecItem(LSPDr,IVCashr,IVCashrw,false,vatrates,vChr);
          if (res!=noErr) then begin
            goto LPrintItemRows;
          end;
        end else begin
          res = IVCash_PrintCommentLine(LSPDr,IVCashrw.Spec,vChr);
          if (res!=noErr) then begin
            goto LPrintItemRows;
          end;
        end;
      case kInvoiceRowTypeVoid:
        res = IVCash_PrintRecItem(LSPDr,IVCashr,IVCashrw,true,vatrates,vChr);
        if (res!=noErr) then begin
          goto LPrintItemRows;
        end;
    end;
  end;
LPrintItemRows:;  
  IVCash_PrintItemRows = res;
  return;
end;

function Integer LoadVATRates(record LSerialPortDeviceVc LSPDr,vector val vatrates)
begin
  Integer res,cnt,i;
  string 255 path,tstr,stat;
  area request;
  JSON js;
  val rate;
  Longint pos;


  path = "/json/fp550/Cmdline";
  AddTextToArea("{""cmd"":""83"",""parameter"":""""}",request);

  res = ExecAPSARequest(LSPDr,path,request,js);
  if (res==0) then begin
    stat = JSONGet(js,"CmdlineResult");
    GetNextSubString(stat,pos,",",tstr);
    GetNextSubString(stat,pos,",",tstr);
    GetNextSubString(stat,pos,",",tstr);
    GetNextSubString(stat,pos,",",tstr);

    GetNextSubString(stat,pos,",",tstr);

    for (i=0;i<6;i=i+1) begin
      GetNextSubString(stat,pos,",",tstr);
      rate = StringToVal(tstr,M4Val);
      vatrates[i] = rate;
    end;
  end;
  
  
  LoadVATRates = res;
  return;
end;


global
updating function Integer IVCashVc_PrintAPSAReceipt(var record IVCashVc IVCashr,record LSerialPortDeviceVc LSPDr)
begin
  record IVCashVc oldIVCashr;
  Integer noErr,res;
  record LocalMachineBlock LMb;
  record MachineCashVc MCr;
  vector val vatrates;
  
  noErr = 0;
  //res = APSACheckStatus;
  if (res==noErr) then begin
    noErr = 0;
    BlockLoad(LMb);

  /*  
    res = LoadAPSAVATRates(vatrates);
    if (res!=noErr) then begin
      goto LIVCashVc_PrintAPSAReceipt;
    end;
  */
    res = LoadVATRates(LSPDr,vatrates);  
    if (res!=noErr) then begin
      goto LIVCashVc_PrintAPSAReceipt;
    end;
    res = BeginFiscalReceipt(LSPDr);
    if (res!=noErr) then begin
      goto LIVCashVc_PrintAPSAReceipt;
    end;
    res = IVCash_PrintItemRows(LSPDr,IVCashr,vatrates);
    if (res!=noErr) then begin
      goto LIVCashVc_PrintAPSAReceipt;
    end;
    res = SendAPSAPayments(LSPDr,IVCashr);
    if (res!=noErr) then begin
      goto LIVCashVc_PrintAPSAReceipt;
    end;
    
    res = IVCash_EndFiscalReceipt(LSPDr);
    if (res!=noErr) then begin
      goto LIVCashVc_PrintAPSAReceipt;
    end;
/* This is needed only when closing computer
    res = APSAClose(LSPDr);
    if (res!=noErr) then begin
      goto LIVCashVc_PrintAPSAReceipt;
    end;
*/
    if (IVCashr.Prntdf!=0) then begin
      //RecordCopy(oldIVCashr,IVCashr);
      IVCashr.Prntdf = 1;
      //RecordUpdate(oldIVCashr,IVCashr,false);
    end;    
LIVCashVc_PrintAPSAReceipt:;
    if (res!=0) then begin
      MessageBox(res,"");
    end;
  end;

  IVCashVc_PrintAPSAReceipt = res;
  return;
end;

global
function Integer APSA_PrintZReport(record LSerialPortDeviceVc LSPDr)
begin
  Integer res;
  
  res = SendAPSASimpleCommand(LSPDr,kAPSACommandZReport);

  APSA_PrintZReport = res;
  return;
end;

global
function Integer APSA_PrintXReport(record LSerialPortDeviceVc LSPDr)
begin
  Integer res;
  
  res = SendAPSASimpleCommand(LSPDr,kAPSACommandXReport);

  APSA_PrintXReport = res;
  return;
end;

function Integer MoneyOutCurr(record LSerialPortDeviceVc LSPDr,record CashVc Cashr)
begin
  Integer res,msglen,noErr;
  string 255 path;
  area request;
  JSON js;
    
  path = "/json/fp550/Cmdline";
  AddTextToArea("{""cmd"":""70"",""parameter"":""" & ValToString(-Cashr.Total,M4UVal,"",".",0) & """}",request);

  res = ExecAPSARequest(LSPDr,path,request,js);

  MoneyOutCurr = res;
  return;
end;

function Integer MoneyInCurr(record LSerialPortDeviceVc LSPDr,record CashVc Cashr)
begin
  Integer res,msglen,noErr;
  string 255 path;
  area request;
  JSON js;
    
  path = "/json/fp550/Cmdline";
  AddTextToArea("{""cmd"":""70"",""parameter"":""" & ValToString(Cashr.Total,M4UVal,"",".",0) & """}",request);

  res = ExecAPSARequest(LSPDr,path,request,js);

  MoneyInCurr = res;
  return;
end;

global
function Integer APSA_CashEvent(var record CashVc Cashr,record LSerialPortDeviceVc LSPDr)
begin
  Integer noErr,res;
  
//  res = FB05Open(LSPDr);
//  if (res==noErr) then begin    
    switch (Cashr.Event) begin
      case 0:
        res = MoneyOutCurr(LSPDr,Cashr);
      case 1:
        res = MoneyInCurr(LSPDr,Cashr);
    end;
LPrintFB05CashEvent:;
//    FB05Close;
    if (res!=0) then begin
      MessageBox(res,"");
    end;
//  end;

  APSA_CashEvent = res;
  return;
end;

global
procedure SetPOSWindowDisplayModeFiscalPrinterAPSA(record LSerialPortDeviceVc LSPDr,string dispstr,string disp2str)
begin
  Integer res,msglen,noErr;
  string 255 path;
  area request;
  JSON js;
  vector string 255 vChr;
    
  //clear 
  LoadSpecialCharacters(vChr);

  path = "/json/fp550/Cmdline";
 
  AddTextToArea("{""cmd"":""33"",""parameter"":""""}",request);
  res = ExecAPSARequest(LSPDr,path,request,js);

  if (nonblank(dispstr)) then begin
    SetAreaZeroSize(request);
    AddTextToArea("{""cmd"":""47"",""parameter"":""" & GetCleanName(dispstr,vChr) & """}",request);
    res = ExecAPSARequest(LSPDr,path,request,js);
  end;

  if (nonblank(disp2str)) then begin
    SetAreaZeroSize(request);
    AddTextToArea("{""cmd"":""35"",""parameter"":""" & GetCleanName(disp2str,vChr) & """}",request);
    res = ExecAPSARequest(LSPDr,path,request,js);
  end;

  return;
end;

global
procedure APSAManageConnection(Boolean loginf)
begin
  record LocalMachineBlock LMb;
  record LSerialPortDeviceVc LSPDr;
  Integer res;
    
  BlockLoad(LMb);  
  if (FindLocalSerialPortDevice(kSerialPortDeviceClassFiscalPrinter,-1,LMb.LocalMachineCode,LSPDr)==false) then begin  
    goto LAPSACloseConnection;
  end;
  switch (LSPDr.Printer) begin
    case 200:
      if (loginf) then begin
        res = APSAOpen(LSPDr);
        if (res!=0) then begin
          MessageBox(22101,"");
        end;
      end else begin
        res = APSAClose(LSPDr);
      end;
  end;
LAPSACloseConnection:;  
  return;
end;
