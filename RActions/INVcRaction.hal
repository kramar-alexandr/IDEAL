// EVS: DESK-1602
// !!! UPDATE THIS FILE WHEN UPDATING VERSION OR ADDING FIELDS TO INVC !!!

procedure CopyItemRecord(var record INVc tINr,record INVc INr)
begin
  row INVc tINrw,INrw;
  integer i,rwc;
  
  tINr.UUID = INr.UUID;
  tINr.ServerSequence = INr.ServerSequence;
  tINr.SyncFlags = INr.SyncFlags;
  tINr.Code = INr.Code;
  tINr.Name = INr.Name;
  tINr.Unittext = INr.Unittext;
  tINr.MinLevel = INr.MinLevel;
  tINr.Objects = INr.Objects;
  tINr.SalesAcc = INr.SalesAcc;
  tINr.UPrice1 = INr.UPrice1;
  tINr.ItemType = INr.ItemType;
  tINr.Group = INr.Group;
//   tINr.x1 = INr.x1;
//   tINr.x2 = INr.x2;
  tINr.InPrice = INr.InPrice;
  tINr.InvCode = INr.InvCode;
  tINr.ExtraCost = INr.ExtraCost;
  tINr.SerNrf = INr.SerNrf;
  tINr.Department = INr.Department;
  tINr.Weight = INr.Weight;
  tINr.Volume = INr.Volume;
  tINr.EUCodex = INr.EUCodex;
  tINr.InCurncyCode = INr.InCurncyCode;
  tINr.Bonus = INr.Bonus;
  tINr.Recepy = INr.Recepy;
  tINr.Markup = INr.Markup;
//   tINr.x3 = INr.x3;
  tINr.BarCode = INr.BarCode;
  tINr.UpdateCost = INr.UpdateCost;
  tINr.LastPriceChange = INr.LastPriceChange;
  tINr.CalcPrice = INr.CalcPrice;
  tINr.VATCode = INr.VATCode;
  tINr.PriceFactor = INr.PriceFactor;
  tINr.Terminated = INr.Terminated;
  tINr.AvgMarkup = INr.AvgMarkup;
  tINr.LastPurchPrice = INr.LastPurchPrice;
  tINr.LastPurchCurncyCode = INr.LastPurchCurncyCode;
  tINr.WeighedAvPrice = INr.WeighedAvPrice;
  tINr.Conversion1 = INr.Conversion1;
  tINr.Conversion2 = INr.Conversion2;
  tINr.WarrantyLength = INr.WarrantyLength;
  tINr.InvRecepy = INr.InvRecepy;
  tINr.EUSalesAcc = INr.EUSalesAcc;
  tINr.ExpSalesAcc = INr.ExpSalesAcc;
  tINr.VATCodeEU = INr.VATCodeEU;
  tINr.VATCodeExp = INr.VATCodeExp;
  tINr.ChangePrice = INr.ChangePrice;
  tINr.RebCode = INr.RebCode;
  tINr.ExplodeRec = INr.ExplodeRec;
  tINr.Unittext2 = INr.Unittext2;
  tINr.UnitCoefficient = INr.UnitCoefficient;
  tINr.WarnText1 = INr.WarnText1;
  tINr.VARList = INr.VARList;
  tINr.ItemMaterial = INr.ItemMaterial;
  tINr.AlcPrc = INr.AlcPrc;
  tINr.DefaultSource = INr.DefaultSource;
  tINr.AlternativeCode = INr.AlternativeCode;
  tINr.CostAcc = INr.CostAcc;
  tINr.DefLocation = INr.DefLocation;
  tINr.LastBasePriceChange = INr.LastBasePriceChange;
  tINr.MaxLevel = INr.MaxLevel;
  tINr.LastPurchPrice2 = INr.LastPurchPrice2;
  tINr.Width = INr.Width;
  tINr.Height = INr.Height;
  tINr.Depth = INr.Depth;
  tINr.ContractItem = INr.ContractItem;
  tINr.Internal = INr.Internal;
  tINr.InclItemFreight = INr.InclItemFreight;
  tINr.FixedFreight = INr.FixedFreight;
  tINr.DispGroups = INr.DispGroups;
  tINr.HazLevCode = INr.HazLevCode;
  tINr.Density = INr.Density;
  tINr.xClassification = INr.xClassification;
  tINr.CredSalesAcc = INr.CredSalesAcc;
  tINr.CredEUSalesAcc = INr.CredEUSalesAcc;
  tINr.CredExpSalesAcc = INr.CredExpSalesAcc;
  tINr.CredVATCode = INr.CredVATCode;
  tINr.CredVATCodeEU = INr.CredVATCodeEU;
  tINr.CredVATCodeExp = INr.CredVATCodeExp;
  tINr.RentalItem = INr.RentalItem;
  tINr.CompUsage = INr.CompUsage;
  tINr.colnr = INr.colnr;
  tINr.VARMask = INr.VARMask;
  tINr.VARRepOrder = INr.VARRepOrder;
  tINr.VARSubsets = INr.VARSubsets;
  tINr.LocArea = INr.LocArea;
  tINr.EKNCode = INr.EKNCode;
  tINr.DefPalletItem = INr.DefPalletItem;
  tINr.QtyonPallet = INr.QtyonPallet;
  tINr.PalletWidth = INr.PalletWidth;
  tINr.PalletHeight = INr.PalletHeight;
  tINr.PalletDepth = INr.PalletDepth;
  tINr.Brand = INr.Brand;
  tINr.BrandType = INr.BrandType;
  tINr.PickArea = INr.PickArea;
  tINr.SWWCode = INr.SWWCode;
  tINr.RepaPricePerWeight = INr.RepaPricePerWeight;
  tINr.PalletsInPickArea = INr.PalletsInPickArea;
  tINr.DefPosWidth = INr.DefPosWidth;
  tINr.DefPosHeight = INr.DefPosHeight;
  tINr.DefPosDepth = INr.DefPosDepth;
  tINr.InPriceB2 = INr.InPriceB2;
  tINr.WeighedAvPriceB2 = INr.WeighedAvPriceB2;
  tINr.EUCostAcc = INr.EUCostAcc;
  tINr.ExpCostAcc = INr.ExpCostAcc;
  tINr.PalletLayers = INr.PalletLayers;
  tINr.QtyonPalletLayer = INr.QtyonPalletLayer;
  tINr.UserStr1 = INr.UserStr1;
  tINr.UserStr2 = INr.UserStr2;
  tINr.UserStr3 = INr.UserStr3;
  tINr.UserStr4 = INr.UserStr4;
  tINr.UserStr5 = INr.UserStr5;
  tINr.UserVal1 = INr.UserVal1;
  tINr.UserVal2 = INr.UserVal2;
  tINr.UserVal3 = INr.UserVal3;
  tINr.UserDate1 = INr.UserDate1;
  tINr.UserDate2 = INr.UserDate2;
  tINr.UserDate3 = INr.UserDate3;
  tINr.RentGroup = INr.RentGroup;
  tINr.FAGroup = INr.FAGroup;
  tINr.NetWeight = INr.NetWeight;
  tINr.PrimaryCostModel = INr.PrimaryCostModel;
  tINr.QueuedCostModel = INr.QueuedCostModel;
  tINr.CostPerc = INr.CostPerc;
  tINr.FIFOPerSerialNr = INr.FIFOPerSerialNr;
  tINr.FIFOPerLocation = INr.FIFOPerLocation;
  tINr.WAPerLocation = INr.WAPerLocation;
  tINr.CostPricePerLocation = INr.CostPricePerLocation;
  tINr.NotForSales = INr.NotForSales;
  tINr.SRUpdateCost = INr.SRUpdateCost;
  tINr.SuppSerialNr = INr.SuppSerialNr;
  tINr.MajStoneDet = INr.MajStoneDet;
  tINr.Colour = INr.Colour;
  tINr.Clarity = INr.Clarity;
  tINr.Cert = INr.Cert;
  tINr.MinStoneDet = INr.MinStoneDet;
  tINr.Metal = INr.Metal;
  tINr.RowWeight = INr.RowWeight;
  tINr.Size = INr.Size;
  tINr.Length = INr.Length;
  tINr.WatchBrand = INr.WatchBrand;
  tINr.StyleName = INr.StyleName;
  tINr.WatchMetal = INr.WatchMetal;
  tINr.Movement = INr.Movement;
  tINr.BrcStr = INr.BrcStr;
  tINr.Gender = INr.Gender;
  tINr.Other = INr.Other;
  tINr.Other2 = INr.Other2;
  tINr.Reference = INr.Reference;
  tINr.Perceptions = INr.Perceptions;
  tINr.Withholdings = INr.Withholdings;
  tINr.TaxTemplateCode = INr.TaxTemplateCode;
  tINr.TaxTemplateCodeEU = INr.TaxTemplateCodeEU;
  tINr.TaxTemplateCodeExp = INr.TaxTemplateCodeExp;
  tINr.DonotRequireBatchNrOnIVCash = INr.DonotRequireBatchNrOnIVCash;
  tINr.HotelWIPAcc = INr.HotelWIPAcc;
  tINr.CPSCode = INr.CPSCode;
  tINr.SVOInvbleSalesAcc = INr.SVOInvbleSalesAcc;
  tINr.SVOWarrantySalesAcc = INr.SVOWarrantySalesAcc;
  tINr.SVOContractSalesAcc = INr.SVOContractSalesAcc;
  tINr.SVOGoodwillSalesAcc = INr.SVOGoodwillSalesAcc;
  tINr.SVOInvbleCostAcc = INr.SVOInvbleCostAcc;
  tINr.SVOWarrantyCostAcc = INr.SVOWarrantyCostAcc;
  tINr.SVOContractCostAcc = INr.SVOContractCostAcc;
  tINr.SVOGoodwillCostAcc = INr.SVOGoodwillCostAcc;
  tINr.HasExcise = INr.HasExcise;
  tINr.ProjMaterialsUsageAcc = INr.ProjMaterialsUsageAcc;
  tINr.DefOrderType = INr.DefOrderType;
  tINr.StockItemType = INr.StockItemType;
  tINr.SortCode = INr.SortCode;
  tINr.RvrsVATCode = INr.RvrsVATCode;
  tINr.SameItem = INr.SameItem;
  tINr.Color = INr.Color;
  tINr.OldPrice = INr.OldPrice;
  tINr.WebProducer = INr.WebProducer;
  tINr.WebColor = INr.WebColor;
  tINr.WebSync = INr.WebSync;
  tINr.WebType = INr.WebType;
  tINr.WebScreen = INr.WebScreen;
  tINr.WebProcesor = INr.WebProcesor;
  tINr.WebMemory = INr.WebMemory;
  tINr.WebCapacity = INr.WebCapacity;
  tINr.WebGraphic = INr.WebGraphic;
  tINr.WebCamera = INr.WebCamera;
  tINr.WebConnection = INr.WebConnection;
  tINr.WebCellular = INr.WebCellular;
  tINr.WebWireles = INr.WebWireles;
  tINr.WebBatery = INr.WebBatery;
  tINr.WebWeigth = INr.WebWeigth;
  tINr.WebMaterial = INr.WebMaterial;
  tINr.WebResistance = INr.WebResistance;
  tINr.WebPacked = INr.WebPacked;
  tINr.WebOtherInf = INr.WebOtherInf;
  tINr.WebItem = INr.WebItem;
  tINr.ReducedPrice = INr.ReducedPrice;
  tINr.DeliveryTerm = INr.DeliveryTerm;
  tINr.WebKeyLang = INr.WebKeyLang;
  tINr.WebSKU = INr.WebSKU;
  
  rwc = MatRowCnt(INr);
  for (i = 0; i < rwc; i = i + 1) begin
    MatRowGet(INr,i,INrw);
    tINrw.LangCode = INrw.LangCode;
    tINrw.Text = INrw.Text;
    MatRowPut(tINr,i,tINrw);
  end;

return;
end;

global
procedure idealwriteLines(var record INVc INr)
begin
  record INVc tINr;
  LongInt textsize,pos;
  string 1 c;
  string 255 tstr2;
  
  RecordCopy(tINr,INr);
  RecordClear(INr);
  CopyItemRecord(INr,tINr);
  
  textsize = SizeTextCnt(tINr);
  pos = 0;
  while (pos<textsize) begin
    c = StringFromText(tINr,pos,1);
    switch (c) begin
      case "&": c = "&amp;";
      case "<": c = "&lt;";
      case ">": c = "&gt;";
      case """": c = "&quot;";
      case "”": c = "&#8221;";
      case "'": c = "&apos;";
      otherwise 
        if (asc(c) == 1) then begin
          c = "";
        end;
    end;
    tstr2 = c;
    AddToText(tstr2,INr);
    pos = pos + 1;
  end;
  
return
end;
// :EVS