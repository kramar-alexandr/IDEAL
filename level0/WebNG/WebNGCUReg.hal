external function Boolean IsMarketplaceServer();
//tools
external function Boolean IsInvalidPhoneNumber(string);
external function string 255 FormatLink(string,string,boolean,boolean);
external procedure GetListOfCompaniesForCountry(string,var array integer,var array string);
external function string 10 ToolWebNGGetCountry();
external procedure FillArrayWithCClass(string,var array string,var array string,var integer);
external procedure FillArrayWithCustCat(var array string,var array string,var integer);
external procedure FillArrayWithCountry(var array string,var array string,var integer);
external procedure SimpleElementComboBox(string,string,string,string,array string,array string,integer,string,boolean,boolean);
external function string 255 FormatSimpleLink(string,boolean);
external procedure SessionAddToArray(string,string);
external function Boolean SessionGetNextFromArray(string,var string,var Integer);
external procedure SessionClearArray(string);
external function string 10 GetClassificationOfType(string,string,var string);
external function string 255 RemoveClassificationsOfType(string,string);
external procedure RollbackOneRequestURL();
external function string 255 GetLinkToStruct(LongInt,boolean);
external procedure WebOutSubmit(string,string,string,string);
external function boolean CheckRecaptcha(area);
external function boolean IsRecaptchaEnabled(integer);
external function string 255 RecaptchaSiteKey();
//translation
external function string 255 ToolWebNGTranslateText(integer);
external function string 255 GetTranslatedNameCURegField(record CURegFieldVc);
//webng
external procedure RedirectToURL(string);
external procedure RedirectToStartPage();
external procedure ShowRedirectHtml(string,boolean);
//myaccount
external function string 255 GetLinkToMyAccount;
external procedure MyAccountShowErrors(string);
external updating procedure SendEmailConfirmationMail(record CUVc);
//std
external function string 255 AddStr(string,string,string);
external function string 255 ConvertXml(string);
external function string 255 GetNextValue(var string);
external function Boolean GetNextCustNr(var string);
external procedure CUVc_PasteCountryCode(var record CUVc,string);
external function Boolean CustomerWithNameExists(string,string);
external function Boolean CustomerWithEmailExists(string,string);
external function Boolean CustomerWithRegNr1Exists(string,string);
external function Boolean CustomerWithVATNrExists(string,string);
external function string 255 StrReplace(string,string,string);
//old code:
external function Boolean GetNextDelCode(var string);
external function Integer CheckVATNrMask(string,string,Integer,var string);
external function Boolean IsPostcodeFormatCorrect(string);
external function Boolean CheckEmailStr(string);
external updating procedure SendWebshopMail(Integer,Longint);
external function Boolean AnyClassInSet(string,string);
external updating procedure DoUpdateSubscriptionFromSubINPackages(Longint,string,record CUVc);
external function Boolean HansaMailCustomMandatoryField(record CURegFieldVc);

global
procedure FillArrayWithBillingType(var array string texts,var array string codes,var integer arrlen,integer value)
begin
  record CountryVc Countryr;
  row CountryVc Countryrw;
  Integer i,cnt;
  string 255 langcode,text,code;
  
  arrlen = 0;
  /*
  for (i=3;i<5;i=i+1) begin
    texts[arrlen] = ToolWebNGTranslateText(32400+i);
    codes[arrlen] = i;
    arrlen = arrlen + 1;
  end;
  */
  switch (value) begin
    case kBillPaymentPrefCCorInvoice:
      texts[0] = ToolWebNGTranslateText(32400);
      codes[0] = kBillPaymentPrefCCorInvoice;
      texts[1] = ToolWebNGTranslateText(32401);
      codes[1] = kBillPaymentPrefInvoiceorCC;
      texts[2] = ToolWebNGTranslateText(32405);
      codes[2] = kBillPaymentPrefPaypalorCC;
    case kBillPaymentPrefInvoiceorCC:
      texts[0] = ToolWebNGTranslateText(32401);
      codes[0] = kBillPaymentPrefInvoiceorCC;
      texts[1] = ToolWebNGTranslateText(32400);
      codes[1] = kBillPaymentPrefCCorInvoice;
      texts[2] = ToolWebNGTranslateText(32405);
      codes[2] = kBillPaymentPrefPaypalorCC;
    case kBillPaymentPrefPaypalorCC:
      texts[0] = ToolWebNGTranslateText(32405);
      codes[0] = kBillPaymentPrefPaypalorCC;
      texts[1] = ToolWebNGTranslateText(32401);
      codes[1] = kBillPaymentPrefInvoiceorCC;
      texts[2] = ToolWebNGTranslateText(32400);
      codes[2] = kBillPaymentPrefCCorInvoice;
  end;
  arrlen = 3;
  
  return;
end;

global
procedure FillArrayWithPaymentTerm(var array string texts,var array string codes,var integer arrlen)
begin
  record PDVc PDr;
  row PDVc PDrw;
  record CUVc CUr;
  Integer i,cnt,rwcnt;
  string 255 langcode,text,code;

  CUr.Code = CurrentCust;
  ReadFirstMain(CUr,1,true);
  langcode = CUr.LangCode;
  while (LoopMain(PDr,1,true)) begin
    if (PDr.PDType==kInvoiceTypeNormal) then begin
      codes[arrlen] = PDr.Code;
      texts[arrlen] = PDr.pdComment;
      rwcnt = MatRowCnt(PDr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PDr,i,PDrw);
        if (langcode==PDrw.LangCode) then begin
          texts[arrlen] = PDrw.Text;      
        end;
      end;
      arrlen = arrlen + 1;
    end;
  end;
  
  return;
end;



procedure SimpleElementRadioGroup(string id,string class,string name,string label,array string texts,array string values,integer arrlen,string selvalue,boolean firstblank,boolean enabled)
begin
  string 255 tstr,input_id;
  integer i,cnt;
  
  if (nonblank(label)) then begin
    WebOutStringFormatNL("<label class=""" & class & """ for=""" & name & """>" & label & "</label>");
  end;
  
  tstr = "<ul";
  if (nonblank(id)) then begin
    tstr = tstr & " id=""" & id & """";
  end;
  if (nonblank(class)) then begin
    tstr = tstr & " class=""" & class & """";
  end;
  if (enabled==false) then begin
    tstr = tstr & " disabled";
  end;
  tstr = tstr & ">";
  
  WebOutTagOpen(tstr);
  
  for (i=0;i<arrlen;i=i+1) begin
    WebOutTagOpen("<li>");
    input_id = id & "_" & i;
    
    tstr = "<input type=""radio""";
    tstr = tstr & " id=""" & input_id & """";
    if (nonblank(name)) then begin
      tstr = tstr & " name=""" & name & """";
    end;
    tstr = tstr & " value=""" & values[i] & """";
    if (nonblank(selvalue) and values[i]==selvalue) then begin
      tstr = tstr & " checked";
    end;
    tstr = tstr & ">";
    WebOutStringFormat(tstr);
    WebOutStringFormat("<label for=""" & input_id & """>" & texts[i] & "</label>");
    
    WebOutTagClose("</li>");
  end;

  WebOutTagClose("</ul>");

  return;
end;

function string 100 GetCURegFieldName(Integer FieldType,var Integer class_cnt)
begin
  string 100 res;
  
  switch (FieldType) begin
    case kCURegFieldTypeName: res = "name";
    case kCURegFieldTypeInvAddr0: res = "invaddr0";
    case kCURegFieldTypeInvAddr1: res = "invaddr1";
    case kCURegFieldTypeInvAddr2: res = "invaddr2";
    case kCURegFieldTypeInvAddr3: res = "invaddr3";
    case kCURegFieldTypeInvAddr4: res = "invaddr4";
    case kCURegFieldTypeSorting: res = "sorting";
    case kCURegFieldTypeDepartment: res = "department";
    case kCURegFieldTypePhone: res = "phone";
    case kCURegFieldTypeFax: res = "fax";
    case kCURegFieldTypeAltPhone: res = "altphone";
    case kCURegFieldTypeMobile: res = "mobile";
    case kCURegFieldTypeSkypeName: res = "skypename";
    case kCURegFieldTypeSIPCode: res = "sipcode";
    case kCURegFieldTypeeMail: res = "email";
    case kCURegFieldTypeeMailConfirm: res = "emailconfirm";
    case kCURegFieldTypeExtension: res = "extension";
    case kCURegFieldTypePerson: res = "person";
    case kCURegFieldTypewwwAddr: res = "wwwaddr";
    case kCURegFieldTypeClassificationSelect: 
      res = "classification_" & class_cnt;
      class_cnt = class_cnt + 1;
    case kCURegFieldTypeClassificationRadio:
      res = "classification_" & class_cnt;
      class_cnt = class_cnt + 1;
    case kCURegFieldTypeClassificationCheckbox:
      res = "classification_" & class_cnt;
      class_cnt = class_cnt + 1;
    case kCURegFieldTypePassword: res = "password";
    case kCURegFieldTypePasswordConfirm: res = "passwordconfirm";
    case kCURegFieldTypeDelAddr0: res = "deladdr0";
    case kCURegFieldTypeDelAddr1: res = "deladdr1";
    case kCURegFieldTypeDelAddr2: res = "deladdr2";
    case kCURegFieldTypeDelAddr3: res = "deladdr3";
    case kCURegFieldTypeDelAddr4: res = "deladdr4";
    case kCURegFieldTypeRegNr1: res = "regnr1";
    case kCURegFieldTypeRegNr2: res = "regnr2";
    case kCURegFieldTypeVATNr: res = "vatnr";
    case kCURegFieldTypeCountryCode: res = "countrycode";
    case kCURegFieldTypeRegion: res = "region";
    case kCURegFieldTypeCustCat: res = "custcat";
    case kCURegFieldTypeUserStr1: res = "userstr1";
    case kCURegFieldTypeUserStr2: res = "userstr2";
    case kCURegFieldTypeUserStr3: res = "userstr3";
    case kCURegFieldTypeUserStr4: res = "userstr4";
    case kCURegFieldTypeUserStr5: res = "userstr5";
    case kCURegFieldTypeUserVal1: res = "userval1";
    case kCURegFieldTypeUserVal2: res = "userval2";
    case kCURegFieldTypeUserVal3: res = "userval3";
    case kCURegFieldTypeUserDate1: res = "userdate1";
    case kCURegFieldTypeUserDate2: res = "userdate2";
    case kCURegFieldTypeUserDate3: res = "userdate3";
    case kCURegFieldTypeNoLetterPosting: res = "noletterposting";
    case kCURegFieldTypeNoMailPosting: res = "nomailposting";
    case kCURegFieldTypeCustCode: res = "custcode";
    case kCURegFieldTypeBillingType: res = "billingtype";
    case kCURegFieldTypePaymentTerms: res = "paymentterms";
    case kCURegFieldTypeNewCreditCardNumber: res = "newccnumber";
    case kCURegFieldTypeNewCreditCardExpiry: res = "newccexpiry";
    otherwise res = "unknown";
  end;
  
  GetCURegFieldName = res;
  return;
end;

global
function string 255 GetCURegFieldValue(record CUVc CUr,record CURegFieldVc CURegFieldr)
begin
  string 255 res,tstr;
  record NewCreditCardVc NCCr;
  
  NCCr.CUCode = CUr.Code;
  ReadLastKey("CUCode",NCCr,1,true);
  switch (CURegFieldr.FieldType) begin
    case kCURegFieldTypeName: res = CUr.Name;
    case kCURegFieldTypeInvAddr0: res = CUr.InvAddr0;
    case kCURegFieldTypeInvAddr1: res = CUr.InvAddr1;
    case kCURegFieldTypeInvAddr2: res = CUr.InvAddr2;
    case kCURegFieldTypeInvAddr3: res = CUr.InvAddr3;
    case kCURegFieldTypeInvAddr4: res = CUr.InvAddr4;
    case kCURegFieldTypeSorting: res = CUr.Sorting;
    case kCURegFieldTypeDepartment: res = CUr.Department;
    case kCURegFieldTypePhone: res = CUr.Phone;
    case kCURegFieldTypeFax: res = CUr.Fax;
    case kCURegFieldTypeAltPhone: res = CUr.AltPhone;
    case kCURegFieldTypeMobile: res = CUr.Mobile;
    case kCURegFieldTypeSkypeName: res = CUr.SkypeName;
    case kCURegFieldTypeSIPCode: res = CUr.SIPCode;
    case kCURegFieldTypeeMail: res = CUr.eMail;
    case kCURegFieldTypeeMailConfirm: res = "";
    case kCURegFieldTypeExtension: res = CUr.Extension;
    case kCURegFieldTypePerson: res = CUr.Person;
    case kCURegFieldTypewwwAddr: res = CUr.wwwAddr;
    case kCURegFieldTypeClassificationSelect: res = GetClassificationOfType(CUr.Classification,CURegFieldr.Param,tstr);
    case kCURegFieldTypeClassificationRadio: res = GetClassificationOfType(CUr.Classification,CURegFieldr.Param,tstr);
    case kCURegFieldTypeClassificationCheckbox: res = GetClassificationOfType(CUr.Classification,CURegFieldr.Param,tstr);
    case kCURegFieldTypePassword: res = "";
    case kCURegFieldTypePasswordConfirm: res = "";
    case kCURegFieldTypeDelAddr0: res = CUr.DelAddr0;
    case kCURegFieldTypeDelAddr1: res = CUr.DelAddr1;
    case kCURegFieldTypeDelAddr2: res = CUr.DelAddr2;
    case kCURegFieldTypeDelAddr3: res = CUr.DelAddr3;
    case kCURegFieldTypeDelAddr4: res = CUr.DelAddr4;
    case kCURegFieldTypeRegNr1: res = CUr.RegNr1;
    case kCURegFieldTypeRegNr2: res = CUr.RegNr2;
    case kCURegFieldTypeVATNr: res = CUr.VATNr;
    case kCURegFieldTypeCountryCode: res = CUr.CountryCode;
    case kCURegFieldTypeRegion: res = CUr.Region;
    case kCURegFieldTypeCustCat: res = CUr.CustCat;
    case kCURegFieldTypeUserStr1: res = CUr.UserStr1;
    case kCURegFieldTypeUserStr2: res = CUr.UserStr2;
    case kCURegFieldTypeUserStr3: res = CUr.UserStr3;
    case kCURegFieldTypeUserStr4: res = CUr.UserStr4;
    case kCURegFieldTypeUserStr5: res = CUr.UserStr5;
    case kCURegFieldTypeUserVal1: res = CUr.UserVal1;
    case kCURegFieldTypeUserVal2: res = CUr.UserVal2;
    case kCURegFieldTypeUserVal3: res = CUr.UserVal3;
    case kCURegFieldTypeUserDate1: res = CUr.UserDate1;
    case kCURegFieldTypeUserDate2: res = CUr.UserDate2;
    case kCURegFieldTypeUserDate3: res = CUr.UserDate3;
    case kCURegFieldTypeNoLetterPosting:
      if (CUr.NoLetterPosting==0) then begin
        res = "";
      end else begin
        res = "1";
      end;
    case kCURegFieldTypeNoMailPosting:
      if (CUr.NoMailPosting==0) then begin
        res = "";
      end else begin
        res = "1";
      end;
    case kCURegFieldTypeCustCode: res = CUr.Code;
    case kCURegFieldTypeBillingType: res = CUr.BillingTypePreference;
    case kCURegFieldTypePaymentTerms: res = CUr.PayDeal;
    case kCURegFieldTypeNewCreditCardNumber: if (nonblank(NCCr.CreditCardNr)) then begin res = ToolWebNGTranslateText(25209) & " " & Right(NCCr.CreditCardNr,4); end;
    case kCURegFieldTypeNewCreditCardExpiry: res = NCCr.ValidThru;
  end;
  
  GetCURegFieldValue = res;
  return;
end;

global
function string 255 GetCURegFieldComment(record CUVc CUr,record CURegFieldVc CURegFieldr)
begin
  string 255 res,tstr;
  record CountryVc Countryr;
  record RegionVc Regionr;
  record CCatVc CCatr;
  record NewCreditCardVc NCCr;
  
  NCCr.CUCode = CUr.Code;
  ReadLastKey("CUCode",NCCr,1,true);  
  switch (CURegFieldr.FieldType) begin
    case kCURegFieldTypeName: res = CUr.Name;
    case kCURegFieldTypeInvAddr0: res = CUr.InvAddr0;
    case kCURegFieldTypeInvAddr1: res = CUr.InvAddr1;
    case kCURegFieldTypeInvAddr2: res = CUr.InvAddr2;
    case kCURegFieldTypeInvAddr3: res = CUr.InvAddr3;
    case kCURegFieldTypeInvAddr4: res = CUr.InvAddr4;
    case kCURegFieldTypeSorting: res = CUr.Sorting;
    case kCURegFieldTypeDepartment: res = CUr.Department;
    case kCURegFieldTypePhone: res = CUr.Phone;
    case kCURegFieldTypeFax: res = CUr.Fax;
    case kCURegFieldTypeAltPhone: res = CUr.AltPhone;
    case kCURegFieldTypeMobile: res = CUr.Mobile;
    case kCURegFieldTypeSkypeName: res = CUr.SkypeName;
    case kCURegFieldTypeSIPCode: res = CUr.SIPCode;
    case kCURegFieldTypeeMail: res = CUr.eMail;
    case kCURegFieldTypeeMailConfirm: res = "";
    case kCURegFieldTypeExtension: res = CUr.Extension;
    case kCURegFieldTypePerson: res = CUr.Person;
    case kCURegFieldTypewwwAddr: res = CUr.wwwAddr;
    case kCURegFieldTypeClassificationSelect: 
      res = GetClassificationOfType(CUr.Classification,CURegFieldr.Param,tstr);
      res = tstr;
    case kCURegFieldTypeClassificationRadio:
      res = GetClassificationOfType(CUr.Classification,CURegFieldr.Param,tstr);
      res = tstr;
    case kCURegFieldTypeClassificationCheckbox:
      res = GetClassificationOfType(CUr.Classification,CURegFieldr.Param,tstr);
      res = tstr;
    case kCURegFieldTypePassword: res = "";
    case kCURegFieldTypePasswordConfirm: res = "";
    case kCURegFieldTypeDelAddr0: res = CUr.DelAddr0;
    case kCURegFieldTypeDelAddr1: res = CUr.DelAddr1;
    case kCURegFieldTypeDelAddr2: res = CUr.DelAddr2;
    case kCURegFieldTypeDelAddr3: res = CUr.DelAddr3;
    case kCURegFieldTypeDelAddr4: res = CUr.DelAddr4;
    case kCURegFieldTypeRegNr1: res = CUr.RegNr1;
    case kCURegFieldTypeRegNr2: res = CUr.RegNr2;
    case kCURegFieldTypeVATNr: res = CUr.VATNr;
    case kCURegFieldTypeCountryCode: 
      Countryr.Code = CUr.CountryCode;
      ReadFirstMain(Countryr,1,true);
      res = Countryr.Comment;
    case kCURegFieldTypeRegion:
      Regionr.Code = CUr.Region;
      ReadFirstMain(Regionr,1,true);
      res = Regionr.Name;
    case kCURegFieldTypeCustCat:
      CCatr.Code = CUr.CustCat;
      ReadFirstMain(CCatr,1,true);
      res = CCatr.Comment;
    case kCURegFieldTypeUserStr1: res = CUr.UserStr1;
    case kCURegFieldTypeUserStr2: res = CUr.UserStr2;
    case kCURegFieldTypeUserStr3: res = CUr.UserStr3;
    case kCURegFieldTypeUserStr4: res = CUr.UserStr4;
    case kCURegFieldTypeUserStr5: res = CUr.UserStr5;
    case kCURegFieldTypeUserVal1: res = CUr.UserVal1;
    case kCURegFieldTypeUserVal2: res = CUr.UserVal2;
    case kCURegFieldTypeUserVal3: res = CUr.UserVal3;
    case kCURegFieldTypeUserDate1: res = CUr.UserDate1;
    case kCURegFieldTypeUserDate2: res = CUr.UserDate2;
    case kCURegFieldTypeUserDate3: res = CUr.UserDate3;
    case kCURegFieldTypeNoLetterPosting:
      if (CUr.NoLetterPosting==0) then begin
        res = ToolWebNGTranslateText(25533); // No
      end else begin
        res = ToolWebNGTranslateText(25532); // Yes
      end;
    case kCURegFieldTypeNoMailPosting:
      if (CUr.NoMailPosting==0) then begin
        res = ToolWebNGTranslateText(25533); // No
      end else begin
        res = ToolWebNGTranslateText(25532); // Yes
      end;
    case kCURegFieldTypeCustCode: res = CUr.Code;
    case kCURegFieldTypeBillingType: res = ToolWebNGTranslateText(32400+CUr.BillingTypePreference);
    case kCURegFieldTypePaymentTerms: res = CUr.PayDeal;
    case kCURegFieldTypeNewCreditCardNumber: if (nonblank(NCCr.CreditCardNr)) then begin res = ToolWebNGTranslateText(25209) & " " & Right(NCCr.CreditCardNr,4); end;
    case kCURegFieldTypeNewCreditCardExpiry: res = NCCr.ValidThru;
  end;
  
  GetCURegFieldComment = res;
  return;
end;

function Boolean HideFieldWhenUpdating(Integer FieldType)
begin
  Boolean res;
  
  res = false;
  switch (FieldType) begin
    case kCURegFieldTypePassword: res = true;
    case kCURegFieldTypePasswordConfirm: res = true;
  end;
  
  HideFieldWhenUpdating = res;
  return;
end;

function Boolean LoadCU(string CustCode,var record CUVc CUr)
begin
  Boolean res;
  record CURegFieldVc CURegFieldr;
  string 255 fieldname,tstr;
  Integer class_cnt;
  
  RecordClear(CUr);
  if (blank(GetSessionString("cureg_dontload"))) then begin
    CUr.Code = CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      while (LoopKey("Sorting",CURegFieldr,1,true)) begin
        fieldname = GetCURegFieldName(CURegFieldr.FieldType,class_cnt);
        tstr = GetCURegFieldValue(CUr,CURegFieldr);
        if (blank(GetSessionString("cureg_" & fieldname))) then begin
          PutSessionString("cureg_" & fieldname,tstr);
        end;
      end;
    end;
  end else begin
    PutSessionString("cureg_dontload","");
  end;
  
  LoadCU = res;
  return;
end;

procedure ShowClassification(string fieldname,record CURegFieldVc CURegFieldr,string value,Boolean enabled)
begin
  array string 255 texts,codes;
  integer arrlen;
  
  FillArrayWithCClass(CURegFieldr.Param,texts,codes,arrlen);
  
  switch (CURegFieldr.FieldType) begin
    case kCURegFieldTypeClassificationSelect:
      SimpleElementComboBox("","",fieldname,"",texts,codes,arrlen,value,true,enabled);
    case kCURegFieldTypeClassificationRadio:
      SimpleElementRadioGroup("","",fieldname,"",texts,codes,arrlen,value,true,enabled);
    case kCURegFieldTypeClassificationCheckbox:
      
  end;
  
  return;
end;

procedure ShowDropDownBillingType(Integer FieldType,string fieldname,string value,Boolean enabled)
begin
  array string 255 texts,codes;
  integer arrlen;
  integer tval;
  
  tval = stringtoint(value);
  if (tval>2 and tval<6) then begin
    FillArrayWithBillingType(texts,codes,arrlen,tval);
    SimpleElementComboBox("",""" onchange=""CheckBillingType(this,1,4)",fieldname,"",texts,codes,arrlen,value,false,enabled);

    WebOutStringFormatNL("<script type='text/javascript'>function CheckBillingType(el,def,def2)");
    WebOutStringFormatNL("{");
    WebOutStringFormatNL("var t = document.getElementById('payment_terms');");
    WebOutStringFormatNL("if (t){");
    WebOutStringFormatNL("if (el.value==def || el.value==def2){t.style.display='';} else ");
    WebOutStringFormatNL("{t.style.display='none';}");
    WebOutStringFormatNL("}}</script>");
  end else begin
    switch (tval) begin
      case kBillPaymentPrefNotDecided: WebOutString(TooLWebNGTranslateText(32402));
      case kBillPaymentPrefInvoice: WebOutString(TooLWebNGTranslateText(32401));
      case kBillPaymentPrefCC: WebOutString(TooLWebNGTranslateText(32400));
      case kBillPaymentPrefPaypal: WebOutString(TooLWebNGTranslateText(32406));
      case kBillPaymentPrefDotpay: WebOutString(TooLWebNGTranslateText(32407));
      case kBillPaymentPrefPaytrail: WebOutString(TooLWebNGTranslateText(32408));
    end;
    WebOutString("<input type='hidden' name='" & fieldname & "' value='" & value & "'>");
  end;
  return;
end;

procedure ShowDropDownPaymentTerm(Integer BillingTypePreference,Integer FieldType,string fieldname,string value,Boolean enabled)
begin
  array string 255 texts,codes;
  integer arrlen;

  if (BillingTypePreference>2 or BillingTypePreference==kBillPaymentInvoice) then begin
    FillArrayWithPaymentTerm(texts,codes,arrlen);
    SimpleElementComboBox("","",fieldname,"",texts,codes,arrlen,value,false,enabled);
  end;
  
  return;
end;

procedure ShowDropDown(Integer FieldType,string fieldname,string value,Boolean enabled)
begin
  array string 255 texts,codes;
  integer arrlen;

  switch (FieldType) begin
    case kCURegFieldTypeCustCat: FillArrayWithCustCat(texts,codes,arrlen);
    case kCURegFieldTypeCountryCode: FillArrayWithCountry(texts,codes,arrlen);
  end;
  SimpleElementComboBox("","",fieldname,"",texts,codes,arrlen,value,true,enabled);
  
  return;
end;

procedure ShowCheckbox(string fieldname,string value,Boolean enabled)
begin
  string 255 checked,disabled;
  
  if (nonblank(value)) then begin
    checked = " checked";
  end;
  if (!enabled) then begin
    disabled = " disabled";
  end;
  WebOutStringFormatNL("<input type=""checkbox"" name=""" & fieldname & """ value=""1""" & checked & disabled & ">");
  
  return;
end;

procedure GetCustomFieldStyle(record CURegFieldVc CURegFieldr,var string fstyle,string cucode)
begin
  record CUVc Cur;
  
  fstyle = "";
  if (CURegFieldr.FieldType==61) then begin
    fstyle = "' id='payment_terms";
    CUr.Code = cucode;
    ReadFirstMain(CUr,1,true);
    if (CUr.BillingTypePreference==0 or CUr.BillingTypePreference==2 or CUr.BillingTypePreference==3) then begin
      fstyle = "display:none' id='payment_terms";
    end;
  end;

  return;
end;

procedure ShowWebPaymentMethods(Integer BillingTypePreference,string cuclass)
begin
  record WebPayMethodVc WPMr;
  Boolean found,testf;
  string 255 fstyle,value,fieldname;
  array string 255 atext,acode;
  
  fieldname = "WebPaymentMethod";
  switch (BillingTypePreference) begin
    case kBillPaymentPrefInvoice:
      PutSessionString("cureg_" & fieldname,kWebPaymentMethodInvoice);
    case kBillPaymentPrefCC:
      PutSessionString("cureg_" & fieldname,kWebPaymentMethodCC);
    case kBillPaymentPrefCCorInvoice:
    case kBillPaymentPrefInvoiceorCC:
    case kBillPaymentPrefPaypalorCC:
    case kBillPaymentPrefPaypal:
      PutSessionString("cureg_" & fieldname,kWebPaymentMethodPaypal);
    case kBillPaymentPrefDotpay:
      PutSessionString("cureg_" & fieldname,kWebPaymentMethodDotpay);
    case kBillPaymentPrefPaytrail:
      PutSessionString("cureg_" & fieldname,kWebPaymentMethodPaytrail);
    case kBillPaymentPrefOrder:
      PutSessionString("cureg_" & fieldname,kWebPaymentMethodOrder);
  end;
  value = GetSessionString("cureg_" & fieldname);

  fstyle = "' id='webpaymentmethod";
/*  
  if (BillingTypePreference==0 or BillingTypePreference==2 or BillingTypePreference==3) then begin
    fstyle = "display:none' id='webpaymentmethod";
  end;
*/  

  found = true;
  while (LoopMain(WPMr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(WPMr.CUClassification)) then begin
        if (AnyClassInSet(WPMr.CUClassification,cuclass)==false) then begin testf = false; end;
      end;
      if (nonblank(WPMr.ExcludeCUClassification)) then begin
        if (AnyClassInSet(WPMr.ExcludeCUClassification,cuclass)) then begin testf = false; end;
      end;
      if (testf) then begin
        acode[acode.length] = WPMr.PayMethod;
        atext[atext.length] = WPMr.Comment;
      end;
    end;
  end;

  if (acode.length>0) then begin

    WebOutTagOpen("<tr style='" & fstyle & "'>");
    WebOutTagOpen("<td>");
    WebOutStringFormat("<label for=""" & fieldname & """>" & ToolWebNGTranslateText(32380));
    WebOutStringFormatNL("</label>");
    
    WebOutStringFormatNL("</td><td>");
    SimpleElementComboBox("",""" onchange=""CheckPaymentMethod(this,0,4)",fieldname,"",atext,acode,atext.length,value,false,true);
    
    WebOutStringFormatNL("<script type='text/javascript'>function CheckPaymentMethod(el,def,def2)");
    WebOutStringFormatNL("{");
    WebOutStringFormatNL("var t = document.getElementById('webpaymentmethod');");
    WebOutStringFormatNL("if (t){");
    WebOutStringFormatNL("if (el.value>=def && el.value<=def2){t.style.display='';} else ");
    WebOutStringFormatNL("{t.style.display='none';}");
    WebOutStringFormatNL("}}</script>");

    WebOutTagClose("</td>");
    WebOutTagClose("</tr>");
  end;
  return;
end;

function Boolean ShouldFillInPaypalField(record CURegFieldVc CURegFieldr,record CUVc CUr)
begin
  Boolean res;

  if (CUr.BillingTypePreference==kBillPaymentPrefPaypal or CUr.BillingTypePreference==kBillPaymentPrefDotpay or CUr.BillingTypePreference==kBillPaymentPrefPaytrail) then begin
    if (CURegFieldr.FieldType==kCURegFieldTypeInvAddr0 or
        CURegFieldr.FieldType==kCURegFieldTypeInvAddr1 or
        CURegFieldr.FieldType==kCURegFieldTypeInvAddr2 or
        CURegFieldr.FieldType==kCURegFieldTypeInvAddr3) then begin
      res = true;
    end;
  end;

  ShouldFillInPaypalField = res;
  return;
end;

global
procedure ShowCURegEdit(string LinkToSuccess)
begin
  record CURegFieldVc CURegFieldr;
  array integer numberlist;
  array string 244 namelist;
  Integer i,hmcompany,nr,class_cnt;
  Boolean firstline,enabled,testf,ismktplsrv;
  string 255 DelCode,CustCode,mParam,fieldname,value,tstr,enabledtext,fstyle;
  record CUVc CUr;
  record NewCreditCardVc NCCr;
  
  CustCode = CurrentCust;
  LoadCU(CustCode,CUr);
  WebOutTagOpen("<div id=""reg-forms"" class=""open"">");
    WebOutStringFormatNL("<h2>" & ToolWebNGTranslateText(31000) & "</h2>");
    
    WebOutTagOpen("<div id=""register-top"" class="""">");
      WebOutTagOpen("<div id=""type-select"" class="""">");
        WebOutStringFormatNL("<span id=""reg-ind-trig"" class=""active"">" & ToolWebNGTranslateText(31001) & "</span>&nbsp;|&nbsp;");
        WebOutStringFormatNL("<span id=""reg-comp-trig"" class="""">" & ToolWebNGTranslateText(31002) & "</span>");
      WebOutTagClose("</div>");
    WebOutTagClose("</div>");
    WebOutTagOpen("<ul class=""regerrors"">");
    WebOutTagClose("</ul>");
// Person registration form    
    WebOutTagOpen("<form id=""reg-ind-form"" class=""reg-top-form active"" method=""post"" action=""" & FormatLink("/WebUpdatingAction.hal","?action=cureg_save",true,true) & """>");
    WebOutTagOpen("<div class=""formflex"">");
    WebOutStringFormatNL("<input type=""hidden"" id=""action"" name=""action"" value=""cureg_save"">");
    WebOutStringFormatNL("<input type=""hidden"" id=""cutype"" name=""cutype"" value=""0"">");
    if (blank(CustCode)) then begin
      WebOutStringFormatNL("<input type=""hidden"" id=""new"" name=""new"" value=""new"">");
    end;
    ResetLoop(CURegFieldr);
    while (LoopKey("Sorting",CURegFieldr,1,true)) begin
      if(CURegFieldr.ForCompany == 0) then begin
        if (blank(CustCode) or !HideFieldWhenUpdating(CURegFieldr.FieldType)) then begin
          fieldname = GetCURegFieldName(CURegFieldr.FieldType,class_cnt);
          value = GetSessionString("cureg_" & fieldname);
          PutSessionString("cureg_" & fieldname,"");
          switch (CURegFieldr.FieldType) begin
            case kCURegFieldTypePassword:
              WebOutStringFormatNL("<input type=""password"" id=""" & fieldname & """ name=""" & fieldname & """ value=""" & value & """ placeholder= """ & GetTranslatedNameCURegField(CURegFieldr) & """/> ");
            case kCURegFieldTypePasswordConfirm:
              WebOutStringFormatNL("<input type=""password"" id=""" & fieldname & """ name=""" & fieldname & """ value=""" & value & """ placeholder= """ & GetTranslatedNameCURegField(CURegFieldr) & """/> ");
            otherwise
              WebOutStringFormatNL("<input type=""text"" class="""" id=""" & fieldname & """ name=""" & fieldname & """ value=""" & value & """ placeholder= """ & GetTranslatedNameCURegField(CURegFieldr) & """/> ");
          end;
        end;
      end;
    end;
    WebOutTagClose("</div>");
    WebOutTagOpen("<div class=""checkbox"">");
        WebOutStringFormatNL("<input type=""checkbox"" value=""newsletter"" id=""reg-ind-news"" name=""reg-ind-news"">");
        WebOutStringFormatNL("<label for=""reg-ind-news"" class=""styled-check""></label>");
        WebOutStringFormatNL("<label for=""reg-ind-news"">" & ToolWebNGTranslateText(31003) & "</label>");
      WebOutTagClose("</div>");
      WebOutStringFormatNL("<div id=""reg-ind-submit"" class=""btn submit"">" & ToolWebNGTranslateText(31000) & "</div>");
  WebOutTagClose("</form>");
//=====================================
//Company registration form
  WebOutTagOpen("<form id=""reg-comp-form"" class=""reg-top-form"" method=""post"" action=""" & FormatLink("/WebUpdatingAction.hal","?action=cureg_save",true,true) & """>");
    
    WebOutTagOpen("<div class=""formflex"">");
    WebOutStringFormatNL("<input type=""hidden"" id=""action"" name=""action"" value=""cureg_save"">");
    WebOutStringFormatNL("<input type=""hidden"" id=""cutype"" name=""cutype"" value=""1"">");
    if (blank(CustCode)) then begin
      WebOutStringFormatNL("<input type=""hidden"" id=""new"" name=""new"" value=""new"">");
    end;
    ResetLoop(CURegFieldr);
    while (LoopKey("Sorting",CURegFieldr,1,true)) begin
      if(CURegFieldr.ForCompany <> 0) then begin
        if (blank(CustCode) or !HideFieldWhenUpdating(CURegFieldr.FieldType)) then begin
          fieldname = GetCURegFieldName(CURegFieldr.FieldType,class_cnt);
          value = GetSessionString("cureg_" & fieldname);
          PutSessionString("cureg_" & fieldname,"");
          switch (CURegFieldr.FieldType) begin
            case kCURegFieldTypePassword:
              WebOutStringFormatNL("<input type=""password"" id=""" & fieldname & """ name=""" & fieldname & """ value=""" & value & """ placeholder= """ & GetTranslatedNameCURegField(CURegFieldr) & """/> ");
            case kCURegFieldTypePasswordConfirm:
              WebOutStringFormatNL("<input type=""password"" id=""" & fieldname & """ name=""" & fieldname & """ value=""" & value & """ placeholder= """ & GetTranslatedNameCURegField(CURegFieldr) & """/> ");
            otherwise
              WebOutStringFormatNL("<input type=""text"" class="""" id=""" & fieldname & """ name=""" & fieldname & """ value=""" & value & """ placeholder= """ & GetTranslatedNameCURegField(CURegFieldr) & """/> ");
          end;
        end;
      end;
    end;
    WebOutTagClose("</div>");
    WebOutTagOpen("<div class=""checkbox"">");
        WebOutStringFormatNL("<input type=""checkbox"" value=""newsletter"" id=""reg-comp-news"" name=""reg-comp-news"">");
        WebOutStringFormatNL("<label for=""reg-comp-news"" class=""styled-check""></label>");
        WebOutStringFormatNL("<label for=""reg-comp-news"">" & ToolWebNGTranslateText(31003) & "</label>");
      WebOutTagClose("</div>");
      WebOutStringFormatNL("<div id=""reg-comp-submit"" class=""btn submit"">" & ToolWebNGTranslateText(31000) & "</div>");
  WebOutTagClose("</form>");
//==============================================
  WebOutTagClose("</div>");

  
  WebOutTagOpen("<div id=""reg-success"">");
    WebOutTagOpen("<div id=""reg-succ-message"">");
      WebOutStringFormatNL("<div class=""checkmark""></div>");
      WebOutStringFormatNL(ToolWebNGTranslateText(31004));
    WebOutTagClose("</div>");
    WebOutTagOpen("<div id=""reg-code-message"">");
      WebOutStringFormatNL(ToolWebNGTranslateText(31005));
    WebOutTagClose("</div>");
    WebOutTagOpen("<form id=""reg-confirm-form"" method=""post"" class=""active"" action=""submit.php"">");
      WebOutStringFormatNL("<input type=""text"" id=""confirm-code"" name=""confirm-code"" placeholder=""" & ToolWebNGTranslateText(31006) & """>");
      WebOutStringFormatNL("<div class=""btn submit"" id=""reg-confirm-submit"" style=""padding: 0px; width: 156px;"">" & ToolWebNGTranslateText(31006) & "</div>");
    WebOutTagClose("</form>");
  WebOutTagClose("</div>");

  return;
end;

global
updating procedure SendEmailConfirmationMail(record CUVc CUr)
begin
  record MyAccountBlock MyAccountRec;
  record MailVc Mailr,oldMailr;
  row MailVc Mailrw;
  record LtxtVc Ltxtr;
  Integer cnt,i;
  string 255 tstr,link;
  record MailConfirmVc MCr;
  record MailSettingsBlock MSb;

  BlockLoad(MyAccountRec);
  if (MyAccountRec.ConfirmEmailFlag==1 and nonblank(CUr.eMail)) then begin
    RecordNew(MCr);
    MCr.SerNr = NextSerNr("MailConfirmVc",CurrentDate,-1,false,"");
    MCr.CustCode = CUr.Code;
    MCr.TransDate = CurrentDate;
    MCr.ValidUntil = AddDay(CurrentDate,MyAccountRec.ConfirmDays);
    MCr.UUIDStr = Right(LowerCase(MD5String(MCr.SerNr & MCr.CustCode & CurrentDate & CurrentTime)),7);
    if (RecordStore(MCr,true)) then begin
      BlockLoad(MSb);
      RecordNew(Mailr);
      ClearRow(Mailr,Mailrw,1);
      Mailrw.RowTyp = kMailRowTypeFrom;
      Mailrw.AddrCode = MSb.FromSystem;
      MatRowPut(Mailr,0,Mailrw);
      ClearRow(Mailr,Mailrw,1);
      Mailrw.RowTyp = kMailRowTypeTo;
      Mailrw.AddrCode = CUr.eMail;
      MatRowPut(Mailr,1,Mailrw);
    
      link = MCr.UUIDStr;//"http://" & WebHost & "/WebUpdatingAction.hal?action=confirmmail&uuid=" & MCr.UUIDStr;
      Ltxtr.Code = MyAccountRec.ConfirmText;
      if (ReadFirstMain(Ltxtr,1,true)) then begin
        cnt = LineTextCnt(Ltxtr);
        for (i=0;i<cnt;i=i+1) begin
          tstr = LineTextGet(Ltxtr,i);
          tstr = StrReplace(tstr,"[code]",link);
          LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
        end;
      end;
      if (RecordStore(Mailr,true)) then begin
        RecordCopy(oldMailr,Mailr);
        Mailr.SendFlag = 1;
        RecordUpdate(oldMailr,Mailr,true);
      end;
    end;
  end;

  return;
end;

function string 255 RemoveClassification(string Classifications,string cls)
begin
  string 10 res;
  string 255 Code,RemClass;
  record CClassVc CClassr;
  
  RemClass = Classifications;
  Code = GetNextValue(RemClass);
  while (nonblank(Code)) begin
    if (code!=cls) then begin
      res = AddStr(res,Code,",");
    end;
    Code = GetNextValue(RemClass);
  end;
  
  RemoveClassification = res;
  return;
end;

global
updating procedure DoConfirmEmailAddress()
begin
  record MailConfirmVc MCr,oldMCr;
  record CUVc CUr,oldCUr;
  record MyAccountBlock MyAccountRec;
  boolean res;
  string 255 tstr,link;
  
  res = false;
  BlockLoad(MyAccountRec);
  MCr.UUIDStr = WebGetArg("uuid");
  if (ReadFirstKey("UUIDStr",MCr,1,true)) then begin
    if (MCr.ConfirmedFlag==0) then begin
      RecordCopy(oldMCr,MCr);
      MCr.ConfirmedFlag = 1;
      if (RecordUpdate(oldMCr,MCr,true)==0) then begin
        CUr.Code = MCr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin
          RecordCopy(oldCUr,CUr);
          tstr = RemoveClassification(CUr.Classification,MyAccountRec.ConfirmStartClass);
          if (nonblank(tstr) and nonblank(MyAccountRec.ConfirmStartClass)) then begin
            tstr = tstr & ",";
          end;
          tstr = tstr & MyAccountRec.ConfirmClass;
          CUr.Classification = tstr;
          if (RecordUpdate(oldCUr,CUr,true)==0) then begin
            res = true;
          end;
        end;
      end;
    end;
  end;

  if (res) then begin
    link = FormatSimpleLink(GetLinkToStruct(MyAccountRec.ConfirmSuccess,true),true);
  end else begin
    link = FormatSimpleLink(GetLinkToStruct(MyAccountRec.ConfirmFail,true),true);
  end;
  ShowRedirectHTML(link,WebSecureMode);

  return;
end;

global
function boolean CustomerEmailConfirmed()
begin
  record CUVc CUr;
  record MyAccountBlock MyAccountRec;
  boolean res;
  
  BlockLoad(MyAccountRec);
  res = false;

  if (MyAccountRec.ConfirmEmailFlag==1) then begin
    CUr.Code = CurrentCust;
    if (ReadFirstMain(CUr,1,true)) then begin
      if (SetInSet(MyAccountRec.ConfirmClass,CUr.Classification)) then begin
        res = true;
      end;
    end;
  end else begin
    res = true;
  end;
  CustomerEmailConfirmed = res;
  return;
end;

function Boolean ValidateCURegForm(var array string fields,var array string err)
begin
  Boolean res;
  record MyAccountBlock MyAccountRec;
  record CUVc CUr;
  record CURegFieldVc CURegFieldr;
  string 255 fieldname,value,tstr;
  Integer class_cnt,cnt;
  Boolean eMailExists,eMailConfirmExists,PasswordExists,PasswordConfirmExists;
  string 255 CustCode,Name,RegNr1,VATNr,eMail,eMailConfirm,Password,PasswordConfirm,
             Phone,Mobile,Address,DelAddress;
  integer vaterr,cutype;
  boolean testf;
  area WebPostArea;
  
  cutype = StringToInt("cutype");
  res = true;
  BlockLoad(MyAccountRec);
  CustCode = CurrentCust;
  CUr.Code = CustCode;
  ReadFirstMain(Cur,1,true);
  while (LoopKey("Sorting",CURegFieldr,1,true)) begin
    testf = true;
    if(cutype == 1 and CURegFieldr.ForCompany == 0) then begin
      testf = false;
    end;
    if(cutype == 0 and CURegFieldr.ForCompany <> 0) then begin
      testf = false;
    end;
    if(testf) then begin
      if (blank(CustCode) or CURegFieldr.AllowUpdate!=0) then begin
        fieldname = GetCURegFieldName(CURegFieldr.FieldType,class_cnt);
        value = WebGetArg(fieldname);
        PutSessionString("cureg_" & fieldname,value);
        switch (CURegFieldr.FieldType) begin
          case kCURegFieldTypeName:
            Name = value;
          case kCURegFieldTypeeMail:
            eMailExists = true;
            eMail = value;
          case kCURegFieldTypeeMailConfirm:
            eMailConfirmExists = true;
            eMailConfirm = value;
          case kCURegFieldTypePassword:
            PasswordExists = true;
            Password = value;
          case kCURegFieldTypePasswordConfirm:
            PasswordConfirmExists = true;
            PasswordConfirm = value;
          case kCURegFieldTypeRegNr1:
            RegNr1 = value;
          case kCURegFieldTypeVATNr:
            VATNr = value;
          case kCURegFieldTypePhone:
            Phone = value;
          case kCURegFieldTypeMobile:
            Mobile = value;
          case kCURegFieldTypeInvAddr2:
            Address = value;
          case kCURegFieldTypeDelAddr2:
            DelAddress = value;
        end;
        if (blank(CustCode) or !HideFieldWhenUpdating(CURegFieldr.FieldType)) then begin
          if ((CURegFieldr.Required!=0 or ShouldFillInPaypalField(CURegFieldr,CUr)) and blank(value)) then begin
            SessionAddToArray("cureg_error",GetTranslatedNameCURegField(CURegFieldr) & " " & ToolWebNGTranslateText(25044));
            res = false;
            fields[cnt] = fieldname;
            err[cnt] = GetTranslatedNameCURegField(CURegFieldr) & " " & ToolWebNGTranslateText(25044);
            cnt = cnt + 1;
          end;
        end;
      end;
    end; //testf
  end;
  if (eMailExists and eMailConfirmExists) then begin
    if (eMail!=eMailConfirm) then begin
      SessionAddToArray("cureg_error",ToolWebNGTranslateText(25045));
      res = false;
      fields[cnt] = "emailconfirm";
      err[cnt] = ToolWebNGTranslateText(25045);
      cnt = cnt + 1;
    end;
  end;
  if (eMailExists and (CheckEmailStr(eMail)==false)) then begin
    SessionAddToArray("cureg_error",ToolWebNGTranslateText(25057));
    res = false;
  end;
  if (blank(CustCode)) then begin
    if (PasswordExists and PasswordConfirmExists) then begin
      if (Password!=PasswordConfirm) then begin
        SessionAddToArray("cureg_error",ToolWebNGTranslateText(25046));
        fields[cnt] = "passwordconfirm";
        err[cnt] = ToolWebNGTranslateText(25046);
        cnt = cnt + 1;
      end;
    end;
  end;
  if (MyAccountRec.RegUniqueName!=0 and nonblank(Name)) then begin
    if (CustomerWithNameExists(CustCode,Name)) then begin
      SessionAddToArray("cureg_error",ToolWebNGTranslateText(25049));
      fields[cnt] = "name";
      err[cnt] = ToolWebNGTranslateText(25049);
      cnt = cnt + 1;
    end;
  end;
  if (MyAccountRec.RegUniqueeMail!=0 and nonblank(eMail)) then begin
    if (CustomerWithEMailExists(CustCode,eMail)) then begin
      SessionAddToArray("cureg_error",ToolWebNGTranslateText(25050));
      res = false;
      fields[cnt] = "email";
      err[cnt] = ToolWebNGTranslateText(25050);
      cnt = cnt + 1;
    end;
  end;
  if (MyAccountRec.RegUniqueRegNr1!=0 and nonblank(RegNr1)) then begin
    if (CustomerWithRegNr1Exists(CustCode,RegNr1)) then begin
      SessionAddToArray("cureg_error",ToolWebNGTranslateText(25051));
      fields[cnt] = "regnr1";
      err[cnt] = ToolWebNGTranslateText(25051);
      cnt = cnt + 1;
    end;
  end;
  if (MyAccountRec.RegUniqueVATNr!=0 and nonblank(VATNr)) then begin
    if (CustomerWithVATNrExists(CustCode,VATNr)) then begin
      SessionAddToArray("cureg_error",ToolWebNGTranslateText(25052));
      res = false;
      fields[cnt] = "vatnr";
      err[cnt] = ToolWebNGTranslateText(25052);
      cnt = cnt + 1;
    end;
  end;
  if (IsMarketplaceServer) then begin
    if (nonblank(Phone)) then begin
      if (IsInvalidPhoneNumber(Phone)==false) then begin
        SessionAddToArray("cureg_error",ToolWebNGTranslateText(25100));
        res = false;
        fields[cnt] = fieldname;
        err[cnt] = ToolWebNGTranslateText(25100);
        cnt = cnt + 1;
      end;
    end;
    if (nonblank(Mobile)) then begin
      if (IsInvalidPhoneNumber(Mobile)==false) then begin
        SessionAddToArray("cureg_error",ToolWebNGTranslateText(25101));
        res = false;
        fields[cnt] = "mobile";
        err[cnt] = ToolWebNGTranslateText(25101);
        cnt = cnt + 1;
      end;
    end;
  end;
  if (IsMarketplaceServer==false) then begin
    if (nonblank(VATNr)) then begin
      vaterr = CheckVATNrMask(VATNr,CUr.CountryCode,CUr.CustType,tstr);
      if (vaterr!=0) then begin
        SessionAddToArray("cureg_error",ToolWebNGTranslateText(25102));
        res = false;
        fields[cnt] = fieldname;
        err[cnt] = ToolWebNGTranslateText(25102);
        cnt = cnt + 1;
      end;
    end;
    if (nonblank(Address)) then begin
      if (IsPostcodeFormatCorrect(Address)==false) then begin
        SessionAddToArray("cureg_error",ToolWebNGTranslateText(25103));
        res = false;
        fields[cnt] = fieldname;
        err[cnt] = ToolWebNGTranslateText(25103);
        cnt = cnt + 1;
      end;
    end;
    if (nonblank(DelAddress)) then begin
      if (IsPostcodeFormatCorrect(DelAddress)==false) then begin
        SessionAddToArray("cureg_error",ToolWebNGTranslateText(25104));
        err[cnt] = ToolWebNGTranslateText(25104);
        res = false;
        fields[cnt] = fieldname;
        cnt = cnt + 1;
      end;
    end;
  end;
  if (res and IsRecaptchaEnabled(kElementTypeRegisterNewCustomerForm)) then begin
    WebGetPostData(WebPostArea);
    if (CheckRecaptcha(WebPostArea)==false) then begin 
      SessionAddToArray("cureg_error",ToolWebNGTranslateText(30081));
      res = false;
    end;      
  end;
  if (!res) then begin
    ResetLoop(CURegFieldr);
    RecordNew(CURegFieldr);
    class_cnt = 0;
    while (LoopKey("Sorting",CURegFieldr,1,true)) begin
      fieldname = GetCURegFieldName(CURegFieldr.FieldType,class_cnt);
      value = WebGetArg(fieldname);
      PutSessionString("cureg_" & fieldname,value);
    end;
    //PutSessionString("cureg_dontload","true");
  end;
  
  ValidateCURegForm = res;
  return;
end;

global
function string 255 SetCustomerWebPaymentMethod(record CUVc CUr)
begin
  string 255 res;
  record WebPayMethodVc WPMr;
  Boolean found,testf;
  Integer wpm;
  
  res = CUr.PayDeal;
  switch (CUr.BillingTypePreference) begin
    case kBillPaymentPrefInvoice: wpm = kWebPaymentMethodInvoice;
    case kBillPaymentPrefCC: wpm = kWebPaymentMethodCC;
    case kBillPaymentPrefPaypal: wpm = kWebPaymentMethodPaypal;
    case kBillPaymentPrefDotpay: wpm = kWebPaymentMethodDotpay;
    case kBillPaymentPrefPaytrail: wpm = kWebPaymentMethodPaytrail;
    case kBillPaymentPrefOrder: wpm = kWebPaymentMethodOrder;
  end;
  
  found = true;
  WPMr.PayMethod = wpm;
  while (LoopKey("PayMethod",WPMr,1,found)) begin
    if (WPMr.PayMethod!=wpm) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (nonblank(WPMr.CUClassification)) then begin
        if (AnyClassInSet(WPMr.CUClassification,CUr.Classification)==false) then begin testf = false; end;
      end;
      if (nonblank(WPMr.ExcludeCUClassification)) then begin
        if (AnyClassInSet(WPMr.ExcludeCUClassification,CUr.Classification)) then begin testf = false; end;
      end;
      if (testf) then begin
        res = WPMr.PayDeal;
        found = false;
      end;
    end;
  end;
  SetCustomerWebPaymentMethod = res;
  return;
end;

global
updating function StoreCURegForm()
begin
  record MyAccountBlock MyAccountRec;
  record CUVc CUr,OldCUr;
  Boolean RecordExists,new;
  record CURegFieldVc CURegFieldr;
  string 255 DelCode,CustCode,fieldname,value,link,passwd,tstr;
  LongInt err;
  Integer class_cnt,i;
  array string 30 fields;
  array string 100 errors;
 
  BlockLoad(MyAccountRec);
  CustCode = CurrentCust;
  if (ValidateCURegForm(fields,errors)) then begin
    CUr.Code = CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      RecordExists = true;
      RecordCopy(OldCUr,CUr);
    end else begin
      RecordNew(CUr);
      GetNextCustNr(CustCode);
      CUr.Code = CustCode;
      CUr.CustCat = MyAccountRec.RegDefCustCat;
      CUr.AllowLogin = MyAccountRec.RegDefAllowLogin;
      CUr.CustType = MyAccountRec.RegDefCustType;
    end;
    while (LoopKey("Sorting",CURegFieldr,1,true)) begin
      fieldname = GetCURegFieldName(CURegFieldr.FieldType,class_cnt);
      if (!RecordExists or CURegFieldr.AllowUpdate!=0) then begin
        value = WebGetArg(fieldname);
        switch (CURegFieldr.FieldType) begin
          case kCURegFieldTypeName: CUr.Name = value;
          case kCURegFieldTypeInvAddr0: CUr.InvAddr0 = value;
          case kCURegFieldTypeInvAddr1: CUr.InvAddr1 = value;
          case kCURegFieldTypeInvAddr2: CUr.InvAddr2 = value;
          case kCURegFieldTypeInvAddr3: CUr.InvAddr3 = value;
          case kCURegFieldTypeInvAddr4: CUr.InvAddr4 = value;
          case kCURegFieldTypeSorting: CUr.Sorting = value;
          case kCURegFieldTypeDepartment: CUr.Department = value;
          case kCURegFieldTypePhone: CUr.Phone = value;
          case kCURegFieldTypeFax: CUr.Fax = value;
          case kCURegFieldTypeAltPhone: CUr.AltPhone = value;
          case kCURegFieldTypeMobile: CUr.Mobile = value;
          case kCURegFieldTypeSkypeName: CUr.SkypeName = value;
          case kCURegFieldTypeSIPCode: CUr.SIPCode = value;
          case kCURegFieldTypeeMail: CUr.eMail = value;
          case kCURegFieldTypeeMailConfirm:;
          case kCURegFieldTypeExtension: CUr.Extension = value;
          case kCURegFieldTypePerson: CUr.Person = value;
          case kCURegFieldTypewwwAddr: CUr.wwwAddr = value;
          case kCURegFieldTypeClassificationSelect: 
            CUr.Classification = RemoveClassificationsOfType(CUr.Classification,CURegFieldr.Param);
            CUr.Classification = AddStr(CUr.Classification,value,",");
          case kCURegFieldTypeClassificationRadio:
            CUr.Classification = RemoveClassificationsOfType(CUr.Classification,CURegFieldr.Param);
            CUr.Classification = AddStr(CUr.Classification,value,",");
          case kCURegFieldTypeClassificationCheckbox:; // TODO
          case kCURegFieldTypePassword: passwd = value;
          case kCURegFieldTypePasswordConfirm:;
          case kCURegFieldTypeDelAddr0: CUr.DelAddr0 = value;
          case kCURegFieldTypeDelAddr1: CUr.DelAddr1 = value;
          case kCURegFieldTypeDelAddr2: CUr.DelAddr2 = value;
          case kCURegFieldTypeDelAddr3: CUr.DelAddr3 = value;
          case kCURegFieldTypeDelAddr4: CUr.DelAddr4 = value;
          case kCURegFieldTypeRegNr1: CUr.RegNr1 = value;
          case kCURegFieldTypeRegNr2: CUr.RegNr2 = value;
          case kCURegFieldTypeVATNr: CUr.VATNr = value;
          case kCURegFieldTypeCountryCode: 
            tstr = CUr.CountryCode;
            CUr.CountryCode = value;
            CUVc_PasteCountryCode(CUr,tstr);
          case kCURegFieldTypeRegion: CUr.Region = value;
          case kCURegFieldTypeCustCat: CUr.CustCat = value;
          case kCURegFieldTypeUserStr1: CUr.UserStr1 = value;
          case kCURegFieldTypeUserStr2: CUr.UserStr2 = value;
          case kCURegFieldTypeUserStr3: CUr.UserStr3 = value;
          case kCURegFieldTypeUserStr4: CUr.UserStr4 = value;
          case kCURegFieldTypeUserStr5: CUr.UserStr5 = value;
          case kCURegFieldTypeUserVal1: CUr.UserVal1 = StringToVal(value,M4UVal);
          case kCURegFieldTypeUserVal2: CUr.UserVal2 = StringToVal(value,M4UVal);
          case kCURegFieldTypeUserVal3: CUr.UserVal3 = StringToVal(value,M4UVal);
          case kCURegFieldTypeUserDate1: CUr.UserDate1 = StringToDate(value);
          case kCURegFieldTypeUserDate2: CUr.UserDate2 = StringToDate(value);
          case kCURegFieldTypeUserDate3: CUr.UserDate3 = StringToDate(value);
          case kCURegFieldTypeNoLetterPosting: CUr.NoLetterPosting = StringToInt(value);
          case kCURegFieldTypeNoMailPosting: CUr.NoMailPosting = StringToInt(value);
          case 60: CUr.BillingTypePreference = StringToInt(value);//ksz Billing type field
          case 61: CUr.PayDeal = value;//ksz Payment terms
        end;
      end;
    end;
    if (RecordExists) then begin
      err = RecordUpdate(OldCUr,CUr,true);
    end else begin
      WebStoreCust(CUr,passwd);
      SendEmailConfirmationMail(CUr);
    end;

    WebOutString("{");
    WebOutString("""stored"": ""1""");
    WebOutString("}");
  end else begin
   /* link = FormatSimpleLink(WebGetArg("path"),true);
    RedirectToURL(link);*/
    
    WebOutString("{");
    WebOutString("""stored"": ""0"",");
    WebOutString("""fields"": [");
      for(i=0;i<fields.length;i=i+1) begin
        if(i < fields.length-1) then begin
          WebOutString("{""name"": """ & fields[i] & """,");
          WebOutString("""err"": """ & errors[i] & """},");
        end else begin
           WebOutString("{""name"": """ & fields[i] & """,");
          WebOutString("""err"": """ & errors[i] & """}");
          
        end;
      end;
    WebOutString("]");
    WebOutString("}");
  end;
  
  return;
end;

procedure ShowCURegComplete()
begin
  record MyAccountBlock MyAccountRec;
  
  BlockLoad(MyAccountRec);
  WebOutTagOpen("<p class=""heading3"">");
  WebOutStringFormat(ToolWebNGTranslateText(25407)); //Thank you!
  WebOutTagClose("</p>");
  WebOutTagOpen("<p>");
  WebOutStringFormat(ToolWebNGTranslateText(20088) & " " & GetSessionString("cureg_custcode"));
  WebOutTagClose("</p>");
  WebOutTagOpen("<p>");
  WebOutStringFormat(ToolWebNGTranslateText(25900)); //You can use this Customer Code to login to the shop in the future. Please use the VAT Registration Number you supplied (listed below) when registering any product you buy on this shop
  WebOutTagClose("</p>");
  WebOutTagOpen("<p class=""bluefont"">");
  WebOutStringFormat(GetSessionString("cureg_orgnr"));
  WebOutTagClose("</p>");

  if (MyAccountRec.RegShowLogin!=0) then begin
    WebOutTagOpen("<form method=""POST"" action=""" & FormatLink("/dologin","",true,true) & """>");
    if (nonblank(GetCookie("HSESSION")) or nonblank(GetCookie("langcode")) or nonblank(GetCookie("country"))) then begin
      WebOutStringFormatNL("<input type=""hidden"" id=""cooksess"" name=""cooksess"" value=""true"">");
    end;
    WebOutStringFormatNL("<input type=""hidden"" id=""failed"" name=""failed"" value=""" & FormatLink("WebAction.hal","action=afterlogin&failed=1",true,true) & """>");
    WebOutStringFormatNL("<input type=""hidden"" id=""custpage"" name=""custpage"" value=""" & FormatLink("WebAction.hal","action=afterlogin&cust=1",true,true) & """>");
    WebOutStringFormatNL("<input type=""hidden"" id=""userpage"" name=""userpage"" value=""" & FormatLink("WebAction.hal","action=afterlogin&user=1",true,true) & """>");
    WebOutStringFormatNL("<input type=""hidden"" id=""company"" name=""company"" value=""" & GetSessionString("cureg_hmcompany") & """>");
    WebOutStringFormatNL("<input type=""hidden"" id=""login"" name=""login"" value=""" & GetSessionString("cureg_custcode") & """>");
    WebOutStringFormatNL("<input type=""hidden"" id=""passwd"" name=""passwd"" value=""" & GetSessionString("cureg_passwd") & """>");
    WebOutSubmit("s1","button","s1",ToolWebNGTranslateText(25518));
    WebOutTagClose("</form>");
  end;
  
  return;
end;

global
procedure ShowCURegElement(record WebNGElementVc WEr)
begin
  string 255 linktosuccess;
  
  RollbackOneRequestURL;
  if (blank(GetSessionString("cureg_complete"))) then begin
    if (WEr.LinkToStruct!=-1) then begin
      linktosuccess = FormatSimpleLink(GetLinkToStruct(WEr.LinkToStruct,true),true);
    end else begin
      linktosuccess = WebGetArg("path");
    end;
    ShowCURegEdit(linktosuccess);
  end else begin
    PutSessionString("cureg_complete","");
    ShowCURegComplete;
  end;
  
  return;
end;
