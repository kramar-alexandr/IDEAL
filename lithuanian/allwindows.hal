external inner procedure SetupColumWithKeypadWindow(var real,var real,var real,var real,var real,var real,var real);
external inner procedure POSKeyPad(LongInt,LongInt,LongInt,LongInt,LongInt,string,LongInt);
external inner procedure SplitButton(LongInt,LongInt,LongInt,LongInt,LongInt,string,string,string,string,LongInt);
external inner function string 255 F_Label(string);


remote inner function UUID GetServerUUIDRemote();
external inner function string 255 RemainingEinvoicesQuantity;
external inner function Boolean DisplayAdditionalFields();
remote inner function Integer MailAcceptanceStatus(LongInt);
external inner function Boolean IsMoveToCloud(record SetupStatusBlock);
external inner function Boolean IsMoveToCloudB();
external inner function Boolean IsCloudControllerClient();
external inner function string 255 GetCurrentStoreName();
external inner function Boolean CompaniesInClientMode();
external inner function Boolean ProductInDemoMode();
remote inner function string 255 GetCompanyShortCode(string);
external inner function Boolean AnyModuleAvailable(); 
external inner function Boolean AcceptanceStatusColumnTest(string);
external inner function Integer FlipCharCode(Integer,Integer);
external inner procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external inner function boolean AddBicToMasterWindow(integer,var real,var real,real,real,real,real);
external inner function Boolean IsIntEnabActive(var string,var string,var Boolean,var string);
external inner function Boolean TouchScreenLookVertical();
external inner procedure SysEClass_Tool(Integer,var real,var real);
external inner procedure GTransEClass_Tool(Integer,var real,var real);
external inner procedure GTrans2EClass_Tool(Integer,var real,var real,var real);
external inner procedure GBaseEClass_Tool(Integer,var real,var real);
external inner procedure TransGenVClass_Tool(Integer,var real,var real);
external inner procedure GetCurUser(var record UserVc);
external inner procedure JobRClass_LIT();
external inner function string 60 UserDefined(string,string);
external inner function string 255 MasterBannerURL();
external inner procedure ItemStatusUserSettings(string,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean);
external inner function Boolean AllowedInCountry(integer);
external inner function Integer ResourceWindowResourceType();
external inner function Boolean ResPlan_Rental();
external inner function Boolean ResPlan_ProdOperations();
//remote inner function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc,var Integer);
external inner function Boolean TouchScreenLook();
external inner procedure ExtractObj(string,var Integer,var string);
external inner function Boolean IsSessionOpen(string,string,Date,Time);
external inner procedure CntNPTSPaymentCurrencies(var Array string,var Array string,var Array Integer,var Array string,var Integer);
remote inner procedure CntPOSCurrencies(var Array string,var Array Boolean,var Integer);
external inner function Boolean CheckOffLineRecords(Boolean);
external inner function string 60 TileUserDefined(string,Integer,var Integer);
external inner function Boolean CUVATNrColumn;
external inner function Integer GetInternetEnablerCountry();
external inner function Integer CntVarietyCode(Integer,var Array string);
external inner function Integer VarietyMatMax(Integer);
external inner function Boolean UseTaxTemplatesforTaxCalc();
remote inner procedure TablesViewWClassDo(record LocalMachineBlock,string,Array string,Array string,Array string,Array string,Array Integer,var Integer,var LongInt);
external inner function string 20 GetMenuCode(string);
external inner procedure DrawModifierButtons(var Integer);
remote inner procedure ForkLiftQueueArray(string,string,var Array string,var Array string,var Array string,var Array string,var Array val,var Array Integer,var Array string,var Integer,Boolean,LongInt,LongInt,string);

external inner function Boolean DisplayLoginButtons();
external inner function Integer LoginShortcutsLines(Integer);
external inner function Integer LoginShortcutsPos(Real,Integer);

external inner procedure DefineTTRRowTypes(Integer);
external inner function real ItemButtons(string,Integer);
external inner procedure HWStoreWClassAddProducts(Integer);
external inner function Boolean HasCharts();
external inner function Boolean HasDetailedCharts();
external inner function Boolean HasNewRegistration();
external inner function Boolean ActivityIsForAcceptanceOrFYI(record ActVc,Boolean,Boolean);
// TravelLog
external inner function Integer LoginShortcuts();
external inner function Boolean TestConfigurationEnabler(string);
remote inner function Integer CustomerSalesPaymentTermType(string);
// POS Standalone
external inner function Boolean DefCustCodeSetup();

external inner function Boolean HasInAppsAvailable();
external inner function Integer CountCountries();

// Language functions ENG
external inner function Boolean DisplayLoginKeyPad_ENG();
external inner function real VATZoneButtonsLabelsENG(real,real,real,real);
external inner procedure LoginButtons2_ENG(Real,Real);
external inner procedure FORMDEF_ENG();
external inner function string 255 DemoMsgWClassTitle_ENG(Boolean,Boolean);
external inner procedure TBEClassDef_LIT();
external inner function string 255 VATZoneNameENG();
external inner procedure TSERW_ENG();
external inner procedure TSERWNT_ENG();
external inner procedure TSERWTouch_ENG();
external inner procedure TSERWTEST_ENG();
external inner procedure INVFORM_ENG(Boolean);
external inner procedure DisplayRecordDetails_lit(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
//external inner procedure DrawPOSInterface_ENG(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_ENG();
external inner function string 255 ResMonWClassWindowTitle_ENG();
external inner function string 255 RTMonWClassWindowTitle_ENG();
external inner procedure SetupNightAuditWindowControls_ENG(Boolean);
external inner procedure CURClassDefinitionENG();
external inner function real DrawPaymentModesButtons_IV_ENG(real);
external inner function real FunctionButtons_ENG(string);
external inner procedure CreditCardWindowHeader_ENG(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_ENG(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_ENG(Real);
external inner procedure CreditCardWindowDeliveryDetail_ENG(Real);
external inner function real DrawPaymentModesButtons_ENG();
external inner procedure DrawBarMenuTiles_ENG(string);
external inner procedure DrawRestPMOtherPay_ENG();
external inner procedure DisplayRecordDetailsRA_lit(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_ENG(var integer,var integer);
external inner procedure OKCancel_ENG();
external inner procedure DefineElearningURLCacheLClass_ENG();
external inner procedure DefineElearningURLCacheDClass_ENG();
external inner function real TravelLogDeductions_ENG(real,real);
external inner procedure LoginButtons_ENG(Real);
external inner procedure FORMDEF2_ENG();
external inner procedure FORMDEF3_ENG();
external inner procedure ARS2RClass_ENG();
external inner procedure ALLVATRClass_ENG();

// Language functions LIT
external inner function Boolean DisplayLoginKeyPad_LIT();
external inner function string 255 VATZoneEditFieldLabel_LIT(Integer);
external inner function string 255 VATZoneEditFieldLabelLIT(Integer);
external inner function real VATZoneButtonsLabelsLIT(real,real,real,real);
external inner procedure LoginButtons2_LIT(Real,Real);
external inner procedure FORMDEF_LIT();
external inner function string 255 DemoMsgWClassTitle_LIT(Boolean,Boolean);
external inner procedure TBEClassDef_LIT();
external inner function string 255 VATZoneNameLIT();
external inner procedure TSERW_LIT();
external inner procedure TSERWNT_LIT();
external inner procedure TSERWTouch_LIT();
external inner procedure TSERWTEST_LIT();
external inner procedure INVFORM_LIT(Boolean);
external inner procedure DisplayRecordDetails_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
//external inner procedure DrawPOSInterface_LIT(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_LIT();
external inner function string 255 ResMonWClassWindowTitle_LIT();
external inner function string 255 RTMonWClassWindowTitle_LIT();
external inner procedure SetupNightAuditWindowControls_LIT(Boolean);
external inner procedure CURClassDefinitionLIT();
external inner function real DrawPaymentModesButtons_IV_LIT(real);
external inner function real FunctionButtons_LIT(string);
external inner procedure CreditCardWindowHeader_LIT(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_LIT(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_LIT(Real);
external inner procedure CreditCardWindowDeliveryDetail_LIT(Real);
external inner function real DrawPaymentModesButtons_LIT();
external inner procedure DrawBarMenuTiles_LIT(string);
external inner procedure DrawRestPMOtherPay_LIT();
external inner procedure DisplayRecordDetailsRA_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_LIT(var integer,var integer);
external inner procedure OKCancel_LIT();
external inner procedure DefineElearningURLCacheLClass_LIT();
external inner procedure DefineElearningURLCacheDClass_LIT();
external inner function real TravelLogDeductions_LIT(real,real);
external inner procedure LoginButtons_LIT(Real);
external inner procedure FORMDEF2_LIT();
external inner procedure FORMDEF3_LIT();
external inner procedure ARS2RClass_LIT();
external inner procedure ALLVATRClass_LIT();

external inner function Boolean IsStandardUnused();
external inner function Boolean IsEnterprise();
external inner function Boolean StandardHansa();
external inner function Boolean HasATOL();

external inner function Boolean HasAccPeriods();
external inner function Boolean HasAccessGroups();
external inner function Boolean HasAddFee();
external inner function Boolean HasApprovals();
external inner function Boolean HasCCPayments();
external inner function Boolean HasAdvancedAccounting();
external inner function Boolean HasAdvancedCRM();
external inner function Boolean HasAdvancedPricing();
external inner function Boolean HasAdvancedProduction();
external inner function Boolean HasAdvancedStock();
external inner function Boolean HasAged();
external inner function Boolean HasBar();
external inner function Boolean HasBase2();
external inner function Boolean HasBranch();
external inner function Boolean HasBuyBack();
external inner function Boolean HasCategories();
//external inner function Boolean HasConsigmentStock();
external inner function Boolean HasCommunicator();
external inner function Boolean HasConsignmentStock();
external inner function Boolean HasContactClassification();
external inner function Boolean HasContactRelations();
external inner function Boolean HasConsolidation();
external inner function Boolean HasCountryPerCustomer();
external inner function Boolean HasCreditLimit();
external inner function Boolean HasCustItem();
external inner function Boolean HasCustomerSearchKey();
external inner function Boolean HasCustomerStatusReport();
external inner function Boolean HasDownpayments();
external inner function Boolean HasDefineColumns();
external inner function Boolean HasDeliveryAddress();
external inner function Boolean HasDepartments();
external inner function Boolean HasETaxDocuments();
external inner function Boolean HasEInvoicing();
external inner function Boolean HasEndorsedChecks();
external inner function Boolean HasExtraNLComment();
external inner function Boolean HasExtTax();
external inner function Boolean HasFavouriteActTypes();
external inner function Boolean HasFiscalPrinter();
external inner function Boolean HasFormEditor();
external inner function Boolean HasFreightAdvanced();
external inner function Boolean HasHideCostPrice();
external inner function Boolean HasHotelInterface();
external inner function Boolean HasGuestUserDefined();
external inner function Boolean HasJewelleryInterface();
external inner function Boolean HasIncomeAndExpenseBook();
external inner function Boolean HasIOUChecks();
external inner function Boolean HasItemClassification();
external inner function Boolean HasItemGroups();
external inner function Boolean HasKPIs();
external inner function Boolean HasLanguages();
external inner function Boolean HasLimitedAccess();
external inner function Boolean HasLocalMachines();
external inner function Boolean HasLoyaltyCards();
external inner function Boolean HasMailTags();
external inner function Boolean HasMainPartner();
external inner function Boolean HasMultiCurrency();
external inner function Boolean HasMultiLocations();
external inner function Boolean HasNLBudget();
external inner function Boolean HasNLBudgetClass();
external inner function Boolean HasObjects();
external inner function Boolean HasInvoiceOfficialSerNr();
external inner function Boolean HasOfficialSerNr();
external inner function Boolean HasOrderClasses();
external inner function Boolean HasPreferedOfficialSerNr();
external inner function Boolean HasNumberSeries();
external inner function Boolean HasPersons();
external inner function Boolean HasPocketScreen();
external inner function Boolean HasPositions();
external inner function Boolean HasPrepayments();
external inner function Boolean HasProjects();
external inner function Boolean HasPriceLists();
external inner function Boolean HasQualityControl();
external inner function Boolean HasReconLevel2();
external inner function Boolean HasReminderLevel();
external inner function Boolean HasRemoteBackup();
external inner function Boolean HasResourceDisplayGroups();
external inner function Boolean HasRussianPrepayment();
external inner function Boolean HasRetGoodsToSupp();
external inner function Boolean HasReturnedGoods();
external inner function Boolean HasRoomPackages();
external inner function Boolean HasRoomTypes();
external inner function Boolean HasRoute();
external inner function Boolean HasSalesman();
external inner function Boolean HasSalesmanBonus();
external inner function Boolean HasSalesGroup();
external inner function Boolean HasSecondQuantity();
external inner function Boolean HasSerialNumbers();
external inner function Boolean HasServerInCloud();
external inner function Boolean HasSettlementDiscount();
external inner function Boolean HasSimulations();
external inner function Boolean hasSimAccruals();
external inner function Boolean HasSkypeConnection();
external inner function Boolean HasSIPServerConnection();
external inner function Boolean HasStrAsSignFType();
external inner function Boolean HasTouchScreenDevice();
external inner function Boolean HasTaxMatrix();
external inner function Boolean HasTestFeatures();
external inner function Boolean HasMetroTestFeatures();
external inner function Boolean HasWorkOrders();
external inner function Boolean HasThrouLocation();
external inner function Boolean HasTouchScreenLook();
external inner function Boolean HasTREO();
external inner function Boolean HasVarieties();
external inner function Boolean HasVATZone();
external inner function Boolean HasWithholdingTax();
external inner function Boolean HasWithholdingTaxAdvanced();
external inner function Boolean HasWorkOrders();
external inner function Boolean HasWorkflowOverview();

external inner function Boolean HasStandardCRM();
external inner function Boolean HasStandardOrganizer();
external inner function Boolean HasStandardCommunicator();

external inner function Boolean HasEMail();
external inner function Boolean HasExternalEMail();

external inner function Boolean HasModAT2();
external inner function Boolean HasModBA();
external inner function Boolean HasModCheck();
external inner function Boolean HasModCL();
external inner function Boolean HasModCO();
external inner function Boolean HasModCons();
external inner function Boolean HasModCourses();
external inner function Boolean HasModCredMan();
external inner function Boolean HasModCRM();
external inner function Boolean HasModEDI();
external inner function Boolean HasModExp();
external inner function Boolean HasModHotel();
external inner function Boolean HasModHRM();
external inner function Boolean HasModIN();
external inner function Boolean HasModIntStock();
external inner function Boolean HasModNL();
external inner function Boolean HasPaymentGateway();
external inner function Boolean HasModPO();
external inner function Boolean HasModPOS();
external inner function Boolean HasModPL();
external inner function Boolean HasModPOProg();
external inner function Boolean HasModPP();
external inner function Boolean HasModProd();
external inner function Boolean HasModQT();
external inner function Boolean HasModRent();
external inner function Boolean HasModRest();
external inner function Boolean HasModRsrt();
external inner function Boolean HasModSO();
external inner function Boolean HasModSL();
external inner function Boolean HasModSVO();
external inner function Boolean HasModTS();
external inner function Boolean HasModWHM();
external inner function Boolean HasModDI();
external inner function Boolean UsePostOKButton();
external inner function Boolean HasBankImport();
external inner function Boolean HasPLIntegratedWithNL();
external inner function Boolean HasSLIntegratedWithNL();
external inner function Boolean HasIntegratedNL();
external inner function Boolean HasConsStockMoveInvoices();

SetLangMode(LangLithuanian,"LIT",2);
function Boolean ReportingSets()
begin		
  ReportingSets = false;
end;	

window PUDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  string 255 label;
  record CYBlock CYb;
  Integer tilenr;
  Integer f,flipnr,rn;

  BlockLoad(CYb);
  WindowBegin("Gavimas",PUDClass,CGview,-);
  if (HasJewelleryInterface) then begin
    SetWRect(20,80,870,620);
  end else begin
    SetWRect(20,80,750,620);
  end;
  if (HasMultiCurrency or IsEnterprise or HasObjects) then begin
  Sizeable(-1,-1,0,0);
  end;
  UseView(PUVc);
  ActiveFieldOnNew("VECode");      
  FormName(PurchaseForm);
  Tile(0,74,false,"",TransDate);
  EditField(75,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Tiekėjas",Normal,VECode,false,VESClass);
    EnterSkip(TransDate);
  EditField(h=255,v=vm,-40,"Pavadinimas",Normal,VEName,false,0);
  CheckBox(h4=-100,v+=20,0,"OK",OKFlag); //!!SAMETRANSLATION
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
    CheckBox(h4,v+=16,0,"Kaina su #PVM#",InclVAT);
  end else begin
    CheckBox(h4,v+=16,0,"Kaina su mok.",InclVAT);
  end;
  tilenr = 1;
  TileButton(tilenr,"Sąlygos"); tilenr = tilenr + 1; 
  TileButton(tilenr,"Prekės"); tilenr = tilenr + 1; 
  if (HasMultiCurrency) then begin
    TileButton(tilenr,"Valiuta"); tilenr = tilenr + 1; 
  end;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
    TileButton(tilenr,"Papild. kaštai"); tilenr = tilenr + 1; 
    TileButton(tilenr,"Frachtas"); tilenr = tilenr + 1; 
    end;
    TileButton(tilenr,"Komentaras"); tilenr = tilenr + 1; 
  end;
  tilenr = 1;

  vs = 20; h1 = 110; h2 = 300; h3 = 550; h4 = -100;
  Tile(tilenr,70,false,tilenr,TransDate); tilenr = tilenr + 1;
  EditField(h1,vm=(v=6),82,"Operac. data",Normal,TransDate,false,PasteCurDate);
  if (IsEnterprise==false) then begin
    EditField(h2,v,-20,"Komentaras",Normal,Comment,false,0); 
  end;
  if (HasMultiLocations) then begin
    v = v + vs;
    EditField(h1,v,82,"Patalpa",Normal,Location,false,LocationSClass);
  end;
  if (HasRoute) then begin
    v = v + vs;
    EditField(h1,v,82,"Maršrutas",ViewOnly,Sorting,false,0);
  end;
  v = v + vs;
  // Need a cleaner way to skip to next visible field
  if (HasObjects) then begin  
    EnterSkip(Objects);
  end else begin
    if (HasModPO) then begin 
      EnterSkip(PONr);
    end else begin
      if (IsEnterprise) then begin
        if (StandardHansa==false) then begin
          EnterSkip(POCOSerNr);
        end else begin
          EnterSkip(PUClass);
        end;
      end else begin
        if (HasLanguages) then begin
          EnterSkip(LangCode);
        end else begin
          if (IsEnterprise) then begin
            EnterSkip(CustomsNr);
          end else begin        
            if (HasLocalization("ARG,MEX,USA")) then begin
              EnterSkip(DispatchNumber);
            end else begin
              EnterSkip(Math);
            end;
          end;
        end; 
      end;
    end;  
  end;
  SoftEditField(h1,v,82,"Skanuoti barkodą",Normal,"scanbarcode",false,0,M4Str,60); 
  if (HasObjects) then begin
    if (IsEnterprise) then begin
  EditField(h2,v=vm,135,"Objektai",Normal,Objects,false,ObjSClass);
    end else begin
      if (HasMultiLocations) then begin
        EditField(h2,v,135,"Objektai",Normal,Objects,false,ObjSClass); 
      end else begin
        v = v + vs;
        EditField(h2,v,135,"Objektai",Normal,Objects,false,ObjSClass); 
      end;
    end;
  end;
  if (HasModPO) then begin
    if (HasObjects) then begin
      v = v + vs;
    end;
    EditField(h2,v,135,"Pirk. Užsk. nr.",ViewOnly,PONr,false,0);
  end;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
      v = v + vs;
      EditField(h2,v,135,"Pirk. kontr.",ViewOnly,POCOSerNr,true,POCOSClass);
    end;
  EditField(h3,v=vm,80,"Pirk. Užsk. klasė",ViewOnly,PUClass,false,0);
  end;
  if (HasLanguages) then begin
    v = v + vs;
    EditField(h3,v,80,"Kalba",Normal,LangCode,false,LangSClass);
  end;
  if (IsEnterprise) then begin
    v = v + vs;
    EditField(h3,v,80,"Pirkėjo numeris",Normal,CustomsNr,false,0); 
  end;
  // cust:// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 09:56:04
  v = v + vs;
  if (UserCanAction("AllowPersonChange",false)) then begin
    EditField(h3,v,80,"Pardavėjas",Normal,User,false,UserSClass);
  end else begin
    EditField(h3,v,80,"Pardavėjas",ViewOnly,User,false,0);
  end;
  // :cust// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 09:55:57
  if (HasLocalization("ARG,MEX,USA")) then begin 
    v = v + vs;
    EditField(h3,v,80,"Dispatch Number",Normal,DispatchNumber,false,0);  //!!SAMETRANSLATION
  end;
//  CheckBox(h4,v=vm,0,"Price Incl. #VAT#",InclVAT);
  EnterSkip(Math);
  Tile(tilenr,220,true,tilenr,Math); tilenr = tilenr + 1;
  v = 24;
  if (HasSerialNumbers or HasLocalization("ARG,MEX,USA") or HasJewelleryInterface) then begin
    MatrixBegin(4,v,-50,-50,-,200);
  end else begin
    MatrixBegin(4,v,-25,-50,-,200);
  end;
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  MatCol(1,28,"Prekė",0,ArtCode,false,INSClass);
//  MatCol(1,84,"Var",0,VARList,true,VARSClass);
//  MatCol(1,144,"Kiekis",0,Quant,true,0);
  if (HasVarieties) then begin
  MatCol(1,94,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(1,94,"Kiekis",0,Quant,true,0); 
  end;
  EnterSkip(Spec);
  MatText(t=3,28,"Vartotojas",true);
  MatCol(t,100,"",0,Sign,false,0);
  MatText(t,160,"Pataisymo data",true);
  MatCol(t,290,"Atn. data",0,UpdDate,false,0);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  if (HasJewelleryInterface) then begin
    MatColTL(1,144,"Vnt.",0,M4Code,ViewOnly,5,UnitCode,false,UnitSCLass); 
    MatCol(1,184,"Aprašymas",0,Spec,false,0); 
    MatCol(1,-485,"Patalpa",0,Location,false,LocationSClass); 
    MatCol(1,-430,"Ser. Nr.",0,SerialNr,false,SerialNrSClass); 
    EnterSkip(SerialNr);// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 4 September 2018 14:48:39
    MatCol(1,-320,"Sand. tipas",0,StockType,false,SetSClass); 
  end else begin
  MatColTL(1,164,"Vnt.",0,M4Code,ViewOnly,5,UnitCode,false,UnitSCLass);
  MatCol(1,204,"Aprašymas",0,Spec,false,0);
  end;
  MatCol(1,-240,"Vnt. kaina",0,UPrice,true,0);
  MatCol(1,-160,"Savikaina",0,CostPrice,true,0);
  MatCol(1,-80,"Suma",0,Sum,true,0);
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,144,"Aprašymas",0,Spec,false,0);
  MatCol(1,-350,"Patalpa",0,Location,false,LocationSClass);
  MatCol(1,-280,"Serijinis nr.",0,SerialNr,false,SerialNrSClass);
  EnterSkip(SerialNr);// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 4 September 2018 14:48:39
  MatCol(1,-150,"Galioja iki",0,BestBefore,false,0);
  MatCol(1,-60,"Siunt.būklė",0,BatchStatus,false,BatchStatusSClass);
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,144,"Aprašymas",0,Spec,false,0);
  MatColTL(1,-404,"Kaštai",0,-1,ViewOnly,-1,InPrice,false,0);
    if (StandardHansa==false) then begin
  MatColTL(1,-324,"Kainos pokytis",0,-1,ViewOnly,-1,VarianceAmount,false,0);
  MatCol(1,-244,"Vnt. kaina",0,UPrice,true,0);
  MatCol(1,-174,"Pap. kaštai",0,Extra,true,0);
  MatCol(1,-104,"Savikaina",0,CostPrice,true,0);
    end else begin
      MatCol(1,-324,"Frachtas",0,ShipCost,true,0); 
      MatCol(1,-244,"Pap. kaštai",0,Extra,true,0); 
      MatCol(1,-164,"Muitai",0,CustomsCost,true,0); 
    end;
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
  MatCol(1,-34,"Mok-kd",0,TaxTemplateCode,false,TaxTemplateSClass); 
  end else begin
  MatCol(1,-34,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,144,"Aprašymas",0,Spec,false,0);
    MatCol(1,-350,"Tiek. prekės nr.",0,VEItemCode,false,PISClass);
  MatColTL(1,-270,"Tiek. vnt.",0,M4Code,ViewOnly,5,VEUnit,false,UnitSCLass);
  MatCol(1,-200,"Tiek. kiekis",0,VEQuant,true,0);
    if (StandardHansa==false) then begin
  MatCol(1,-140,"Koeficientas",0,Coefficient,true,0);
    end;
  MatCol(1,-90,"Bazinė kaina",0,BasePrice,false,0);
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,144,"Aprašymas",0,Spec,false,0);
    if (StandardHansa==false) then begin
  MatCol(1,-400,"Sand. tipas",0,StockType,false,SetSClass);
    end;
    if (HasTREO) then begin
  MatCol(1,-310,"TREO",0,TREO,false,SetSClass); //!!SAMETRANSLATION
    end;
  MatCol(1,-220,"Sand. sąsk.",0,CostAcc,false,AccSClass);
  MatCol(1,-155,"Pirk. sąsk.",0,CredAcc,false,AccSClass);
  MatCol(1,-90,"Objektai",0,Objects,false,ObjSClass);
    if (StandardHansa==false) then begin
    Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,144,"Muitinės nr.",0,CustomsNr,false,0); 
      MatCol(1,-340,"Muitinės data ",0,CustomsDate,false,PasteCurDate); 
  MatCol(1,-240,"Kilmės šalis",0,CountryOfOrg,false,CountrySClass);
  MatCol(1,-140,"Iš vietos",0,PosCode,false,PosSClass);
  MatCol(1,-70,"Į vietą",0,ToPosCode,false,FreePosSClass);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,144,"Aprašymas",0,Spec,false,0);
  MatCol(1,-250,"Nr.",0,SerialNr,false,SerialNrSClass);
  EnterSkip(SerialNr);// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 4 September 2018 14:48:39
  MatCol(1,-135,"Plotis",0,UnitXval,true,0);
  MatCol(1,-90,"Aukštis",0,UnitYval,true,0);
  MatCol(1,-45,"Gylis",0,UnitZval,true,0);
    if (StandardHansa==false) then begin
  Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,144,"Papild. kaštai",0,Extra,true,0); 
  MatCol(1,-420,"Frachtas",0,ShipCost,true,0);
  MatCol(1,-360,"Muitai",0,CustomsCost,true,0);
  label = UserDefined("AccBlock","PUCost1");
  if (blank(label)) then begin label = "Kaštai 1";end;
  MatCol(1,-300,label,0,RowCost1,false,0);
  label = UserDefined("AccBlock","PUCost2");
  if (blank(label)) then begin label = "Kaštai 2";end;
  MatCol(1,-240,label,0,RowCost2,false,0);
  label = UserDefined("AccBlock","PUCost3");
  if (blank(label)) then begin label = "Kaštai 3";end;
  MatCol(1,-180,label,0,RowCost3,false,0);
  label = UserDefined("AccBlock","PUCost4");
  if (blank(label)) then begin label = "Kaštai 4";end;
  MatCol(1,-120,label,0,RowCost4,false,0);
  label = UserDefined("AccBlock","PUCost5");
  if (blank(label)) then begin label = "Kaštai 5";end;
  MatCol(1,-60,label,0,RowCost5,false,0);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,144,"Pirk.už.nr.",0,PONr,false,POSClass);
  MatCol(1,194,"Pirk.už.eil.",0,OrdRow,false,0);
  MatCol(1,-370,"Pirk.už.persk.",0,PORecon,false,0);
  MatCol(1,-310,"Komentaras",0,POReconComment,false,0);
  MatCol(1,-200,"Fakt. persk.",0,VIRecon,false,0);
  MatCol(1,-130,"Komentaras",0,VIReconComment,false,0);
  end else begin
    if (HasSerialNumbers) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,144,"Aprašymas",0,Spec,false,0); 
      MatCol(1,-230,"Serijinis Nr.",0,SerialNr,false,SerialNrSClass);
      EnterSkip(SerialNr);// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 4 September 2018 14:48:39
      MatCol(1,-80,"Galioja iki",0,BestBefore,false,0); 
    end;
/*
    MatCol(1,-280,"Vnt. kaina",0,UPrice,true,0); 
    MatCol(1,-210,"Frachtas",0,ShipCost,true,0); 
    MatCol(1,-140,"Papild. kaštai",0,Extra,true,0); 
    MatCol(1,-70,"Savikaina",0,CostPrice,true,0); 
*/
  end;
  if (HasLocalization("ARG,MEX,USA")) then begin 
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Aprašymas",0,Spec,false,0); 
    MatCol(t,-250,"Dispatch Number",0,DispatchNumber,false,0);  //!!SAMETRANSLATION
  end;
  if (HasJewelleryInterface) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Aprašymas",0,Spec,false,0); 
    MatCol(t,-350,"Tiek. ser. nr.",0,SuppSerialNr,true,0); 
    EnterSkip(SerialNr);// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 4 September 2018 14:48:39
    MatCol(t,-200,"Metal",0,Metal,true,0);  //!!SAMETRANSLATION
    MatCol(t,-150,"Weight",0,RowWeight,true,0);  //!!SAMETRANSLATION
    MatCol(t,-100,"Size",0,Size,true,0);  //!!SAMETRANSLATION
    MatCol(t,-50,"Length",0,Length,true,0);  //!!SAMETRANSLATION
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Apibūdinimas",0,Spec,false,0); 
    MatCol(t,-350,"Major Stone",0,MajStoneDet,true,0);  //!!SAMETRANSLATION
    MatCol(t,-250,"Colour",0,Colour,true,0); 
    MatCol(t,-200,"Clarity",0,Clarity,true,0);  //!!SAMETRANSLATION
    MatCol(t,-150,"Cert",0,Cert,true,0);  //!!SAMETRANSLATION
    MatCol(t,-100,"Minor Stone",0,MinStoneDet,true,0);  //!!SAMETRANSLATION
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Aprašymas",0,Spec,false,0); 
    MatCol(t,-400,"Watch Brand",0,WatchBrand,true,0);  //!!SAMETRANSLATION
    MatCol(t,-300,"Style Name",0,StyleName,true,0);  //!!SAMETRANSLATION
    MatCol(t,-200,"Watch Metal",0,WatchMetal,true,0);  //!!SAMETRANSLATION
    MatCol(t,-100,"Movement",0,Movement,true,0);  //!!SAMETRANSLATION
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Aprašymas",0,Spec,false,0); 
    MatCol(t,-400,"Brc/Str",0,BrcStr,true,0); 
    MatCol(t,-300,"Gender",0,Gender,true,0);  //!!SAMETRANSLATION
    MatCol(t,-200,"Other",0,Other,true,0);  //!!SAMETRANSLATION
    MatCol(t,-100,"Other 2",0,Other2,true,0);  //!!SAMETRANSLATION
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  if (StandardHansa==false) then begin
    if (HasSerialNumbers) then begin
      RowMenuItem(0,"Atidaryti siuntos specifikaciją",' ',' ',0,"OpenBatchPUDsm");
    end;
    RowMenuItem(0,"Padalinti eilutę",' ',' ',0,"SplitRowPUDsm");
    if (HasQualityControl) then begin
      RowMenuItem(0,"Kokybės kontrolė",' ',' ',10,"QualConFromPUDsm"); 
    end;
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
//  v = 18;
  v = v + 1;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));  //!!SAMETRANSLATION
      v = v + vs;
    end;
  end;
  EditField(110,-41,70,"Viso kiekis",ViewOnly,SumQuant,true,0);
//  EditField(110,-21,70,"Price Subtotal",Normal,SubTotal,true,0); //Shows the same as SumCostPrice?
  EditField(260,-41,70,"Frachtas",Normal,ShipCost,true,0);
  if (IsEnterprise) then begin
  EditField(260,-21,70,"Muitai",Normal,CustomsCost,true,0);
  end;
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
    EditField(410,-41,70,"#PVM#",Normal,VATVal,true,0);
    if (HasExtTax) then begin
      EditField(410,-21,70,"Pap. kaštai",ViewOnly,TAX1Sum,true,0);
    end;
  end else begin
    EditField(410,-41,70,"Mok.",Normal,VATVal,true,0);
  end;
  EditField(-169,-41,118,"Tarp. suma",ViewOnly,SumCostPrice,true,0);
  EditField(-169,-21,118,"VISO",ViewOnly,PayVal,true,0);
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
  vs = 20;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
  EditField(h1,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
    if (HasBase2) then begin
        EditField(h1,v+vs,50,"Bazinė valiuta 1",Normal,BaseRate1,true,0);
    end else begin
        EditField(h1,v+vs,50,"Baz. val.",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin  
        EditField(h1,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0); 
      end;
      EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0); 
      if (HasBase2) then begin  
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);  //!!SAMETRANSLATION
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);            //!!SAMETRANSLATION
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val.",false);      //!!SAMETRANSLATION
      end;
    end else begin
      EditField(h1,v+=vs,50,"Baz. val. 1",Normal,BaseRate1,true,0); 
      EditField(h1,v+=vs,50,"Baz. val. 2",Normal,BaseRate2,true,0); 
    end;
  end;
  if (IsEnterprise and StandardHansa==false) then begin
    Tile(tilenr,120,false,tilenr,Cost1); tilenr = tilenr + 1;
  vs = 20;
  label = UserDefined("AccBlock","PUCost1");
  if (blank(label)) then begin label = "Papild. kaštai 1";end;
  EditField(h=110,v=6,70,label,Normal,Cost1,false,0);
  label = UserDefined("AccBlock","PUCost2");
  if (blank(label)) then begin label = "Papild. kaštai 2";end;
  EditField(h2=295,v,70,label,Normal,Cost2,false,0);
  label = UserDefined("AccBlock","PUCost3");
  if (blank(label)) then begin label = "Papild. kaštai 3";end;
  EditField(h,v+=vs,70,label,Normal,Cost3,false,0);
  label = UserDefined("AccBlock","PUCost4");
  if (blank(label)) then begin label = "Papild. kaštai 4";end;
  EditField(h2,v,70,label,Normal,Cost4,false,0);
  label = UserDefined("AccBlock","PUCost5");
  if (blank(label)) then begin label = "Papild. kaštai 5";end;
  EditField(h,v+=vs,70,label,Normal,Cost5,false,0);
    if (HasApprovals) then begin
      SoftEditField(h2,v,123,"Patvirtinimo statusas",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
    end;
  ButtonFrame(h3=400,v=16,130,2,"Papild. kaštų skaičiavimas"); 
  RadioButton(h3,v,0,0,"Vertė",ExtraCostsCalculation); 
  RadioButton(h3,v+=16,1,0,"Svoris",ExtraCostsCalculation); 
/*
//oldapprovals  
    ButtonFrame(h3=-163,v=16,123,6,"Patvirtinimo būklė");
  RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Nereikalaujamas",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Nepradėtas",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Nereikalautas",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Aktyvus",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Patvirtintas",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Atmestas",AcceptanceStatus);  
*/    
    Tile(tilenr,130,false,tilenr,FreightCode); tilenr = tilenr + 1;
  EditField(h1,v=6,80,"Frachto įmonė",Normal,FreightCode,false,FreightCompanySClass);
  EditField(h1,v+=vs,-20,"Pavadinimas",Normal,FreightCompany,false,0);
  EditField(h1,v+=vs,-20,"Reg.Nr.",Normal,FreightCompanyRegNr,false,0);
  EditField(h1,v+=vs,-20,"Maš. inform.",Normal,TruckInfo,false,0);
  EditField(h1,v+=vs,-20,"Vairuotojas",Normal,Driver,false,0);
  EditField(h1,v+=vs,-20,"CMR",Normal,CMRText,false,0); // International transporting number //!!SAMETRANSLATION
    Tile(tilenr,30,false,tilenr,Comment); tilenr = tilenr + 1;
    EditField(h1,v=6,-20,"Komentaras",Normal,Comment,false,0); 
  end;
  if (StandardHansa==true) then begin
    Tile(tilenr,30,false,tilenr,Comment); tilenr = tilenr + 1;
    EditField(h1,v=6,-20,"Komentaras",Normal,Comment,false,0); 
  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Gavimo būklė",'r',4,"PUStatusDsm"); 
    SpecialMenu("Generuoti serijinius nr.",' ',2,"GenSerialNosPUDsm"); 
    if (HasIntegratedNL) then begin
      SpecialMenu("Atidaryti D/K operaciją",'t',4,"OpenTRFromPU"); 
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModPL) then begin
      SpecialMenu("Sukurti Pirkimo faktūrą",'F',3,"VIFromPUDsm"); 
    end;
    if (HasRetGoodsToSupp and HasModIN) then begin
      SpecialMenu("Sukurti Prekių grąžinimą",'B',7,"RetPUFromPUDsm"); 
    end;
  end else begin
  if (IsEnterprise) then begin
  SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm");
  SpecialMenu("Gavimo būklė",'r',4,"PUStatusDsm");
  end;
  if (HasSerialNumbers) then begin
  	SpecialMenu("Sukurti serijinius nr.",' ',2,"GenSerialNosPUDsm");
  end;
    if (HasIntegratedNL) then begin
  SpecialMenu("Atidaryti D/K operaciją",'t',4,"OpenTRFromPU");
  end;
  if (HasTaxMatrix) then begin
  SpecialMenu("Atidaryti mok. matricą",' ',25,"OpenVatMatrixPUDsm"); 
  end;
  SpecialMenu("Spausdinti etiketes",'e',0,"PrintPULabPUDsm");
  SpecialMenu("Atnaujinti prekes",' ',1,"UpdatePricesPUDsm");
  
  if (HasModWHM) then begin
    SpecialMenu("Patvirtinti sandėlio vald. perkėlimus",' ',9,"OKStockMovPUrDsm");
  end;
  if (HasLocalization("HRV")) then begin
    SpecialMenu("Sales Price Calculation",' ',8,"SPCHRVPUDsm"); //!!SAMETRANSLATION
  end;
  if (HasApprovals) then begin
    SpecialMenu("Siųsti patvirtinimui",' ',6,"PUSendforAcceptancePUDsm");
    SpecialMenu("Atšaukti patvirtinimo užklausą",' ',2,"CancelApprovalRequestDsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  if (HasModPL) then begin
  SpecialMenu("Sukurti pirkimo faktūrą",'F',3,"VIFromPUDsm");
  end;
    if (HasAdvancedStock or (HasRetGoodsToSupp and HasModIN)) then begin
  SpecialMenu("Sukurti prekių grąžinimą",'B',7,"RetPUFromPUDsm");
  end;
  if (HasModRent) then begin
//SpecialMenu("Sukurti sandėlio perkėlimą",' ',5,"StockMovFromPUSpec");
//SpecialMenu("Scan",' ',8,"ScanBarCodePUDsm");
  SpecialMenu("Sukurti sandėlio perdavimą",' ',8,"INTransFromPUsm");
  end;
    SpecialMenu("Pridėti tiekėją",' ',0,"AddSupplierPUDsm"); 
    SpecialMenu("Pridėti prekę",' ',0,"AddItemPUDsm");     
  end;
  EndWindow;
end;

window StockTakeDClass:5
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vs;
  Integer f,flipnr,t;
  Integer icn,pos;

  icn = StringToInt(USetStr(912));
  WindowBegin("Inventorizacija",StockTakeDClass,CGview,-); 
  SetWRect(20,80,560,350);
  Sizeable(-1,-1,0,0);
  UseView(StockTakeVc);
  if (false) then begin
    if (GUIType==kGuiAndroid) then begin
      WindowTitleBar(6002,icn,6003,"Inventorizacija"); 
    end;
    h = 10; h2 = 165;
    vs = 38;
    EditField(h,v=6,145,"Nr.",Normal,SerNr,false,0); 
    if (HasMultiLocations) then begin
      EditField(h2,v,145,"Patalpa",Normal,Location,false,LocationSClass); 
    end;
    EditField(h,v+=vs,300,"Oper. Data",Normal,TransDate,false,PasteCurDate); 
    EditField(h,v+=vs,-10,"Komentaras",Normal,Comment,false,0); 
    CheckBox(40,v+=vs,0,"OK",OKFlag);  //!!SAMETRANSLATION
    EnterSkip(Math);
    v = v + 42;
    MatrixBegin(0,v,-1,-1,-,200);
  
    MatCell(t=1,10,6,120,19,ArtCode,false,12,patM4black);
    MatCell(t,130,6,280,19,SerialNr,false,12,patM4black);
    MatCell(t,10,26,190,39,Spec,false,12,patM4black);
    MatCell(t,200,26,280,39,Qty,true,12,patM4black);

  //MatCol(1,-340,"Position",0,Position,false,PosSClass);
    InsertRowTest;
    DeleteRowTest;
    EndMatrix;
  end else begin
    if (GUIType==kGuiiPhone) then begin
      Tile(0,130,false,"",SerNr);
    end;
    vs = 20; h2 = 300;
    EditField(h=100,v=6, 82,"Nr.",Normal,SerNr,false,TSerSClass);
    EditField(h2,v,82,"Operacijos data",Normal,TransDate,false,PasteCurDate);
    // cust:// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 09:59:01
    if (UserCanAction("AllowPersonChange",false)) then begin
      EditField(h2,v+20,82,"Pardavėjas",Normal,User,false,UserSClass);
    end else begin
      EditField(h2,v+20,82,"Pardavėjas",ViewOnly,User,false,0);
    end;
    // :cust// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 09:59:03
    if (IsEnterprise) then begin
      CheckBox(-100,v,0,"OK",OKFlag);  //!!SAMETRANSLATION
    end;
    if (HasMultiLocations) then begin
      EditField(h,v+=vs,82,"Patalpa",Normal,Location,false,LocationSClass);
    end;
    EnterSkip(Math);
//  CheckBox(420,v=6,0,"Pakeisti sandėlio likučius į čia suvestus duomenis",SetStockValue); // Still not working properly
//  CheckBox(420,v+=vs,0,"Perrašyti atgaline data",OverrideBackdated); // Still not working properly
    v = v + 42;
    vm = v + 1;
    if (GUIType==kGuiiPhone) then begin
      TileButton(1,"Skaič.");
      TileButton(2,"Komentaras");
      Tile(1,230,false,"",Math);
    end;
    MatrixBegin(4,v,-50,-35,-,200);
    Flip(0); flipnr = flipnr + 1;
    if (HasJewelleryInterface) then begin
      MatCol(1,32,"Ser. Nr.",0,SerialNr,false,SerialNrSClass);
      EnterSkip(SerialNr); // c:// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 09:59:21
      //EnterSkip(Quant);
      MatCol(1,130,"Prekė",0,ArtCode,false,INSClass); 
      if (HasVarieties) then begin
        MatCol(1,192,"Susk.",0,Qty,true,MATVARINSClass); 
      end else begin
        MatCol(1,192,"Susk",0,Qty,true,0); 
      end;
      if (HasAdvancedStock) then begin
        MatCol(1,254,"Sandėlyje",0,InStock,true,0); 
        MatCol(1,314,"Aprašymas",0,Spec,false,0); 
      end else begin
        MatCol(1,254,"Aprašymas",0,Spec,false,0); 
      end;
    end else begin
      MatCol(1,32,"Prekė",0,ArtCode,false,INSClass);
			//  MatCol(1,94,"Var",0,VARList,false,VARSClass);
			//  MatCol(1,144,"Kiekis",0,Qty,true,0);
      if (HasVarieties) then begin
        MatCol(1,94,"Susk.",0,Qty,true,MATVARINSClass);
      end else begin
        MatCol(1,94,"Susk.",0,Qty,true,0); 
      end;
      pos = 154;
      if (HasAdvancedStock) then begin
        MatCol(1,pos,"Sandėlyje",0,InStock,true,0);
        pos = pos + 62;
        if (HasSerialNumbers) then begin
          MatCol(1,pos,"Serij. nr.",0,SerialNr,false,SerialNrSClass); 
          EnterSkip(SerialNr);
          pos = pos + 120;
        end;
        MatCol(1,pos,"Aprašymas",0,Spec,false,0);
      end else begin
        if (HasSerialNumbers) then begin
          MatCol(1,pos,"Serijinis nr.",0,SerialNr,false,SerialNrSClass);
          EnterSkip(SerialNr); // c// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 09:59:59
          pos = pos + 120;
        end;
        MatCol(1,pos,"Aprašymas",0,Spec,false,0);
      end;  
    end;
    if (IsEnterprise) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      if (HasJewelleryInterface==false) then begin// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:00:14
        MatCol(1,-280,"Ser. Nr.",0,SerialNr,false,SerialNrSClass); 
        EnterSkip(SerialNr); // c
      end;
      MatCol(1,-160,"Patalpa",0,Location,false,LocationSClass); 
      if (HasModWHM) then begin
        MatCol(1,-100,"Pozicija",0,Position,false,PosSClass); 
      end;
      MatCol(1,-40,"Koef.",0,Coefficient,false,0); 
      Flip(flipnr); flipnr = flipnr + 1;
			MatCol(1,-125,"Pard.kaina",0,BasePrice,true,0);
			MatCol(1,-40,"Koef.",0,Coefficient,false,0);
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,-140,"Plotis",0,UnitXval,true,0); 
      MatCol(1,-95,"Aukštis",0,UnitYval,true,0); 
      MatCol(1,-50,"Gylis",0,UnitZval,true,0); 
    end;
    DeleteRowTest;
    EndMatrix;
    vs = 20; v=vm;
  
    if (flipnr>2) then begin
      for (f=1;f<flipnr;f=f+1) begin
        VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));  //!!SAMETRANSLATION
        v = v + vs;
      end;
    end;
    if (GUIType==kGuiiPhone) then begin
      Tile(2,230,false,"",Comment);
    end;
    if (IsEnterprise==false) then begin
      CheckBox(20,-30,0,"OK",OKFlag);  //!!SAMETRANSLATION
    end;
    EditField(h=150,-30,-35,"Komentaras",Normal,Comment,false,0); 
    if (IsEnterprise) then begin
      SpecialMenu("Įstatyti dabartinę savikainą",' ',1,"StockTakeFillFIFODsm");
       SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm");
  //  SpecialMenu("Import Data from Digitag",'f',1,"StockTakeDigitagDsm");
    end;
  end;
  EndWindow;
end;

window ArtSTRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Prekės statistika",ArtSTRClass,CGRcW,RcType);
  SetWRect(20,80,450,330);
  vs = 20;
    h = 160;
  PeriodField(h,v=6,"Periodas"); 
  EditFieldTL(h,v+=20, 150,"Prekės Nr.",   M4UStr,Normal,50,f1,false,INSClass); 
  if (HasItemClassification) then begin
    EditFieldTL(h,v+=20, 150,"Prekių klasė", M4UStr,Normal,60,f4,false,DISClass);
  end;
  if (HasItemGroups) then begin
    EditFieldTL(h,v+=20, 150,"Prekių grupės",   M4UStr,Normal,20,f3,false,ITSClass); 
  end;
  if (HasModCO or HasModSL or HasModSO) then begin
  EditFieldTL(h,v+=20, 150,"Pirkėjas",   M4UStr,Normal,41,f2,false,CUSClass);
  end;
  if (HasCategories) then begin
  EditFieldTL(h,v+=20, 150,"Kategorijos",   M4UStr,Normal,30,ObjStr,false,CCatSClass);
  end;
  if (HasDepartments) then begin
  EditFieldTL(h,v+=20, 150,"Skyrius",      M4UStr,Normal,10,AccStr,false,DepSClass);
  end;
  if (HasModRest) then begin
    EditFieldTL(h,v+=vs, 150,"Šaka",   M4UStr,Normal,20,f6,false,CUSClass);
  EditFieldTL(h,v+=vs, 100,"Stalo užsak. klasė",   M4UStr,Normal,10,LastAcc,false,RestAccClassSClass);
  end;
  if (HasPriceLists) then begin
    EditFieldTL(h,v+=20, 50,"Kainoraštis",      M4UStr,Normal,5,FirstAcc,false,PLDefSClass);
  end;
  if (HasMultiLocations) then begin
    EditFieldTL(h,v+=20, 85,"Vieta",M4UStr,Normal,30,f5,false,LocationSClass);
  end;
  if (IsEnterprise) then begin
    CheckBox(h,v+=vs,0,"Rodyti visas patalpas",flags[1]);
//  EditFieldTL(h,v+=vs ,100,"#Salesman#",M4UStr,Normal,10,FirstAcc,false,UserSClass); /* kyvv 970418 */
/* Who added this ?? */
//  CheckBox(80,vm=(v+=41),0,"Show only Item Groups amounts",flags[1]);
    v = v + 30;
    vm = v+=vs;
    ButtonFrame(h=30,v,123,2,"Funkcija");
  RadioButton(h,v,0,0,"Peržiūra",ArtMode);
  RadioButton(h,v+=16,1,0,"Detaliai",ArtMode);
    h = 200;
  end else begin
    v = v + 30;  
    vm = v+=vs;
  end;
  if (HasBase2 or HasMultiCurrency) then begin
    ButtonFrame(h,v=vm,200,2,"Vertės");
  RadioButton(h,v,0,0,"Bazine valiuta 1",basecurncy);
  RadioButton(h,v+=16,1,0,"Bazine valiuta 2 (šiandienos kursu)",basecurncy);
end;
  EndWindow;
end;

window CUDClass:14
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,h5,h6,l,v,vm,vm2,vs;
  string 255 label;
  record CUVc CUr;
  Integer wn,tilenr;
  record ModuleBlock Modb;
  
  BlockLoad(Modb);
  WindowBegin("Kontaktas",CUDClass,CGview,-);
  DynamicWindow;
  SetWRect(20,80,850,441);
  Sizeable(-1,-1,0,0);
  UseView(CUVc);
  FormName(PrintCUD);
  
  wn = CurWindow;
  if (wn>0) then begin
    if (GetWindowClass(wn)=="CUDClass") then begin 
    GetWindowRecord(wn,CUr);
    end;
  end;
  
  if (HasLocalization("EST,GBR,LTU,LVA,NOR")) then begin
  ActiveFieldOnNew("Code"); //dont change, otherwise automatic address lookup helper window wont show automatically //wns
                              // this should not be based on localization, but rather on if the
                              // address lookup is enabled, erik
  end else begin
    ActiveFieldOnNew("Name");
  end;
  if (HasMetroTestFeatures or GUIType!=kGUIMetro) then begin
    CommunicateButton;
  end;
  if (HasJewelleryInterface) then begin
    Tile(0,155,false,"",Code);
  end else begin
    Tile(0,95,false,"",Code);
  end;
  v = 6; h = 130; l=223; vs = 20; h1=410; h2 = 350; h3 = 430; h4 = 580; h5 = 460;
  EditField(h,v ,   95,"Nr.",Normal,Code,false,TSerSClass);
  EditField(h1,v,50,"Pirkėjo kategorija",Normal,CustCat,false,CCatSClass);
  EditField(h,v+=vs,95,"Trumpas pavad.",Normal,SearchKey,false,0);
  EditField(h1,v,50,"Tiekėjo kategorija",Normal,VECat,false,VGSClass);
  if (HasJewelleryInterface) then begin
    EditField(h,v+=vs,95,"Antraštė",Normal,Salutation1,false,0); 
    EditField(h1,v,50,"Priesaga",Normal,ANACode,false,0); 
    EditField(h,v+=vs,h1-h+50,"Vardas",Normal,Salutation2,false,0); 
    EditField(h,v+=vs,h1-h+50,"Pavardė",Normal,Salutation3,false,0); 
  EditField(h,v+=vs,h1-h+50,"Pavadinimas",Normal,Name,false,0);
  end else begin
    EditField(h,v+=vs,h1-h+50,"Pavadinimas",Normal,Name,false,0); 
  end;
  // cust:// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:01:02
    EditField(h,v+=vs,h1-h+50,"Vardas",Normal,WebName,false,0); 
    CheckBox(h1+80,v,0,"Didmeninis eshop kainynas",AdvancedPrice);
    EditField(h,v+=vs,h1-h+50,"Pavardė",Normal,WebSurname,false,0); 
    // :cust// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:01:03
  CheckBox(h1+80,v=6,0,"Pirkėjas",CUType);
  CheckBox(h1+80,v+=16,0,"Tiekėjas",VEType);
  if (HasModHotel) then begin
  CheckBox(h1+80,v+=16,0,"Svečias",GuestType);
  end;
  if (HasJewelleryInterface) then begin
    CheckBox(h1+80,v+=16,0,"Nesiųsti laiškų",NoLetterPosting);
    CheckBox(h1+80,v+=16,0,"Nesiųsti e-laiškų",NoMailPosting);
    EditField(h1+120,v+=20,100,"Pardavėjas",Normal,SalesMan,false,UserSClass);
  end;
  v=6;
  if (HasModHRM or IsEnterprise) then begin
    CheckBox(h1+180,v,0,"Darbuotojas",EmployeeType); v = v + 16;
  end;
  if (StandardHansa==false) then begin
    CheckBox(h1+180,v,0,"Pardavėjas",DealerType);
  end;
  CheckBox(h1+180,v+=16,0,"Vadovas",LeadType);
//  HalPushButton(h1+170,v=10,h1+170+100,v+20,"CreditInfoCUDsm","Kredito informacija");
  CheckBox(h1+280,v=6,0,"Skyrius",BranchType);

//  HalPushButton(h1+170,v=10,h1+170+100,v+20,"CreditInfoCUDsm","");
//  HalPushButton(h1+170,v=10,h1+170+100,v+20,"UpdCustomerAddressCUDsm","Atnaujinti adresą");
  tilenr = 1;
  TileButton(tilenr,"Kontaktas"); tilenr = tilenr + 1;
  TileButton(tilenr,"Siuntimas"); tilenr = tilenr + 1; 
  TileButton(tilenr,"Sąlygos"); tilenr = tilenr + 1; 
  TileButton(tilenr,"Kainodara"); tilenr = tilenr + 1; 
  TileButton(tilenr,"Įmonė"); tilenr = tilenr + 1; 
  TileButton(tilenr,"Sąskaitos"); tilenr = tilenr + 1; 
  TileButton(tilenr,"E-Įrašai"); tilenr = tilenr + 1; 
  if (StandardHansa==false) then begin
    TileButton(tilenr,"Web"); tilenr = tilenr + 1;  
  end;
  TileButton(tilenr,"Komentaras"); tilenr = tilenr + 1; 
  if (true) then begin//HasModHotel
    TileButton(tilenr,"Asm. duomenys"); tilenr = tilenr + 1; 
  end;
  if (StandardHansa==false) then begin
    if (GuiType==kGuiMetro) then begin//UGLY
      TileButton(tilenr,"Kiti"); tilenr = tilenr + 1; 
    end else begin
      TileButton(tilenr,"Vartot. apibr."); tilenr = tilenr + 1; 
    end;
  end;
  TileButton(tilenr,"Pastabos"); tilenr = tilenr + 1;
  if (CUr.CUType!=0 and HasCharts) then begin
    TileButton(tilenr,"BI"); tilenr = tilenr + 1;  
  end;
  tilenr = 1;
  Tile(tilenr,290,true,tilenr,InvAddr0); tilenr = tilenr + 1;
  v=6;
  h6 = h+120;
  HalPushButton(h6,v,h6+100,v+20,"UpdCustomerAddressCUDsm","Atnaujinti adresą");
  h6 = h6 + 130;
  HalPushButton(h6,v,h6+150,v+20,"CheckEUVATNumberCUDsm","Patikrinti ES PVM kodą");
  v=v+10;
  StaticText(h,v+13,"Fakt. adresas",false);
  label = UserDefined("CUVc","InvAddr0");
  EditField(h,v+=vs,-20,label,Normal,InvAddr0,false,0);
  label = UserDefined("CUVc","InvAddr1");
  EditField(h,v+=vs,-20,label,Normal,InvAddr1,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs,-20,label,Normal,InvAddr2,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs,-20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs,-20,label,Normal,InvAddr4,false,0);
  EditField(h,v+=vs,50,"Šalis",Normal,CountryCode,false,CountrySClass);//tsp-101118
  if (HasLocalization("BRA")) then begin  
    EditField(h2-159,v,214,"",ViewOnly,InvCountryName,false,0); 
    v = v + vs;
  end;  
  EditField(h1,v,-20,"Skyrius",Normal,Department,false,0);
  EditField(h,v+=vs,150,"Telefonas",Normal,Phone,false,0);
  EditField(h1,v,-20,"Faksas",Normal,Fax,false,0);
  EditField(h,v+=vs,150,"Alt tel.",Normal,AltPhone,false,0);
  EditField(h1,v,-20,"Mobilus",Normal,Mobile,false,0);
  EditField(h,v+=vs,150,"Skype vardas",Normal,SkypeName,false,0);
  EditField(h1,v,-20,"SIP",Normal,SIPCode,false,0); 
  EditField(h,v+=vs,150,"El. paštas",Normal,eMail,false,0);  
  EditField(h1,v,-20,"Praplėtimas",Normal,Extension,false,0);
  EditField(h,v+=vs,150,"Pirmin. kontaktas",Normal,Person,false,ContactSClass);
  EditField(h1,v,-20,"Web pusl.",Normal,wwwAddr,false,0);
  EditField(h,v+=vs,-20,"Klasė",Normal,Classification,false,CClassSClass);
  if (HasLocalization("CHN")) then begin 
    EditField(h,v+=vs,150,"QQ paskyra",Normal,QQName,false,0);  
    EditField(h1,v,-20,"Weibo paskyra",Normal,WeiboName,false,0);  
  end;
  RecordList2(10,v+=40,-30,-39,"ContactRelVc");
  RlColKey(4,4,"Kodas",ContactCode,false,ActCustContactCode);
  RlCol(55,55,"Pavadinimas",ContactTitle,false);
  RlColKey(105,105,"Vardas",ContactName,false,ActCustContactName);
  RlCol(235,235,"Telefonas",ContactPhone,false);
  RlCol(335,335,"Mobilus",ContactMobile,false);
  RlCol(435,435,"Pareigos",JobTitle,false);
  RlCol(535,535,"El. paštas",ContacteMail,false);
  // RlCol(-1,-1,"",Invalid,true);
  Tile(tilenr,240,false,tilenr,DelAddr0); tilenr = tilenr + 1;
  v=6;
  if (HasLocalization("CAN,GBR,LVA,EST,SWE,USA")) then begin
  HalPushButton(h+120,v,h+120+100,v+20,"UpdDeliveryAddressCUDsm","Atnaujinti adresą");
  end;
  v=v+12;
  StaticText(h,v+13,"Siunt. adresas",false);
  label = UserDefined("CUVc","DelAddr0");
  EditField(h,v+=vs,-20,label,Normal,DelAddr0,false,0);
  label = UserDefined("CUVc","DelAddr1");
  EditField(h,v+=vs,-20,label,Normal,DelAddr1,false,0);
  label = UserDefined("CUVc","DelAddr2");
  EditField(h,v+=vs,-20,label,Normal,DelAddr2,false,0);
  label = UserDefined("CUVc","DelAddr3");
  EditField(h,v+=vs,-20,label,Normal,DelAddr3,false,0);
  label = UserDefined("CUVc","DelAddr4");
  EditField(h,v+=vs,-20,label,Normal,DelAddr4,false,0);  
  EditField(h,v+=vs,50,"Šalis",Normal,DelCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin  
    EditField(h2-159,v,203,"",ViewOnly,DelCountryName,false,0); 
    v = v + vs;
  end;    
  EditField(h2+50,v,-20,"Užsak. komentaras",Normal,OrderComment,false,0);
  EditField(h,v+=vs,120,"Frachto nr.",Normal,FreightNr,false,0);
  EditField(h2+50,v,70,"Regionas",Normal,Region,false,RegionSClass);
  EditField(h,vm=(v+=vs),120,"Pard. siunt. sąl.",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h2+50,v,70,"Pirk. siunt. sąl.",Normal,VEShipDeal,false,ShipDealSClass);
  EditField(h,v+=vs,120,"Pard. siunt. būdas",Normal,ShipMode,false,DMSClass);
  EditField(h2+50,v,70,"Pirk. siunt. būdas",Normal,VEShipMode,false,DMSClass);
    EditField(h,v+=vs,120,"Maršrutas",Normal,Sorting,false,DelRouteSClass);
/* these fields were used for securities trading, this module doesnt exist in hansa anymore */
/* Two of these fields are used in Russia and Ukraine */
//  EditField(h,vm=(v+=vs),120,"Securities Acc.",Normal,SecAccount,false,0);
//  EditField(h,v+=vs,120,"Bank Account",Normal,BankAccount,false,0);//xx
//  EditField(h,v+=vs,120,"Account Operator",Normal,AccOperator,false,BankSClass);//xx
//##  EditField(h,v+=vs ,70, "Com. Matrix",Normal,ComCode,false,ComSClass);
  ButtonFrame(h5+30,v=vm,150,2,"Siunt. data pagal");
  RadioButton(h5+30,v,0,0,"Einamają datą",DeliveryBasedOn);
  RadioButton(h5+30,v+=16,1,0,"Planuojamą siuntimo datą",DeliveryBasedOn);
  Tile(tilenr,190,false,tilenr,PayDeal); tilenr = tilenr + 1;
  EditField(h,v=6,35,"Pard. mok. term.",Normal,PayDeal,false,PDSClass);
  EditField(h,v+=vs,80,"Pard. kredito limitas",Normal,CreditLimit,true,0);
    EditField(h,v+=vs,80,"Pard. kred. lim. d. sk.",Normal,CreditLimitDays,false,0);
  EditField(h,v+=vs,80,"Jų tiek. kodas",Normal,TheirCode,false,0);
  EditField(h,v+=vs,80,"Faktūra kam",Normal,InvoiceToCode,false,CUSClass);
//  EditField(h,v+=vs,80,"",Normal,ANACode,false,0);
  EditField(h,v+=2*vs,80,"Delsp. %",Normal,IntRate,false,0);
  EditField(h,v+=vs,80,"Sukūrimo data",ViewOnly,DateCreated,false,0);
    EditField(h,v+=vs,80,"Pagr. partneris",Normal,MainPartner,false,CUSClass);
  EditField(h2,v=6,35,"Pirk. mok. term.",Normal,VEPayDeal,false,PDSClass);
  EditField(h2,v+=vs,80,"Pirk. kredito limitas",Normal,VECreditLimit,true,0);
    EditField(h2,v+=vs,80,"Pirk. kred. lim. d. sk.",Normal,VECreditLimitDays,false,0);
  EditField(h2,v+=vs,80,"Jų pirkėjo kodas",Normal,VECustID,false,0);
  EditField(h2,v+=vs,80,"Faktūra iš tiekėjo",Normal,VEInvoiceToCode,false,VESClass);
  EditField(h2,v+=vs,80,"Faktoringas",Normal,VEFactoring,false,VESClass);
  EditField(h2,v+=vs,80,"Min. užs. suma",Normal,MinOrdSum,false,0);
  EditField(h2,v+=vs,80,"Nuoroda",Normal,RefStr,false,0);
  EditField(h2,v+=vs,80,"Pakeitimo data",Normal,DateChanged,false,0);
  CheckBox(h5,v=12,0,"Uždaryta",blockedFlag);
  CheckBox(h5,v+=16,0,"Sustabdyta",OnHoldFlag);
  CheckBox(h5,v+=16,0,"Priminimai",RemndrFlag);
//  CheckBox(h5,v+=16,0,"Kolekcija",ColectionFlag);
  CheckBox(h5,v+=16,0,"Delspinigiai",InterestFlag);
  CheckBox(h5,v+=16,0,"Avansas",OnAccount);
  if (StandardHansa==false) then begin
  CheckBox(h5,v+=16,0,"Be faktoringo",NoFactoringFlag);
  CheckBox(h5,v+=16,0,"Nėra pap. mokest.",NoTax1);
  CheckBox(h5,v+=16,0,"Tik grupinis fakt.",GroupInv);
    CheckBox(h5,v+=16,0,"Sav. fakt.",SelfBilling);
    CheckBox(h5,v+=16,0,"Patvirtinta chemikalų laikymui",ChemicalStorageApproved); 
  CheckBox(h4,v=12,0,"EGO Pirkėjas",EGOFlag);
  CheckBox(h4,v+=16,0,"EDI Pirkėjas",EDIFlag);
  CheckBox(h4,v+=16,0,"Leisti prisijungti",AllowLogin);
//  CheckBox(h4,v+=16,0,"Leisti FTP priėjimą",FTPLogin);
  CheckBox(h4,v+=16,0,"Tik fiskalinės fakt.",FiscalFlag);
  CheckBox(h4,v+=16,0,"Nesiųsti bendrų laiškų",NoLetterPosting);
  end else begin
    CheckBox(h4,v=12,0,"Be mas. laiškų",NoLetterPosting); 
  end;
  CheckBox(h4,v+=16,0,"Nesiųsti bendrų el. laiš.",NoMailPosting);
  CheckBox(h4,v+=16,0,"Nesk. apl. aps. mok.",NoRepa);
  if (HasLocalization("GBR,LTU,POL,LVA")) then begin
    CheckBox(h4,v+=16,0,"Reversinis PVM",RvrsVAT);
  end;
  if (HasExtTax) then begin
  CheckBox(h4,v+=16,0,"Nėra regiono mok.",NoTax2);
  end;
//CUST-BEGIN
  CheckBox(h4,v+=16,0,"Biudžetinė įstaiga (netaikomas PVM25)",NoRvrsVAT);
//CUST-END
  Tile(tilenr,110,false,tilenr,PLCode); tilenr = tilenr + 1;
  EditField(h,v=6,  80,"Pardavimo valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+=vs ,80,"Kainoraštis",Normal,PLCode,false,PLDefSClass);
    EditField(h,v+=vs ,80, "Nuolaidų lentelė",Normal,RebCode,false,RebSClass);
  if (HasSalesman or HasSalesmanBonus) then begin
  EditField(h,v+=vs,80,"Pardavėjas",Normal,SalesMan,false,UserSClass);
  end;
  EditField(h,v+=vs,80,"Pagr. prekės",Normal,CompItemCode,false,CompItemSClass);
  EditField(h2,v=6,80,"Pirk. valiuta",Normal,VECurncyCode,false,CurncyCodeSClass);
  EditField(h2,v+=2*vs ,80, "Tiek. nuolaidų lentelė",Normal,VERebCode,false,RebSClass);
  if (HasSalesGroup) then begin
  	EditField(h2,v+=vs,80,"Pard. grupė",Normal,SalesGroup,false,SalesGroupSClass);
  end;
  ButtonFrame(h5,v=24,150,3,"Kaina nustatoma pagal");
  RadioButton(h5,v,0,0,"Užsak. data",PriceBasedOn);
  RadioButton(h5,v+=16,1,0,"Plan. siunt. data",PriceBasedOn);
  RadioButton(h5,v+=16,2,0,"Siunt. data",PriceBasedOn);
  Tile(tilenr,180,false,tilenr,Comment); tilenr = tilenr + 1;
  EditField(h,v=6,-20,"Komentaras",Normal,Comment,false,0);
  EditField(h,v+=vs,-20,"Perspėjimas pard.",Normal,WarnText1,false,0);
  EditField(h,v+=vs,-20,"Perspėjimas perkant",Normal,VEWarnText1,false,0);
  EditField(h,v+=vs,120,"#PVM Reg. Nr.#",Normal,VATNr,false,0); 
  EditField(h2-20,v,120,"Įmonės kd.",Normal,RegNr1,false,0);
  ButtonFrame(h5+30,v+18,143,1,"Tipas"); 
  RadioButton(h5+30,v+18,0,0,"Įmonė",CustType); 
  RadioButton(h5+110,v+18,1,0,"Asmuo",CustType); 
  HalPushButton(h5+110+110,v+15,h5+110+110+100,v+15+20,"UpdCustomerAddressCUDsm","Atnaujinti adresą");
  v = v + vs;
  EditField(h,v,120,"Šalies PVM Reg. Nr.",Normal,CountryVATNr,false,0);
  EditField(h2-20,v,120,"#Reg. Nr. 2#",Normal,RegNr2,false,RegDefSClass); 
  EditField(h,v+=vs,120,"#PVM Nr.# Patikr. data",Normal,VATNrCheckDate,false,PasteCurDate); 
  EditField(h2-20,v,120,"GLN",Normal,RecipientGLN,false,0);  
  if (HasLocalization("HRV,SVN")) then begin 
    EditField(h,v+=vs,120,"Įst. forma",Normal,LegalForm,false,CULegalFormSClass); 
  end;
  EditField(h,v+=vs,45,"Pardavimo PVM kd.",Normal,VATCode,false,VATCodeSClass);
  if (HasTaxMatrix) then begin
    EditField(h2-20,v,50,"Pard. mok. šabl.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
  end;
  EditField(h,v+=vs,45,"Pirkimo PVM kd.",Normal,VEVATCode,false,VATCodeSClass);
  if (HasTaxMatrix) then begin
    EditField(h2-20,v,50,"Pirk. mok. šabl.",Normal,VETaxTemplateCode,false,TaxTemplateSClass);
  end;
  EditField(h,v+=vs,50,"Kalba",Normal,LangCode,false,LangSClass); 
  EditField(h2-20, v,50,"Verslo šaka",Normal,BusinessNature,false,BNSClass); 
  EditField(h,v+=vs, 260,"Verslo subjektas",Normal,BusinessEntity,false,SetSClass); 
  if (HasLocalization("ARG")) then begin
    ButtonFrame(h+125,v+=20,177,4,"Mok. sąlygos "); 
    RadioButton(h+125,v,2,0,"Nenuskaitoma",TaxCondition); 
    RadioButton(h+125,v+=16,0,0,"Vietinė",TaxCondition); 
    RadioButton(h+125,v+=16,1,0,"Daugiašalis susitarimas",TaxCondition); 
    RadioButton(h+125,v+=16,3,0,"Palengvintas mokesčių režimas",TaxCondition);
  end;  
  if (HasLocalization("BRA")) then begin 
    EditField(h,v+=vs,120,"SUFRAMA Reg. Nr.",Normal,SuframaRegNr,false,0);  
  end;
//  EditField(h,v+=vs,120,"Kanalas",Normal,WebServiceChannel,false,SetSClass);
  v = 130;
  v = VATZoneButtonsLabelslit(h5+30,v,170,16);
  Tile(tilenr,130,false,tilenr,AccAP); tilenr = tilenr + 1;
  EditField(h,v=6,80,"Kred. sąsk.",Normal,AccAP,false,AccSClass);
  EditField(h,v+=vs,80,"Savik. sąsk",Normal,AccCost,false,AccSClass);
  EditField(h,v+=vs,80,"Kred. avans. sąsk.",Normal,OnAccAccAP,false,AccSClass);
  EditField(h,v+=vs,120,"Pard. objektai",Normal,Objects,false,ObjSClass);
  EditField(h,v+=vs,120,"Pirk. objektai",Normal,VEObjects,false,ObjSClass); 
  // c:// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:01:55
  //EditField(h,v+=vs,50,"Mokėjimo kd.",Normal,PaymentCode,false,PaymentCodeSClass); 
    EditField(h,v+=vs,120,"#PVM Reg. Nr.#",Normal,VATNr,false,0); 
  // :c// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:01:56
  if (HasLocalization("HRV,HUN,POL,SRB,SLV,SVN")) then begin
		ButtonFrame(h,v+=40,150,3,"Įplaukos PVM"); 
		RadioButton(h,v,0,0,"Pagal nut.",IPBookVAT); 
		RadioButton(h,v+=16,1,0,"Skaič. PVM",IPBookVAT); 
		RadioButton(h,v+=16,2,0,"Neskaič. PVM",IPBookVAT); 
  end;
  EditField(h1,v=6,200,"IBAN kodas",Normal,IBANCode,false,0);
  EditField(h1,v+=vs,-20,"Sąsk. operatorius",Normal,AccOperator,false,BankSClass);
  EditField(h1,v+=vs,-20,"Banko sąsk.",Normal,BankAccount,false,0);
  EditField(h1,v+=vs,-20,"Banko sąsk. 2",Normal,Bank,false,0);
  // c:// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:02:09
  //EditField(h1,v+=vs,80,"#Trumpas kd.#",Normal,SortCode,false,0);
  EditField(h1,v+=vs,120,"Įmonės kd.",Normal,RegNr1,false,0);
  // :c// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:02:10
  if (HasWithholdingTax) then begin
  EditField(h1,v+=vs,120,"Pelno mokesčio mok. būdas",Normal,WithPayMode,false,PMSClass);
  end;
  if (HasLocalization("HRV,HUN,POL,SRB,SLV,SVN")) then begin
    ButtonFrame(h1,v+=60,150,3,"Įkelti mokėjimo PVM"); 
    RadioButton(h1,v,0,0,"Pagal nutylėjimą",OPBookVAT); 
    RadioButton(h1,v+=16,1,0,"Įkelti PVM",OPBookVAT); 
    RadioButton(h1,v+=16,2,0,"Nekelti PVM",OPBookVAT); 
  end;  
  Tile(tilenr,170,false,tilenr,ANACode); tilenr = tilenr + 1;
  StaticText(h,v=20,"E-faktūros",true);
  EditField(h,vm=(v+=10),80,"Pradžios data",Normal,ANACode,false,0);
  EditField(h,v+=vs,80,"Kita E-faktūros paskyra",Normal,eInvAlternativeAccount,false,0);

  ButtonFrame(h,v+=40,163,1,"Gavimo noras");
  RadioButton(h,v,kEInvoiceRcvPreferenceDefault,0,"Pagal nutylėjimą",eInvRcvPref);
  RadioButton(h,v+=16,kEInvoiceRcvPreferenceElectronic,0,"E-faktūra",eInvRcvPref);
  if (HasLocalization("LVA")) then begin
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceEMail,0,"E-paštas",eInvRcvPref); 
    RadioButton(h,v+=16,kEInvoiceRcvPreferencePaper,0,"Popierinė sąsk.",eInvRcvPref); 
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceInternetBank,0,"Interneto bankas",eInvRcvPref); 
  end else begin
  if (HasLocalization("FIN,NOR,SWE")) then begin
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceEMail,0,"E-laiškas",eInvRcvPref);
  end else begin
    RadioButton(h,v+=16,kEInvoiceRcvPreferencePaper,0,"Popierinė faktūra",eInvRcvPref);
    end;
  end;  
  if (Modb.InterCompany) then begin
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceInternal,0,"Vidinė kompanija",eInvRcvPref);
    EditField(h+130,v,30,"",Normal,eInvRcvToCompanyCode,false,Companies2SClass);
  end;
  RadioButton(h,v+=16,kEInvoiceRcvPreferenceNone,0,"Nesiųsti",eInvRcvPref);
  EndFrame;
  if (HasLocalization("EST,LTU")) then begin
    ButtonFrame(h,v+=40,143,1,"Alternatyvus kanalas");
    RadioButton(h,v,kEInvoiceRcvPreferenceDefault,0,"Nenaudotinas",eInvAltRcvPref);
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceElectronic,0,"E-faktūra",eInvAltRcvPref);
    RadioButton(h,v+=16,kEInvoiceRcvPreferencePaper,0,"Popierinė faktūra",eInvAltRcvPref);
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceEMail,0,"E-laiškas",eInvAltRcvPref);
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceInternetBank,0,"Interneto bankas",eInvAltRcvPref);
    EndFrame;
  end;
  vm2 = v;

  CheckBox(h1,v=vm,0,"Nesiųsti e-faktūrų",eInvStop);
  if (HasLocalization("FIN")==false) then begin
    CheckBox(h1,v+=16,0,"E-faktūros su pdf bylomis",eInvAttachPDF);
    ButtonFrame(h1,v+=44,160,3,"Siunt. kaštai pop. faktūroms");
  end else begin
    ButtonFrame(h1,v+=60,143,3,"Siunt. kaštai pop. faktūroms");
  end;
  RadioButton(h1,v,2,0,"Pagal nutylėjimą",eInvPostage);
  RadioButton(h1,v+=16,0,0,"Prioritetas",eInvPostage);
  RadioButton(h1,v+=16,1,0,"Ekonominis",eInvPostage);
  if (HasLocalization("EST,LTU")) then begin
    CheckBox(h1,v+=84,0,"E-faktūros trumpame apraše",eInvShortNote);
  end;
  StaticText(h,v=(vm2+40),"E-pirkimų užsakymai",true);
  ButtonFrame(h,v+=20,163,3,"Gavimo noras");
  RadioButton(h,v,kPORcvPreferenceNone,0,"Nieko",ePORcvPref);
  RadioButton(h,v+=16,kPORcvPreferenceDefault,0,"Pagal nutylėjimą",ePORcvPref);
  if (Modb.InterCompany) then begin
    RadioButton(h,v+=16,kPORcvPreferenceInternal,0,"Vidinė kompanija",ePORcvPref);
    EditField(h+130,v,30,"",Normal,ePORcvToCompanyCode,false,Companies2SClass);
  end;
  EndFrame;

  if (StandardHansa==false) then begin
    Tile(tilenr,70,false,tilenr,WebConf); tilenr = tilenr + 1;
  EditField(h,vm=(v=6),120,"Tinklo konferenc.",Normal,WebConf,true,0);
  EditField(h1,v,150,"Pagrindinė klasė",Normal,MainDispGroup,false,WebNGProductCatSClass);
  EditField(h,v+=vs,120,"Pradinis tinklapis",Normal,WebStartPage,false,0);
  EditField(h1,v,150,"Atvaizduoti tinkle",Normal,WebDisplays,false,WebDisplaySClass);
  EditField(h,v+=vs,120,"Frachto kodas",Normal,FreightCode,false,WebFreightSClass);
    EditField(h1,v,150,"Intern. objekto tipas",Normal,WebOTCode,false,OTSClass);
  end;
  Tile(tilenr,170,false,tilenr,Comment0); tilenr = tilenr + 1;
  EditField(h,v=6,-20,"Komentaras",Normal,Comment0,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment1,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment2,false,0);
  EditField(h,v+=vs,-20,"Titulas",Normal,Title,false,CourtesyTitlesSClass);
  EditField(h,v+=vs,-20,"Pareigos",Normal,JobDesc,false,JobTitleSClass);
  EditField(h,v+=vs,-20,"Pasveikinimas 1",Normal,Salutation1,false,0);
  EditField(h,v+=vs,-20,"Pasveikinimas 2",Normal,Salutation2,false,0);
  EditField(h,v+=vs,-20,"Pasveikinimas 3",Normal,Salutation3,false,0);
  if (true) then begin//HasModHotel
    Tile(tilenr,250,false,tilenr,DocType); tilenr = tilenr + 1;
  EditField(h,v=6,100,"Dok. tipas",Normal,DocType,false,CUDocTypeSClass);
  EditField(h2,v,-20,"Paso nr.",Normal,PassportNr,false,0);
  EditField(h2,v+=vs,-20,"Vardas dokumente",Normal,NameinDocument,false,0);
  //  EditFieldTL(h,vm=(v+=20),100,"Nationality",M4StrSet,Normal,423,Nationality,false,StrSetSClass);
  EditField(h,vm=(v+=20),100,"Tautybė",Normal,Nationality,false,CountrySClass);
  EditField(h,v+=20,100,"Gimtadienis",Normal,BirthDate,false,PasteCurDate);
  EditField(h,v+=20,100,"Gimimo vieta",Normal,BirthPlace,false,0); 
  EditField(h,v+=20,100,"Gimimo šalis",Normal,BirthCountry,false,CountrySClass); 
  EditField(h,v+=20,100,"Profesija",Normal,Profesion,false,0);
  EditField(h,v+=20,100,"Laikraščiai",Normal,Newspaper,false,NewspaperSClass);
  EditField(h,v+=20,100,"Slaptažodis",Normal,Passphrase,false,0);
  EditField(h,v+=vs,100,"Kelionių agent.",Normal,TourOperator,false,CUSClass);
  EditField(h,v+=vs,100,"Agentas",Normal,Agent,false,CUSClass);
  EditField(h,v+=vs,100,"Mok.būdas",Normal,DefGuestPayMode,false,PMSClass);
  EditField(h,v+=vs,100,"Užsakovas",Normal,BookOrigin,false,BookOrgSClass);
  EditField(h,v+=vs,300,"Dietos pastabos",Normal,DietRemarks,false,0);
  EditField(h,v+=vs,300,"Privalomos pastabos",Normal,RequirementRemarks,false,0);

  ButtonFrame(h2,v=vm+20,100,2,"Lytis");
  RadioButton(h2,v,0,0,"Vyras",Gender);
  RadioButton(h2,v+=17,1,0,"Moteris",Gender);

  CheckBox(h2+130,v=vm+20,0,"Rūko",Smoking);
  CheckBox(h2+130,v+=17,0,"Juodame sąraše",Blacklist);

  ButtonFrame(h2,vm=(v+=40),100,4,"Vedybinė padėtis");
  RadioButton(h2,v,0,0,"Nevedęs/Netek.",MarStatus);
  RadioButton(h2,v+=17,1,0,"Vedęs/Ištekėjusi",MarStatus);
  RadioButton(h2,v+=17,2,0,"Išsiskyręs/-usi",MarStatus);
  RadioButton(h2,v+=17,3,0,"Našlys/-ė",MarStatus);

  ButtonFrame(h2=h2+130,v=vm,100,3,"Amžius");
  RadioButton(h2,v,1,0,"Vaikas",AgeStatus);
  RadioButton(h2,v+=17,0,0,"Suaugęs",AgeStatus);
  RadioButton(h2,v+=17,2,0,"Pensininkas",AgeStatus);
  end;

  if (StandardHansa==false) then begin
    Tile(tilenr,270,false,tilenr,UserStr1); tilenr = tilenr + 1;
  v=6;h=180;
  label = UserDefined("CUVc","UserStr1");
  if (nonblank(label)) then begin
    EditField(h,v,-20,label,Normal,UserStr1,false,0);
  end;
  label = UserDefined("CUVc","UserStr2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserStr2,false,0);
  end;
  label = UserDefined("CUVc","UserStr3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserStr3,false,0);
  end;
  label = UserDefined("CUVc","UserStr4");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserStr4,false,0);
  end;
  label = UserDefined("CUVc","UserStr5");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserStr5,false,0);
  end;
  label = UserDefined("CUVc","UserVal1");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserVal1,false,0);
  end;
  label = UserDefined("CUVc","UserVal2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserVal2,false,0);
  end;
  label = UserDefined("CUVc","UserVal3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserVal3,false,0);
  end;
  label = UserDefined("CUVc","UserDate1");
  if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate1,false,PasteCurDate);
  end;
  label = UserDefined("CUVc","UserDate2");
  if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate2,false,PasteCurDate);
  end;
  label = UserDefined("CUVc","UserDate3");
  if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate3,false,PasteCurDate);
  end;

  EditField(h,v+=vs,-20,"Adresų kn.",Normal,AddressBooks,false,0);
  end;
  
  Tile(tilenr,500,false,tilenr,Math2); tilenr = tilenr + 1;
  CheckBox(50,v=6,0,"HTML",HtmlFlag); 
  StaticText(50,v+=30,"Žinutė",true);
  TextField(60,v-5,-20,370,Math2,0);
  if (CUr.CUType!=0 and HasCharts) then begin
    Tile(tilenr,430,false,tilenr,-); tilenr = tilenr + 1;
    ChartArea(10,6,-10,390,"$CUDCLass_BIChart");
    ColourPushButton(17,400,300,420,"LaunchFlexBI","Išbandykite flex.bi detaliai analitikai",kButtonColourBabyBlue);
  end;

  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    if (UserCanReport("CustPSRn","",true) and HasCustomerStatusReport) then begin
      SpecialMenu("Pirkėjo būklė",'e',0,"CUStatusCUDsm"); 
    end;
    if (UserCanReport("VEPSRn","",true)) then begin 
      SpecialMenu("Tiekėjo būklė",'u',4,"VEStatusVEDsm"); 
    end;
    SpecialMenu("Prijungti esamą kontraktą",' ',1,"AddContactCUDsm"); 
    SpecialMenu("Sukurti naują kontaktą",' ',1,"NewContactCUDsm"); 
    SpecialMenu("Sukurti veiklą",'c',2,"NewActCUDsm"); 
  end else begin
    if (UserCanReport("CustPSRn","",true) and HasCustomerStatusReport) then begin
  SpecialMenu("Pirkėjo būklė",'e',0,"CUStatusCUDsm");
  end;
  if (UserCanReport("VEPSRn","",true)) then begin
    SpecialMenu("Tiekėjo būklė",'u',4,"VEStatusVEDsm");
  end;
    SpecialMenu("Prijungti esamą kontaktą",' ',1,"AddContactCUDsm");
    SpecialMenu("Ištrinti prijungtą kontaktą",' ',1,"DelContactCUDsm");
    SpecialMenu("Redaguoti prijungto kontakto duomenis",' ',1,"EditContactCUDsm");
  SpecialMenu("Atnaujinti kontaktinius asmenis",' ',6,"UpdContactAddrCUDsm");
    if (HasLocalization("ARG")) then begin
      SpecialMenu("Atidaryti regionines rinkliavas",' ',1,"RPCUTaxDsm");
    end;
    if (HasLocalization("ARG,BRA,ITA,KEN,MEX,PRT,SGP,ZAF")) then begin
      SpecialMenu("Atidaryti sulaikytus tiekėjus",' ',1,"WHVEDsm");
    end; //EMZ
  if (GuiType==kGuiCocoa) then begin
    SpecialMenu("Kopijuoti į lokalią adresų knygelę",' ',7,"CopyToLocalAddressBookDsm");
  end;
  if (GuiType==kGuiiPhone) then begin
    SpecialMenu("Pakeisti slaptažodį",' ',1,"ChangePasswdCUDsm");
  end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
//    SpecialMenu("Activity",'c',2,"NewActCUDsm");
    SpecialMenu("Kontaktas",' ',1,"NewContactCUDsm");
    if (StandardHansa==false) then begin
      SpecialMenu("El. paštas",'m',5,"NewMailCUDsm");
    end;
    SpecialMenu("Objektas",' ',1,"CreateObjectCUDsm");
    SpecialMenu("Prarasto slaptaž. gavimo el.paštas",' ',3,"RandomPassMailCUDsm");
  end;
  EndWindow;
end;

window INLClass:3
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real pos;
  Integer rn;

  WindowBegin("Prekės",INLClass,CGmlist,-);
  SpawnClass(INDClass);
  SetWRect(64,80,609,298);
  Sizeable(-1,-1,0,0);
  UseView(INVc);
  // c:// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:02:37
  ColourPushButton(5,5,200,25,"WebItmBtn","Rodyti tik webshop prekes",2);
  RecordList(4,45,-21,-39);
  // :c// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:02:38
  RlColKey(4,4,    "Nr.",Code,false,Code);
  pos = 111;
  if (HasItemGroups) then begin
    RlColKey(pos,pos,"Grupė",Group,false,Group); 
    pos = 181;
  end;
  if (HasModIN) then begin
    RlColKey(pos,pos,"Aprašymas",Name,false,Name); 
  end else begin
    RlColKey(pos,pos,"Pavadinimas",Name,false,Name); 
  end;
  if (IsEnterprise) then begin
    RlColKey(-150,-150,"Alt. kodas",AlternativeCode,false,AlternativeCode); 
  end;
  if (HasModIN) then begin
    RlCol(-70,-70,"Bazinė kaina",UPrice1,true); 
  end else begin
    RlCol(-70,-70,"Kaina",UPrice1,true); 
  end;
  SearchField("Ieškoti");
  if (GuiType==kGuiMetro) then begin
    RowMenuBegin("");
    if (HasModIN) then begin
      if (UserCanReport("INInfoRn","",true)) then begin
        RowMenuItem(0,"Prekės būklės ataskaita",'I','I',4315,"OKIVLsm");
      end;
      RowMenuItem(0,"Prekės būklė",' ',' ',4315,"ItemStatusINLsm");
    end;
    if (HasModIN) then begin
      if (UserCanReport("INrsRn","INrsRClass",true)) then begin
        RowMenuItem(0,"Prekės istorija",'h','h',4315,"INHistINLsm");
      end;
    end;
    if (HasJewelleryInterface) then begin
      RowMenuItem(0,"Prekės būklė alternatyviam kodui",'I','I',4315,"ItemStatusAltINLsm");
    end;
    EndRowMenu;
    SpecMenuGroup("",kSpecMenuGroupTypeButtonsInBottomBarRight,0);
    SpecialMenuWithIcon("Ieškoti",'F',4313,2,"INSearchLsm");
  end else begin
    if (HasModIN) then begin
      if (UserCanReport("INInfoRn","",true)) then begin
        SpecialMenu("Prekės būklės ataskaita",'i',0,"INStatusINLsm");
      end;
      SpecialMenu("Prekės būklė",'I',1,"ItemStatusINLsm");
    end;
    if (HasModIN) then begin
      if (UserCanReport("INrsRn","INrsRClass",true)) then begin
        SpecialMenu("Prekės istorija",'h',2,"INHistINLsm");
      end;
    end;
    SpecialMenu("Ieškoti",'F',2,"INSearchLsm");
    if (HasJewelleryInterface) then begin
      SpecialMenu("Prekės būklė alternatyviam kodui",'I',5,"ItemStatusAltINLsm");
    end;
  end;
  EndWindow;
end;

window INWebLClass:3
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real pos;
  Integer rn;

  WindowBegin("Prekės",INWebLClass,CGmlist,-);
  SpawnClass(INDClass);
  SetWRect(64,80,609,298);
  Sizeable(-1,-1,0,0);
  UseView(INVc);
  ColourPushButton(5,5,200,25,"AllItmBtn","Visos prekės",2);
  RecordList(4,45,-21,-39);
  RlColKey(4,4, "Web Nr.",Code,false,WebCode);
  pos = 111;
  RlColKey(pos,pos,"Web Grupė",Group,false,WebGroup); 
  pos = 181;
  RlColKey(pos,pos,"Web Pavadinimas",Name,false,WebName); 
  RlColKey(-150,-150,"Web Alt. kodas",AlternativeCode,false,WebAltCode); 
  RlCol(-70,-70,"Web Kaina",UPrice1,true); 
  SearchField("Ieškoti");
  SpecialMenu("Prekės būklės ataskaita",'i',0,"INStatusINLsm");
  SpecialMenu("Prekės būklė",'I',1,"ItemStatusINLsm");
  SpecialMenu("Prekės istorija",'h',2,"INHistINLsm");
  SpecialMenu("Ieškoti",'F',2,"INSearchLsm");
  EndWindow;
end;

window INDClass:8
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  integer tilenr;
  real h,h1,h2,h3,h4,h5,h6,v,vm,vs;
  string 255 label;
  record CYBlock CYb;
  LongInt bm,lt,rt,tp;
  
  BlockLoad(CYb);
  WindowBegin("Prekė",INDClass,CGview,-);
  SetWRect(20,80,830,400);
  Sizeable(-1,-1,-1,0);
  DynamicWindow;
  UseView(INVc);
  if (GuiType==kGuiAndroid) then begin
    ToolBar;
    PushButton(-110,5,-10,25,ToolImagePicker,"Paveiksliukas");
    EndToolBar;
  end;

  if (HasJewelleryInterface) then begin
    Tile(0,107,false,"",Code); 
  end else begin
  Tile(0,87,false,"",Code);
  end;
  v = 6; vs = 20; h = 155; h1 = 300; h2 = 385; h3 = 395; h4 = 285; h5 = 433;
  EditField(h,v, 150,"Nr.",Normal,Code,false,0);
  EditField(h2,v,80,"Grupė",Normal,Group,false,ITSClass);
  EditField(h,v+=vs,-40,"Aprašymas",Normal,Name,false,0);
  if (HasJewelleryInterface) then begin
    EditField(h,v+=vs,150,"Alternatyvus kodas",Normal,AlternativeCode,false,0); 
  end;
  tilenr = 1;
  TileButton(tilenr,"Kainos"); tilenr = tilenr + 1;
  if (HasJewelleryInterface) then begin
    TileButton(tilenr,"Juvelyrika"); tilenr = tilenr + 1; 
    TileButton(tilenr,"Laikrodis"); tilenr = tilenr + 1;  //!!Sd;
  end;
  TileButton(tilenr,"Atsargos"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
  TileButton(tilenr,"Sandėlis"); tilenr = tilenr + 1;
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
  TileButton(tilenr,"Savikaina"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Gamyba"); tilenr = tilenr + 1;
  TileButton(tilenr,"Sąsk."); tilenr = tilenr + 1;
  if (GuiType==kGuiiPhone) then begin
    TileButton(tilenr,"Paveiksliukas"); tilenr = tilenr + 1; 
  end;
  TileButton(tilenr,"Įvairovės"); tilenr = tilenr + 1;
  TileButton(tilenr,"Tekstas"); tilenr = tilenr + 1;
  TileButton(tilenr,"Savik. sk."); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
  TileButton(tilenr,"Vart. laukai"); tilenr = tilenr + 1;
  end;
//   TileButton(tilenr,"Žinutės"); tilenr = tilenr + 1;// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:03:25
  if (HasCharts) then begin
  TileButton(tilenr,"BI"); tilenr = tilenr + 1;  
  end;
  TileButton(tilenr,"WebShop"); tilenr = tilenr + 1;// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:03:31
  tilenr = 1;
  CheckBox(h,v+=vs,0,"Uždaryta",Terminated);
  CheckBox(h2,v,0,"Neparduodama",NotForSales);
  if (GuiType==kGuiiPhone) then begin
    GetScreenSize(CurWindow,tp,lt,bm,rt);
    Pict_Field(5,v+=20,rt-10,bm-10,""); 
  end;  
  CheckBox(h2+150,v,0,"WebShop prekė",WebItem);// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:03:59
  Tile(tilenr,209,false,tilenr,Unittext); tilenr = tilenr + 1;
  EditField(h,v=6 ,100,"Vienetas",Normal,Unittext,false,UnitSClass);
  if (HasJewelleryInterface) and (UserCanAction("ViewCostPrice",true)) then begin
    EditField(h,v+=vs,100,"Savikaina",Normal,InPrice,true,0);  
  end;
  EditField(h,v+=vs,100,"Kaina",Normal,UPrice1,true,0);
  //START-CUST PST 2015-November-12// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:04:17
  EditField(h,v+=vs,100,"Sena kaina",Normal,OldPrice,true,0);
  //END-CUST PST 2015-November-12// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:04:17
  EditField(h,v+=vs,100,"Kainos pasikeitimas",ViewOnly,LastBasePriceChange,true,0);
  EditField(h,v+=vs,100,"Kainos faktorius",Normal,PriceFactor,true,0);
  EditField(h,v+=vs,100, "Prekės formulė",Normal,CalcPrice,false,CPMSClass);
  EditField(h,v+=vs,100,"Antkainio %",Normal,Markup,true,0);
  EditField(h,v+=vs,100,"Premijos %",Normal,Bonus,true,0);
  EditField(h,v+=vs,-240,"Objektai",Normal,Objects,false,ObjSClass);
  if (HasItemClassification) then begin
  EditField(h,v+=vs,-240,"Klasės",Normal,DispGroups,false,DISClass);
  end;
  if (StandardHansa==false) then begin
  ButtonFrame(h1,v=24,120,4,"Prekės tipas");
  end else begin
    ButtonFrame(h1,v=24,120,3,"Prekės tipas"); 
  end;
  RadioButton(h1,v,kItemTypePlain,0,"Paprasta",ItemType);
  RadioButton(h1,v+=16,kItemTypeStocked,0,"Sandėliuojama",ItemType);
  RadioButton(h1,v+=16,kItemTypeStructured,0,"Struktūrinė",ItemType);
  if (StandardHansa==false) then begin
  RadioButton(h1,v+=16,kItemTypeService,0,"Paslauga",ItemType);
  end;
  EndFrame;
  
  Pict_Field(-205,8,-35,178,"");
  if (GuiType==kGuiCocoa) then begin
    PushButton(-160,182,-80,202,ToolImagePicker,"Pridėti pav.");  
  end;
  if (StandardHansa==false) then begin
  CheckBox(h1,v+=32,0,"Prekė - projekto medžiaga",ItemMaterial);
  end;
  if (HasJewelleryInterface) then begin
    Tile(tilenr,110,false,tilenr,Metal); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Metalas",Normal,Metal,false,0);  
    EditField(h,v+=vs, 140,"Svoris",Normal,RowWeight,false,0);  
    EditField(h,v+=vs, 140,"Dydis",Normal,Size,false,0);  
    EditField(h,v+=vs, 140,"Ilgis",Normal,Length,false,0);  
    EditField(h,v+=vs, 140,"Nuoroda",Normal,Reference,false,0);  
    v = 6; 
    EditField(h5,v, 140,"Pagr. akmens info",Normal,MajStoneDet,false,0);  
    EditField(h5,v+=vs, 140,"Spalva",Normal,Colour,false,0); 
    EditField(h5,v+=vs, 140,"Ryškumas",Normal,Clarity,false,0);  
    EditField(h5,v+=vs, 140,"Sertifikatas",Normal,Cert,false,0);  
    EditField(h5,v+=vs, 140,"Pap. akmens info",Normal,MinStoneDet,false,0);  
    Tile(tilenr,90,false,tilenr,WatchBrand); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Gamintojas",Normal,WatchBrand,false,0);  
    EditField(h,v+=vs, 140,"Stilius",Normal,StyleName,false,0);  
    EditField(h,v+=vs, 140,"Metalas",Normal,WatchMetal,false,0);  
    EditField(h,v+=vs, 140,"Judėjimas",Normal,Movement,false,0);  
    v = 6; 
    EditField(h5,v, 140,"Dirželis",Normal,BrcStr,false,0); 
    EditField(h5,v+=vs, 140,"Lytis",Normal,Gender,false,0);  
    EditField(h5,v+=vs, 140,"Kita",Normal,Other,false,0);  
    EditField(h5,v+=vs, 140,"Kita 2",Normal,Other2,false,0);  
  end;
  Tile(tilenr,170,false,tilenr,MinLevel);  tilenr = tilenr + 1; // Need to clean this Tile up!
  v = 6;
  vm = v;
  ButtonFrame(h1,v+=24,143,3,"Serijinio nr. kontrolė");
  RadioButton(h1,v,0,0,"Nėra",SerNrf);
  RadioButton(h1,v+=16,1,0,"Vnt.",SerNrf);
  RadioButton(h1,v+=16,2,0,"Siuntos",SerNrf);
    CheckBox(h1+200,v,0,"Nereikalauti siuntos nr. POS faktūrose",DonotRequireBatchNrOnIVCash);
  EditField(h,v=6,100,"Min. lygis",Normal,MinLevel,true,0);
  EditField(h,v+=vs,100,"Maks. lygis",Normal,MaxLevel,true,0);
  EditField(h,v+=vs  ,100,"Skyrius",Normal,Department,false,DepSClass);
  EditField(h,v+=vs  ,100,"Lentynos kodas",Normal,InvCode,false,0);
  EditField(h,v+=vs,100,"Šaltinis, nenur. kitaip",Normal,DefaultSource,false,SourceSClass);
  EditField(h5,v ,50,"Aplinkos aps. mokestis/kg.",Normal,RepaPricePerWeight,true,0);
  EditField(h6=650,v ,80,"Pagrindinis Užsk. tipas",Normal,DefOrderType,false,SetSClass);
  if (StandardHansa==false) then begin
  EditField(h,v+=vs ,100,"Rizikos lygis",Normal,HazLevCode,false,HazLevSClass);
  EditField(h5,v ,50,"Alkoholio %",Normal,AlcPrc,true,0);
    if (HasLocalization("PRT")) then begin
    EditField(h6,v, 80,"Atsargų prek. tipas",Normal,StockItemType,false,SetSClass);
    end;
  end;
  EditField(h,v+=vs ,100,"Vnt. 2",Normal,Unittext2,false,UnitSClass);
  EditField(h5,v ,50,"Konversija 1",Normal,Conversion1,true,0);
  EditField(h,v+=vs,100,"Vnt. koeficientas",Normal,UnitCoefficient,true,0);
  EditField(h5,v ,50,"Konversija 2",Normal,Conversion2,true,0);
  if (StandardHansa==true) then begin
    EditField(h,v+=vs ,50,"Prekės plotis",Normal,Width,true,0); 
    EditField(h4,v ,50,"Aukštis",Normal,Height,true,0); 
    EditField(h5,v ,50,"Gylis",Normal,Depth,true,0); 
    EditField(h,v+=vs ,50,"Prekės tūris",Normal,Volume,true,0); 
    EditField(h4,v ,50,"Tankumas",Normal,Density,true,0); 
    EditField(h5,v ,50,"Svoris",Normal,Weight,true,0); 
  end;
  if (StandardHansa==false) then begin
  Tile(tilenr,170,false,tilenr,LocArea);  tilenr = tilenr + 1;
  EditField(h,vm=(v=6) ,100,"Pagrindinė paletės prekė",Normal,DefPalletItem,true,INSClass);
  EditField(h5,v ,80,"Pakrovimo sritis",Normal,PickArea,false,LocAreaSClass);
  EditField(h,v+=vs ,100,"Pagr. patalpos sritis",Normal,LocArea,false,LocAreaSClass);
  EditField(h5,v ,50,"Palečių pakrov. srityje",Normal,PalletsInPickArea,true,0);
  EditField(h,v+=vs ,50,"Maks. kiekis paletėje",Normal,QtyonPallet,true,0);
  EditField(h4,v ,50,"Paletės sl.",Normal,PalletLayers,true,0);
  EditField(h5,v ,50,"Kiekis sluoksnyje",Normal,QtyonPalletLayer,true,0);
  EditField(h,v+=vs ,50,"Pal. plotis",Normal,PalletWidth,true,0);
  EditField(h4,v ,50,"Pal. aukštis",Normal,PalletHeight,true,0);
  EditField(h5,v ,50,"Pal. gylis",Normal,PalletDepth,true,0);
  EditField(h,v+=vs ,50,"Viet. plotis",Normal,DefPosWidth,true,0);
  EditField(h4,v ,50,"Viet. aukštis",Normal,DefPosHeight,true,0);
  EditField(h5,v ,50,"Viet. gylis",Normal,DefPosDepth,true,0);
  EditField(h,v+=vs ,50,"Plotis",Normal,Width,true,0);
  EditField(h4,v ,50,"Aukštis",Normal,Height,true,0);
  EditField(h5,v ,50,"Gylis",Normal,Depth,true,0);
  EditField(h,v+=vs ,50,"Tūris",Normal,Volume,true,0);
  EditField(h4,v ,50,"Tankis",Normal,Density,true,0);
  EditField(h5,v ,50,"Neto svoris",Normal,NetWeight,true,0);
  EditField(h5,v+=vs ,50,"Svoris",Normal,Weight,true,0);
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
  Tile(tilenr,190,false,tilenr,InPrice);  tilenr = tilenr + 1;
  EditField(h,vm=(v=6),100,"Savikaina",Normal,InPrice,true,0);
  if (StandardHansa==false) then begin
  EditField(h5,v,70,"Savik. pasikeitimas",ViewOnly,LastPriceChange,true,0);
  end else begin
    EditField(h3,v,70,"Savik. pasikeitimas",ViewOnly,LastPriceChange,true,0); 
  end;
  if (StandardHansa==false) then begin
  EditField(h,v+=vs ,100,"Savik. bazine val. 2",Normal,InPriceB2,true,0);
  ButtonFrame(h1,v+=24,200,4,"Savik. atnaujinimas po gavimo");
  end else begin
    ButtonFrame(h1,v+=40,210,4,"Savik. atnaujinimas po gavimo"); 
  end;
  RadioButton(h1,v,0,0,"Nėra",UpdateCost);
  RadioButton(h1,v+=16,1,0,"Paskutinio pirkimo kaštai(su pap. kašt.)",UpdateCost);
  RadioButton(h1,v+=16,2,0,"Svertinis vidurkis",UpdateCost);
  RadioButton(h1,v+=16,3,0,"Paskutinio pirkimo kaštai(be pap. kašt.)",UpdateCost);
  ButtonFrame(h5=540,v=v-3*16,200,3,"Atnaujinti savik. Sand. perkainavimuose");
  RadioButton(h5,v,0,0,"Neatnaujinti",SRUpdateCost);
  RadioButton(h5,v+=16,1,0,"Paskutinio perkainavimo savik.",SRUpdateCost);
  RadioButton(h5,v+=16,2,0,"Svert. vidurkis",SRUpdateCost);
  if (StandardHansa==false) then begin
  EditField(h,v=vm+2*vs,100,"Papildomi kaštai",Normal,ExtraCost,true,0);
  end else begin
    EditField(h,v=vm+vs,100,"Papildomi kaštai",Normal,ExtraCost,true,0); 
  end;
  EditField(h,v+=vs ,100,"Svertinis vid.",Normal,WeighedAvPrice,true,0);
  if (StandardHansa==false) then begin
  EditField(h,v+=vs ,100,"Svertinis vid. bazine val. 2",Normal,WeighedAvPriceB2,true,0);
  end;
  EditField(h,v+=vs ,100,"Pask. pirkimo kaštai(su pap. kašt.)",Normal,LastPurchPrice,true,0);
  EditField(h,v+=vs ,100,"Pask. pirkimo kaina(be. pap. kašt.)",Normal,LastPurchPrice2,true,0);
  EditField(h,v+=vs ,100,"Pask. pirkimo val.",Normal,LastPurchCurncyCode,false,CurncyCodeSClass);
  EditField(h,v+=vs ,100,"Fiksuotas frachtas",Normal,FixedFreight,true,0);
  CheckBox(h1,v,0,"Įtraukti fiksuotą prekės frachtą",InclItemFreight);
  CheckBox(h5,v,0,"Turi akcizą",HasExcise);   
  end;
  Tile(tilenr,170,false,tilenr,Recepy);  tilenr = tilenr + 1;
  EditField(h,v=6 ,120,"Ruošinys",Normal,Recepy,false,RecSClass);
  CheckBox(h1,v,0,"Rodyti komponentus dokumentuose",ExplodeRec); // "Show components on documents" is better English but VERY confusing
  EditField(h,v+=vs ,120,"Faktūros ruošinys",Normal,InvRecepy,false,RecSClass);
  EditField(h2,v,150,"Brūkšn. kodas",Normal,BarCode,false,0);
  EditField(h,v+=vs ,120,"Kontrakto prekė",Normal,ContractItem,false,INSClass);
  EditField(h2,v,150,"Nomenklatūros kod.",Normal,EUCodex,false,CommoditySClass);
  v = v + vs;
  if (StandardHansa==false) then begin
    EditField(h,v,120,"Nuomos faktūravimas",Normal,RentalItem,false,INSClass); 
  end;
  EditField(h2,v,150,"ECN kodas",Normal,EKNCode,false,0); // i think it is same as Commodity Code
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,150,"Produktų ir paslaugų klasės",Normal,CPSCode,false,0);
  end;
  if (HasLocalization("LVA")) then begin
    EditField(h,v+=vs,55,"Fiskalinis Departamentas",Normal,FiscalDep,false,0); 
  end;
  EditField(h,v+=vs ,120,"Garantija mėn.",Normal,WarrantyLength,true,0);
  // c:// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:04:48
  //EditField(h2,v,150,"Spalva",Normal,colnr,false,SetSClass);
  EditField(h2,v,150,"Spalva",Normal,Color,false,ItemColorSClass);
  //START-CUST PST 2015-November-12// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:04:49
  EditField(h2+200,v+vs,150,"Prefiksas(ta pati prekė, skirtinga spalva)",Normal,SameItem,false,0);
  //END-CUST PST 2015-November-12// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:04:50
  EditField(h,v+=vs,120,"Rūšiav. kodas",Normal,SortCode,true,0); //!!TRANSLATE
  EditField(h,v+=vs,-40,"Alt. kodas",Normal,AlternativeCode,false,0);
  EditField(h,v+=vs,-40,"Perspėjimas",Normal,WarnText1,false,0);
  Tile(tilenr,170,false,tilenr,SalesAcc);  tilenr = tilenr + 1;
  v = 6;
  vm = v;
  EditField(h,vm,55,"Vietinė pard. sąsk.",Normal,SalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,VATZoneNameLIT & "Pardavimų sąsk.",Normal,EUSalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Ne ES pard. sąsk.",Normal,ExpSalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
  EditField(h,v+=vs,55,"Pasl. fakt. pard sąsk.",Normal,SVOInvbleSalesAcc,false,AccSClass); 
//     EditField(h,v+=vs,55,"Serv. Warranty Sales A/C",Normal,SVOWarrantySalesAcc,false,AccSClass);
//     EditField(h,v+=vs,55,"Serv. Contract Sales A/C",Normal,SVOContractSalesAcc,false,AccSClass);
//     EditField(h,v+=vs,55,"Serv. Goodwill Sales A/C",Normal,SVOGoodwillSalesAcc,false,AccSClass);
  end;
  EditField(h,v+=vs,55,"Komponentų panaudojimas",Normal,CompUsage,false,AccSClass);
  EditField(h,v+=vs,55,"Proj. medžiagų pan. sąsk.",Normal,ProjMaterialsUsageAcc,false,AccSClass); 

  EditField(h2=360,v=vm,55,"Viet. savik. sąsk.",Normal,CostAcc,false,AccSClass);
 EditField(h2,v+=vs,55,VATZoneNameLIT & "Savikainos sąsk.",Normal,EUCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Ne ES savik. sąsk.",Normal,ExpCostAcc,false,AccSClass);
  if (StandardHansa==false) then begin
  EditField(h2,v+=vs,55,"Pasl. fakt. savik. sąsk.",Normal,SVOInvbleCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Pasl. garant. savik. sąsk.",Normal,SVOWarrantyCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Pasl. sut. savik. sąsk.",Normal,SVOContractCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Pasl. Goodwill savik. sąsk.",Normal,SVOGoodwillCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Viešb. WIP sąsk.",Normal,HotelWIPAcc,false,AccSClass); 
  end;
  EditField(h2=540,v=vm,45,"Viet. PVM kd.",Normal,VATCode,false,VATCodeSClass);
  EditField(h2,v+=vs,45,VATZoneEditFieldLabel_LIT(1) & "PVM kd.",Normal,VATCodeEU,false,VATCodeSClass);
  EditField(h2,v+=vs,45,"Ne ES PVM kd.",Normal,VATCodeExp,false,VATCodeSClass);
  if (HasExtTax) then begin
  CheckBox(h2,v+=20,0,"Skaičiuoti percepc.mokesčius",Perceptions);
  end;
  if (StandardHansa==false) then begin
    if (HasWithholdingTax) then begin
   CheckBox(h2,v+=16,0,"Skaičiuoti sulaikymo mokesčius",Withholdings);
    end;
    if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
  EditField(h2=670,v=vm,50,"Viet. mok. šabl.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
      EditField(h2,v+=vs,50,VATZoneEditFieldLabel_LIT(1) & "Mok. šabl.",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass);
  EditField(h2,v+=vs,50,"Eksp. mok. šabl.",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass);
    end;
    v = vm; h2=700;
    if (HasLocalization("GBR,LTU,POL,LVA")) then begin
      EditField(h2,v,45,"Reversinis PVM kodas",Normal,RvrsVATCode,false,VATCodeSClass); v = v + vs;
    end;
//CUST-BEGIN
    EditField(h2,v,45,"Gavimo PVM kodas",Normal,PUVATCode,false,VATCodeSClass); v = v + vs;
//CUST-END
    if (HasLocalization("SWE")) then begin
      EditField(h2,v,45,"Cheminis mokesčių kodas",Normal,ChemicalTaxCode,false,ChemicalTaxCodeSClass); v = v + vs;
    end;
    if (HasLocalization("ITA")) then begin
      EditField(h2,v=vm,55,"Fiskalinis Departmentas",Normal,FiscalDep,false,0);
    end;

  end;
  if (GuiType==kGuiiPhone or GuiType==kGuiAndroid) then begin
    Tile(tilenr,70,false,tilenr,-);  tilenr = tilenr + 1;
    AttachmentDisplay(10,10,200,200);
//    PushButton(30,10,-80,40,ToolImagePicker,"Take picture");
//    ControlLabel(0,0,0,0,"Take picture","SystemFont",17,kTextStyleBold,AdjCenter,patM4ReportsTextBlue);
  end;
  Tile(tilenr,70,false,tilenr,VARMask);  tilenr = tilenr + 1;
  EditField(h,v=6,-40,"Įvairovių šablonas",Normal,VARMask,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Ataskaitos eilė",Normal,VARRepOrder,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Poaibiai",Normal,VARSubsets,false,VARSubsetsSClass);
  Tile(tilenr,120,true,tilenr,Math);  tilenr = tilenr + 1;
  v = 24;
  MatrixBegin(4,v,-32,-40,-,99);
  MatCol(1,24,"Kalba",0,LangCode,false,LangSClass);
  MatCol(1,94,"Tekstas",0,Text,false,0);
  EndMatrix;
  Tile(tilenr,220,false,tilenr,CostPerc);  tilenr = tilenr + 1;
  ButtonFrame(h=100,vm=(v=20),230,6,"Pirminis savikainos modelis");
  RadioButton(h,v,0,0,"Pagal nutylėjimą",PrimaryCostModel);
  RadioButton(h,v+=16,1,0,"Įsigijimo kaina",PrimaryCostModel);
  RadioButton(h,v+=16,2,0,"% _nuo bazinės kainos",PrimaryCostModel);
  EditField(h+150,v,55,"%",Normal,CostPerc,true,0);
  RadioButton(h,v+=16,3,0,"Svertinis vidurkis",PrimaryCostModel);
  RadioButton(h,v+=16,4,0,"Eilė",PrimaryCostModel);
  RadioButton(h,v+=16,kCostModelNoneItem,0,"Jokio",PrimaryCostModel);
  ButtonFrame(h,v+=40,230,3,"Eilės savikainos modelis");
  RadioButton(h,v,0,0,"Pagal nutylėjimą",QueuedCostModel);
  RadioButton(h,v+=16,1,0,"F_IFO",QueuedCostModel);
  RadioButton(h,v+=16,2,0,"LIFO",QueuedCostModel);

  ButtonFrame(h2=380,v=vm,200,3,"Savikaina serijiniams nr.");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",FIFOPerSerialNr);
  RadioButton(h2,v+=16,1,0,"Savikaina ne serijiniams nr.",FIFOPerSerialNr);
  RadioButton(h2,v+=16,2,0,"Savikaina serijiniams nr.",FIFOPerSerialNr);
  ButtonFrame(h2,v+=40,200,3,"Eilės modelis pagal patalpą");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",FIFOPerLocation);
  RadioButton(h2,v+=16,1,0,"Eilė ne pagal patalpą",FIFOPerLocation);
  RadioButton(h2,v+=16,2,0,"Eilė pagal patalpą",FIFOPerLocation);
  ButtonFrame(h2,v+=40,200,3,"Svertinis vid. pagal patalpą");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",WAPerLocation);
  RadioButton(h2,v+=16,1,0,"Svert. vid. ne pagal patalpą",WAPerLocation);
  RadioButton(h2,v+=16,2,0,"Svert. vid. pagal patalpą",WAPerLocation);
/*5.3
  ButtonFrame(h2,v+=40,200,3,"Savikaina patalpai");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",CostPricePerLocation);
  RadioButton(h2,v+=16,1,0,"Savikaina ne pagal patalpą",CostPricePerLocation);
  RadioButton(h2,v+=16,2,0,"Savikaina patalpai",CostPricePerLocation);
*/
  if (StandardHansa==false) then begin
    Tile(tilenr,240,false,tilenr,-); tilenr = tilenr + 1;
  h = 180; v = 6;
  label = UserDefined("INVc","UserStr1");
  if (nonblank(label)) then begin
    EditField(h,v=6 ,-40,label,Normal,UserStr1,false,0);
  end;
  label = UserDefined("INVc","UserStr2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-40,label,Normal,UserStr2,false,0);
  end;
  label = UserDefined("INVc","UserStr3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-40,label,Normal,UserStr3,false,0);
  end;
  label = UserDefined("INVc","UserStr4");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-40,label,Normal,UserStr4,false,0);
  end;
  label = UserDefined("INVc","UserStr5");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-40,label,Normal,UserStr5,false,0);
  end;
  label = UserDefined("INVc","UserVal1");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,UserVal1,true,0);
  end;
  label = UserDefined("INVc","UserVal2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,UserVal2,true,0);
  end;
  label = UserDefined("INVc","UserVal3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,UserVal3,true,0);
  end;
  label = UserDefined("INVc","UserDate1");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,80,label,Normal,UserDate1,true,PasteCurDate);
  end;
  label = UserDefined("INVc","UserDate2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,80,label,Normal,UserDate2,true,PasteCurDate);
  end;
  label = UserDefined("INVc","UserDate3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,80,label,Normal,UserDate3,true,PasteCurDate);
  end;
  end;
  // c: removed// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:05:05
//   Tile(tilenr,400,false,tilenr,Math2); tilenr = tilenr + 1;
//   StaticText(50,v=20,"Žinutė",true);
//   TextField(60,v-5,-20,370,Math2,0);
  // :c// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:05:06
  if (HasCharts) then begin
    Tile(tilenr,430,false,tilenr,-); tilenr = tilenr + 1;
    ChartArea(10,6,-10,390,"$INDCLass_BIChart");
    ColourPushButton(17,400,300,420,"LaunchFlexBI","Išbandykite flex.bi detaliai analitikai",kButtonColourBabyBlue);
  end;
  //START-CUST PST 2016-March-09// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:05:29
  Tile(tilenr,400,false,tilenr,WebProducer); tilenr = tilenr + 1;
  EditField(h+200,v=20,100,"Prefiksas(ta pati prekė, skirtinga spalva)",Normal,SameItem,false,SameItemSClass);
  EditField(h+200,v+=vs,100,"Senoji kaina",Normal,ReducedPrice,false,0);
  EditField(h+200,v+=vs,100,"Pristatymo terminas",Normal,DeliveryTerm,false,0);
  label = UserDefined("INVc","UserVal1");//MDS: HAL-180
  // EVS: HAL-202
  if (blank(label)) then begin
    label = "Eiliškumas";
  end;
  // :EVS
  if (nonblank(label)) then begin
    EditFieldTL(h+200,v+=vs,100,label,M4Val,Normal,0,UserVal1,true,0); // EVS: HAL-202 moved and tl function used
  end;//:MDS
  
  EditField(h,v+=vs+20,250,"Spalva",Normal,WebColor,false,0);
  EditField(h,v+=vs,250,"Klaviatūros kalba",Normal,WebKeyLang,false,0);
  EditField(h,v+=vs,250,"Gamintojas",Normal,WebProducer,false,0);
  EditField(h,v+=vs,-20,"Suderinamumas",Normal,WebSync,false,0);
  EditField(h,v+=vs,250,"Tipas",Normal,WebType,false,0);
  EditField(h,v+=vs,250,"Ekranas",Normal,WebScreen,false,0);
  EditField(h,v+=vs,250,"Procesorius",Normal,WebProcesor,false,0);
  EditField(h,v+=vs,250,"Atmintis",Normal,WebMemory,false,0);
  EditField(h,v+=vs,250,"Talpa",Normal,WebCapacity,false,0);
  EditField(h,v+=vs,250,"Grafika",Normal,WebGraphic,false,0);
  EditField(h,v+=vs,250,"Kamera",Normal,WebCamera,false,0);
  EditField(h,v+=vs,250,"Jungtys",Normal,WebConnection,false,0);
  EditField(h,v+=vs,250,"Cellular",Normal,WebCellular,false,0);
  EditField(h,v+=vs,250,"Belaidis ryšys",Normal,WebWireles,false,0);
  EditField(h,v+=vs,250,"Akumuliatorius",Normal,WebBatery,false,0);
  EditField(h,v+=vs,250,"Svoris",Normal,WebWeigth,false,0);
  EditField(h,v+=vs,250,"Medžiaga",Normal,WebMaterial,false,0);
  EditField(h,v+=vs,250,"Atsparumas drėgmei",Normal,WebResistance,false,0);
  EditField(h,v+=vs,-20,"Pakuotėje",Normal,WebPacked,false,0);
  EditField(h,v+=vs,-20,"Kita informacija",Normal,WebOtherInf,false,0);
  StaticText(h-130,v+35,"PLATUS APRAŠYMAS",false);
  TextField(h,v+=vs,-20,-20,Math2,0);
  //END-CUST PST 2016-March-09// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:05:32
  if (UserCanReport("INInfoRn","",true)) then begin 
  SpecialMenu("Prekės būklės ataskaita",'I',0,"INStatusINDsm");
  end;
//  SpecMenuItem("Perskaičiuoti kainoraštį",' ',2);
  if (UserCanReport("INrsRn","INrsRClass",true)) then begin 
    SpecialMenu("Prekės istorija",'h',3,"INrsRn_INSm");//CMD H DOES HIDE HANSA
  end;
  SpecialMenu("Prekės patalpoje būklė",' ',4,"LocItemStatDsm");
  if (HasJewelleryInterface) and (UserCanReport("INInfoRn","",true)) then begin 
    SpecialMenu("Prekės būklė per alt. kodą",'S',5,"ItemStatusAltINDsm"); 
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Sukurti perkamą prekę",' ',1,"PIFromINDsm");
  SpecialMenu("Sukurti ruošinį",' ',2,"RecFromINDsm");
  EndWindow;
end;

window PMSClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer") 
begin
  WindowBegin("Įstatyti mokėjimo būdą",PMSClass,CGother,HBlRecType);
  SetWRect(240,80,650,298);
//  StringList(9,9,236,209);
  DataList(9,20,-22,-6,"PayMode"); 
  DataListColumn(1,6,50,AdjLeft,"PayMode","Kodas",M4Str); 
  DataListColumn(1,56,-132,AdjLeft,"Comment","Komentaras",M4Str); // Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:05:57
  SearchField("Ieškoti");
  EndWindow;
end;

window ORDClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs,h5,flipnr,width;
  string 255 label;
  Integer rn;
  
  WindowBegin("Užsakymas",ORDClass,CGview,-);
  SetWRect(20,80,750,460);
  Sizeable(-1,-1,0,0);
  UseView(ORVc);
  ActiveFieldOnNew("CustCode");
  CommunicateButton;
  Tile(0,74,false,"",CustCode);
  EditField(75,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Pirkėjas",Normal,CustCode,false,CUSClass);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Pavadinimas",Normal,Addr0,false,0);
  if (StandardHansa==false) then begin
  EditField(h,vm=(v+=20),135,"Oficialus Nr.",Normal,OfficialSerNr,false,LegalInvNrSClass);
  CheckBox(h4=-100,v,0,"OK",OKFlag); //!!SAMETRANSLATION
  end else begin
    CheckBox(h4=-100,vm=(v+=20),0,"OK",OKFlag);  //!!SAMETRANSLATION
  end;
//  CheckBox(h+120,vm,0,"Uždarytas",Closed);
//  CheckBox(h+240,vm,0,"Reserved",Reserved);
  TileButton(1,"Terminai");
  TileButton(2,"Prekės");
  TileButton(3,"Valiuta");
  TileButton(4,"Siunt. terminai");
  TileButton(5,"Kainodara");
  TileButton(6,"Fakt. adr.");
  TileButton(7,"Siunt. adr.");
  Tile(1,110,false,"1",OrdDate);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Data",Normal,OrdDate,false,PasteCurDate);
  EditField(h1,v+=vs,35,"Mok. terminas",Normal,PayDeal,false,PDSClass);
  EditField(h1,v+=vs,82,"Plan. siuntimas",Normal,PlanShip,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Siuntimo data",Normal,DespatchDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Siuntimo laikas",Normal,DespatchTime,false,PasteCurTime);
  EditField(h2,v=vm,135,"Mūsų nuor.",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Kont. asmuo",Normal,CustContact,false,ContactSClass);
  EditField(h2,v+=vs,135,"Objektai",Normal,Objects,false,ObjSClass);
  EditField(h2,v+=vs,135,"Nuoroda",Normal,RefStr,false,0);
  EditField(h2,v+=vs,135,"Pirk. užs. Nr.",Normal,CustOrdNr,false,0);
  // c:// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:06:20
  if (UserCanAction("AllowPersonChange",false)) then begin
    EditField(h3,v=vm,80,"Pardavėjas",Normal,SalesMan,false,UserSClass);
  end else begin
     EditField(h3,v=vm,80,"Pardavėjas",ViewOnly,SalesMan,false,0);
  end;// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:06:22
  // :c
  if (StandardHansa==false) then begin
  EditField(h3,v+=vs,80,"Projektas",Normal,PRCode,false,PRSClass);
  end;
  EditField(h3,v+=vs,80,"Užsak. klasė",Normal,OrderClass,false,OrderClassSClass);
  if (StandardHansa==false) then begin
  EditField(h3,v+=vs,80,"Užsak. tipas",Normal,OrderType,false,SetSClass);
    EditField(h3,v+=vs,80,"Pard. sutartis",Normal,ORCONr,false,ORCOSClass);
  end;
  CheckBox(h4,v=6,0,"Uždarytas",Closed);
  CheckBox(h4,v+=16,0,"Rezervuotas",Reserved);
  EnterSkip(Math);
  Tile(2,220,true,"2",Math);
//  CheckBox(20,-20,0,"OK",OKFlag);
  EditField(55,-41,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
  if (UseTaxTemplatesforTaxCalc==false) then begin
  if (UserCanAction("ViewCostPrice",true)) then begin
    EditField(160,-41,70,"BP %",Normal,GPProc,true,0);
    EditField(160,-21,70,"Viso BP",ViewOnly,TotGP,true,0);
  end;
    if (HasLocalization("GBR,LTU,POL,LVA")) then begin
      EditField(310,-41,50,"Reversinis PVM",ViewOnly,RvrsVAT,true,0);
      EditField(290,-21,70,"Ext. mokest.",ViewOnly,TAX1Sum,true,0); 
    end else begin
  EditField(290,-41,70,"Mok. 2",ViewOnly,TAX2Sum,true,0);
  EditField(290,-21,70,"Pap. Mok.",ViewOnly,TAX1Sum,true,0);
    end;
  EditField(410,-41,100,"PVM",ViewOnly ,Sum3,true,0);
  end else begin
    if (UserCanAction("ViewCostPrice",true)) then begin
      EditField(290,-41,70,"BP %",Normal,GPProc,true,0); 
      EditField(290,-21,70,"Viso BP",ViewOnly,TotGP,true,0); 
    end;
    EditField(410,-41,100,"Mok.",ViewOnly ,Sum3,true,0);
  end;
  EditField(410,-21,100,"Suma",ViewOnly,BaseSum4,true,0);
  EditField(-150,-41,100,"Tarp. suma",ViewOnly ,Sum1,true,0);
  EditField(-150,-21,100,"VISO",ViewOnly ,Sum4,true,0);
  v = 24;
  MatrixBegin(3,v,-50,-49,-,200);
  MatTypedRow(stp);
  flipnr = 0;
  Flip(flipnr); flipnr = flipnr + 1;
  MatText(t=9,32,"Tarp. suma",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-80,"Suma",0,-1,ViewOnly,0,Sum,true,0);
  MatText(t=17,32,"Antraštė",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatCol(t=1,32,"Prekė",0,ArtCode,false,ForSaleINSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
//  MatCol(t,144,"Kiekis",0,Quant,true,0);
  t = 1;
  if (HasVarieties) then begin
  MatCol(t,94,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Kiekis",0,Quant,true,0); 
  end;
    EnterSkip(ArtCode);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Prekė",0,ArtCode,false,ForSaleINSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
//  MatCol(t,144,"Kiekis",0,Quant,true,0);
  if (HasVarieties) then begin
  MatCol(t,94,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Kiekis",0,Quant,true,0); 
  end;
  EnterSkip(ArtCode);
  MatText(t=10,32,"Spausdinant, ši ir toliau einančios eilutės bus paslėptos",false);
  MatText(t=kInvoiceRowTypePerceptionTax,32,"Percepcijos mok.",true);
  MatCol(t,132,"",0,Region,false,0);
  MatCol(t,252,"",0,TAX2Prc,true,0);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,372,"",0,SalesAcc,false,0);
  MatCol(t,452,"",0,Spec,false,0);
  Flip(flipnr); flipnr = flipnr + 1;
//  MatCol(t=1,194,"Aprašymas",0,Spec,false,0);
  t = 1;
  MatCol(t,144,"Aprašymas",0,Spec,false,0); 
  MatCol(t,-235,"Vieneto kaina",0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Suma",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Suma",0,Sum,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Aprašymas",0,Spec,false,0); 
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-284,"Pirk. prekės Nr.",0,CustArtCode,false,CUINSClass); 
    MatCol(t,-224,"Sąskaita",0,SalesAcc,false,AccSClass); 
    MatCol(t,-164,"Objektas",0,Objects,false,ObjSClass);
    MatCol(t,-70,"M. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-264,"Pirk. prekės Nr.",0,CustArtCode,false,CUINSClass); 
    MatCol(t,-204,"Sąsk.",0,SalesAcc,false,AccSClass); 
    MatCol(t,-154,"Objektas",0,Objects,false,ObjSClass);
    if ((HasLocalization("GBR,LTU,POL") and IsEnterprise) or HasLocalization("LVA")) then begin
      MatCol(t,-90,"PVM-K",0,VATCode,false,VATCodeSClass); 
      MatCol(t,-45,"Revers",0,RvrsVATCode,false,VATCodeSClass); 
    end else begin
    MatCol(t,-45,"PVM kd.",0,VATCode,false,VATCodeSClass);
    end;
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-284,"Pirk. prekės Nr.",0,CustArtCode,false,CUINSClass); 
    MatCol(t,-224,"Sąskaita",0,SalesAcc,false,AccSClass); 
    MatCol(t,-164,"Objektas",0,Objects,false,ObjSClass);
    MatCol(t,-70,"M. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-264,"Pirk. prekės Nr.",0,CustArtCode,false,CUINSClass); 
    MatCol(t,-204,"Sąsk.",0,SalesAcc,false,AccSClass); 
    MatCol(t,-154,"Objektas",0,Objects,false,ObjSClass);
    if ((HasLocalization("GBR,LTU,POL") and IsEnterprise) or HasLocalization("LVA")) then begin
      MatCol(t,-90,"PVM-K",0,VATCode,false,VATCodeSClass); 
      MatCol(t,-45,"Revers",0,RvrsVATCode,false,VATCodeSClass); 
    end else begin
    MatCol(t,-45,"PVM kd.",0,VATCode,false,VATCodeSClass);
    end;
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Aprašymas",0,Spec,false,0); 
  MatCol(t,344,"Užsakymo tipas",0,OrderType,false,SetSClass); 
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-245,"Vnt. kaina",0,Price,true,0);
    MatCol(t,-175,"%",0,vRebate,true,0);
    MatCol(t,-140,"Savikaina",0,BasePrice,true,0);
    MatCol(t,-70,"BP",0,rowGP,true,0);
  end else begin
    MatCol(t,-235,"Vieneto kaina",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Suma",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
    if (UserCanAction("ViewCostPrice",true)) then begin
     MatCol(t,-245,"Vnt. kaina",0,Price,true,0);
     MatCol(t,-175,"%",0,vRebate,true,0);
     MatCol(t,-140,"Savikaina",0,BasePrice,true,0);
     MatCol(t,-70,"BP",0,rowGP,true,0);
   end else begin
    MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Suma",0,Sum,true,0);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Apraš.",0,Spec,false,0); 
  MatCol(t,-300,"Pardavėjas",0,Salesmen,false,UserSClass); 
  MatCol(t,-236,"Siunt. 1",0,Shipd1,true,0); 
  MatCol(t,-184,"Siunt. 2",0,Shipd2,true,0); 
  MatCol(t,-132,"Faktūruota",0,Invd,true,0); 
  MatCol(t,-80,"Ruošinys",0,Recepy,false,RecSClass);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Apraš.",0,Spec,false,0);
  MatCol(t,-290,"Siunt. 1",0,Shipd1,true,0);
  MatCol(t,-220,"Siunt. 2",0,Shipd2,true,0);
  MatCol(t,-150,"Faktūruota",0,Invd,true,0);
  MatCol(t,-80,"Ruošinys",0,Recepy,false,RecSClass);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Aprašymas",0,Spec,false,0); 
  MatCol(t,-290,"Serijinis nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-150,"Plan. siunt.",0,PlanShipRow,true,PasteCurDate);
  MatCol(t,-70,"Kainos faktorius",0,PriceFactor,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-290,"Serijinis nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-150,"Plan. siunt.",0,PlanShipRow,true,PasteCurDate);
  MatCol(t,-70,"Kainos faktorius",0,PriceFactor,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Aprašymas",0,Spec,false,0); 
  MatCol(t,-315,"Siuntimo pažyma",0,ShipNote,false,0);
  MatCol(t,-210,"Patalpa",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
  MatCol(t,-145,"Pozicija",0,Position,true,UsedPosSClass);
  end;
  MatCol(t,-90,"Šaltinis",0,Source,true,SourceSClass);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-315,"Siuntimo žinutė",0,ShipNote,false,0);
  MatCol(t,-210,"Patalpa",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
  MatCol(t,-145,"Pozicija",0,Position,true,UsedPosSClass);
  end;
  MatCol(t,-90,"Šaltinis",0,Source,true,SourceSClass);
  if (StandardHansa==false) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=1,144,"Surink. data",0,PickingDate,false,PasteCurDate);
  MatCol(t,-390,"Surink. laik.",0,PickingTime,false,PasteCurTime);
  MatCol(t,-320,"Pakr. data",0,InloadingDate,true,PasteCurDate);
  MatCol(t,-230,"Pakr. laikas",0,InloadingTime,true,PasteCurTime);
  MatCol(t,-160,"Iškr. data",0,DespatchRowDate,true,PasteCurDate);
  MatCol(t,-70,"Iškr. laikas",0,DespatchRowTime,true,PasteCurTime);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Atsi. data",0,PickingDate,false,PasteCurDate);
  MatCol(t,-390,"Atsi. laikas",0,PickingTime,false,PasteCurTime);
  MatCol(t,-320,"Pakr. data",0,InloadingDate,true,PasteCurDate);
  MatCol(t,-230,"Pakr. laikas",0,InloadingTime,true,PasteCurTime);
  MatCol(t,-160,"Siunt. data",0,DespatchRowDate,true,PasteCurDate);
  MatCol(t,-70,"Siunt. laikas",0,DespatchRowTime,true,PasteCurTime);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Aprašymas",0,Spec,false,0); 
  MatCol(t,-315,"Vnt.",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Kiekis",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Plotis",0,UnitXval,true,0);
  MatCol(t,-160,"Aukštis",0,UnitYval,true,0);
  MatCol(t,-120,"Gylis",0,UnitZval,true,0);
  MatCol(t,-80,"Vnt. egz. kaina",0,UnitFactPrice,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-315,"Vienetas",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Vieneto kiekis",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Plotis",0,UnitXval,true,0);
  MatCol(t,-160,"Aukštis",0,UnitYval,true,0);
  MatCol(t,-120,"Gylis",0,UnitZval,true,0);
  MatCol(t,-80,"Vieneto kaina",0,UnitFactPrice,true,0);
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Prekės paieška",'I','I',0,"ItemStatusORDsm");
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Ankstesnė pardavimo kaina",' ',' ',0,"ORLastSPrsm");
  end;
  RowMenuItem(0,"Pridėti antraštės eilutę",' ',' ',0,"ORAddHeaderLine");
  RowMenuItem(0,"Pridėti paslėptą liniją",' ',' ',0,"ORAddHidLine");
  RowMenuItem(0,"Pridėti tarpinę sumą",' ',' ',0,"SubtotalORDsm");
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Vadovo nuolaidos keitimas",' ',' ',0,"MgrsDiscOverrideORDsm"); 
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,5,"E");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,6,"F");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,7,"G");
  if (StandardHansa==false) then begin
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,8,"H");
  end;
  Tile(3,70,false,"3",FrRate);
  vs = 20;
  EditField(h=110,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+vs,50,"Baz. val. 1",Normal,BaseRate1,true,0); 
  EditField(h,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0);   
  EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0); 
  RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);  //!!SAMETRANSLATION
  RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);     //!!SAMETRANSLATION
  Tile(4,110,false,"4",ShipDeal);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,v=6,80,"Siuntimo term.",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h1,v+=vs,80,"Sintimo būdas",Normal,ShipMode,false,DMSClass);
  if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Maršrutas",Normal,Sorting,false,DelRouteSClass);
  end;
  EditField(h1,v+=vs,80,"Patalpa",Normal,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Filialas",Normal,BranchID,false,AllCUSClass);
  end;
  EditField(h2,v=vm,80,"Viso kiekis",ViewOnly,TotQty,true,0);
  EditField(h2,v+=vs,80,"Viso svoris",ViewOnly,TotWeight,true,0);
  EditField(h2,v+=vs,80,"Viso tūris",ViewOnly,TotVolume,true,0);
  EditField(h2,v+=vs,80,"Frachtas",Normal,FrPrice,true,0);
  EditField(h2,v+=vs,80,"Intrastat kodas",Normal,IntrastatTransCode,true,IntrastatTransCodeSClass);
  if (StandardHansa==false) then begin
    EditField(h3,v,80,"Frahto PVM kd.",Normal,FrVATCode,true,VATCodeSClass);
  end;
  CheckBox(473,v=vm,0,"Faktūros prieš siuntimą",InvBeforeShip);
  CheckBox(473,v+=16,0,"Nustat. prist. kiekį į 0",SHShipSetToZero); 
  Tile(5,130,false,"5",PriceList);
    h3 = 530;
  EditField(h1,v=vm,80,"Kainoraštis",Normal,PriceList,false,PLDefSClass);
  EditField(h1,v+=vs,80,"Nuolaidų lentelė",ViewOnly,RebCode,false,0); 
//  EditField(h2,v+=vs,80,"Disc %",ViewOnly,DiscPerc,false,0);
//  EditField(h2,v+=vs,80,"Disc Amnt",ViewOnly,DiscSum,false,0);
  EditField(h1,v+=vs,80,"Faktūra kam",Normal,InvoiceToCode,false,CUSClass);
  if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Kreditinė kortelė",Normal,CreditCard,false,CreditCardSClass);
  EditField(h1,v+=vs,80,"Autorizacija",Normal,AuthorizationCode,false,0);
  end;
  EditField(h1,v+=vs,-20,"Komentaras",Normal,Comment,false,0);
  EditField(h1,v+=vs,-20,"",Normal,Comment2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,Comment3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,Comment4,false,0);
  EditField(h1,v+=vs,-20,"Faktūra",Normal,BankCode,false,BankSClass);
  v = vm;
  if (HasSalesGroup) then begin
    EditField(h2,v,80,"Pard. grupė",Normal,SalesGroup,false,SalesGroupSClass); 
    v = v + vs;
  end;
  EditField(h2,v,80,"Kalba",Normal,LangCode,false,LangSClass); 
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"Komisiniai",Normal,Commision,true,0); 
    EditField(h2,v+=vs,80,"Viso įtr. komisinius",ViewOnly,SumIncCom,true,0); 
  end;
  if (HasTREO) then begin
    EditField(h3,v=vm,80,"TREO nr.",Normal,TREONr,false,0);
  EditField(h3,v+=vs,80,"TREO galioj. data",Normal,TREOExpDate,false,PasteCurDate);
  end;
  Tile(6,250,false,"6",Addr1);
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Invoice"; end; //!!SAMETRANSLATION
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Adresas"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
  EditField(h,vm=(v+=vs),80,"Šalis",Normal,InvCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin  
    EditField(h2-89,v,232,"",ViewOnly,InvCountryName,false,0); 
    h5 = -170;
    width = 150;
  end else begin
    h5 = -270;
    width = 135;
  end;
  if (HasApprovals) then begin
    SoftEditField(h3=h+4,v=(vm+=40),123,"Patvirtinimo būsena",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
/*  
		ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Patvirtinimo būklė");
		RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Nereikalaujama",AcceptanceStatus);
		RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Nepradėta",AcceptanceStatus);
		RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Nereikalauta",AcceptanceStatus);
		RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Laukiama",AcceptanceStatus);
		RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Patvirtinta",AcceptanceStatus);
		RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Atmesta",AcceptanceStatus);  
*/    
    v = VATZoneButtonsLabelslit(h3=290,v=vm,170,16);
  end else begin
    v = VATZoneButtonsLabelslit(h3=290,v=vm+20,170,16);
  end;
  EditField(h2=-170,v=vm,150,"Regionas",Normal,Region,false,RegionSClass); 
  EditField(h2,v+=vs,150,"PVM Reg. Nr.",Normal,VATNr,false,0);
  EditField(h2,v+=vs,150,"GLN",ViewOnly,RecipientGLN,false,0); //!!SAMETRANSLATION
  EditField(h2,v+=vs,150,"Telefonas",Normal,Phone,false,0);
  EditField(h2,v+=vs,150,"Faksas",Normal,Fax,false,0);
  Tile(7,170,false,"7",ShipAddr0);
  EditField(h1,v=6,80,"Adreso kd.",Normal,DelAddrCode,false,DelAddr3SClass);

  EditField(h1,v+=vs,-20,"Name",Normal,ShipAddr0,false,0);
  label = UserDefined("CUVc","DelAddr0");
  EditField(h,v+=vs,-20,label,Normal,ShipAddr1,false,0);
  label = UserDefined("CUVc","DelAddr1");
  EditField(h,v+=vs,-20,label,Normal,ShipAddr2,false,0);
  label = UserDefined("CUVc","DelAddr2");
  EditField(h,v+=vs,-20,label,Normal,ShipAddr3,false,0);
  label = UserDefined("CUVc","DelAddr3");
  EditField(h,v+=vs,-20,label,Normal,DelAddr3,false,0);
  label = UserDefined("CUVc","DelAddr4");
  EditField(h,v+=vs,-20,label,Normal,DelAddr4,false,0);

  EditField(h1,v+=vs,-20,"Siuntimas",Normal,ShipAddr0,false,0);
  EditField(h1,v+=vs,-20,"Adresas",Normal,ShipAddr1,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
  EditField(h1,v+=vs,80,"Šalis",Normal,DelCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin  
    EditField(h1+91,v,232,"",ViewOnly,DelCountryName,false,0); 
    h5 = -170;
    width = -20;
  end;  
  EditField(h2,v,150,"Siuntimo GLN",ViewOnly,DelRecipientGLN,false,0);
//  EditField(h1+200,v,80,"#VAT Code#",Normal,CustVATCode,false,0);
  EnterSkip(OrdDate);
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Užsakymo būklė",'r',5,"ORInfoRnORDsm"); 
    SpecialMenu("Prekės būklė",'I',2,"ItemStatusORDsm"); 
    SpecialMenu("Sukurti Siuntimą",'L',0,"SHFromORDsm"); 
    SpecialMenu("Sukurti faktūrą",'F',1,"IVFromORDsm"); 
    SpecialMenu("Pridėti tarp. sumą",' ',14,"SubtotalORDsm");
/*
email not working yet
    SpecialMenu("Create E-Mail",'m',11,"CreateMailFromORDsm"); 
*/    
  end else begin
  SpecialMenu("Perskaičiuoti nuolaidą",' ',11,"RecalcDiscountORDsm"); 
  if (StandardHansa==false) then begin
  SpecialMenu("Perskaičiuoti svorį ir tūrį",' ',10,"RecalculateWeightORDsm");
  end;
  if (HasLocalization("CAN,USA")) then begin
    SpecialMenu("Get Tax Rates",' ',0,"ORGetTaxRates2Dsm"); //!!SAMETRANSLATION
  end;

  SpecialMenu("Atnaujinti valiutinių kainoraščių prekes",' ',7,"UpdatePricesORDsm");
  SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm");
  SpecialMenu("Užsakymo būklė",'r',5,"ORInfoRnORDsm");
  if (HasTaxMatrix) then begin
    SpecialMenu("Atidaryti mok. matricą",' ',25,"OpenVatMatrixORDsm"); 
  end;
  if (StandardHansa==false) then begin
  	SpecialMenu("Spausdinti vidinį užsakymą",' ',4,"Or2FormORDsm");
  end;
  SpecialMenu("Rezervacijos",' ',15,"OrderReservORDsm");
  if (HasApprovals) then begin
    SpecialMenu("Siųsti patvirtinimui",' ',6,"ORSendforAcceptanceORDsm");
    SpecialMenu("Atšaukti patvirtinimo užklausą",' ',2,"CancelApprovalRequestDsm");
  end;
  if (GuiType==kGuiiPhone) then begin
    SpecialMenu("Parašas",' ',10,"SignORDsm");
  end;
  
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
//  SpecialMenu("Sukurti veiklą",'c',9,"CreateActFromORDsm");
  SpecialMenu("Sukurti siuntimą",'L',0,"SHFromORDsm");
  if (HasDownpayments) then begin
  SpecialMenu("Sukurti išankstinio apmok. faktūrą",' ',3,"DownPayFromORDsm");
  end;
  if (HaseMail or IsEnterprise) then begin
  	SpecialMenu("Sukurti el. laišką",'m',11,"CreateMailFromORDsm");
	end;
  SpecialMenu("Sukurti faktūrą",'F',1,"IVFromORDsm");
  if (HasModTS or IsEnterprise) then begin
  SpecialMenu("Sukurti projektą",' ',9,"CreatePRFromORDsm");
  SpecialMenu("Sukurti projekto biudžetą",' ',10,"CreateTBBUFromORDsm");
    end;
    SpecialMenu("Sukurti pirkimo užsakymą",' ',4,"POFromORDsm");
  SpecialMenu("Sukurti grąžinimą",'B',6,"RetFromORsm");
  SpecialMenu("Sukurti sandėlio perkėlimą",' ',8,"StockMovFromORDsm");
  SpecialMenu("Pridėti pirkėją",' ',0,"AddCustomerORDsm");
  SpecialMenu("Pridėti prekę",' ',0,"AddItemORDsm");  
  end;
  EndWindow;
end;

window SDDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,v,vm,vs;
  Integer f,flipnr;

  WindowBegin("Nurašymai",SDDClass,CGview,-);
  SetWRect(20,80,560,350);
  Sizeable(-1,-1,0,0);
  FormName(SDForm);
  UseView(SDVc);
  ActiveFieldOnNew("TransDate");
  vs = 20; h2 = 260; h3 = 430; h4 = 580;
  EditField(h=80,v=6, 82,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(h2,v,82,"Oper. Data",Normal,TransDate,false,PasteCurDate);
  if (IsEnterprise) then begin
    EditField(h3,v,100,"Priežastis",Normal,Reason,false,StandProblemsSClass);
    CheckBox(h4,v,0,"OK",OKFlag); //!!SAMETRANSLATION
  end;
  if (IsEnterprise) then begin
    EditField(h,v+=vs,82,"Sąn. sąsk.",Normal,CostAcc,false,AccSClass);
    EditField(h2,v,82,"Užsk. klasė",Normal,SDClass,false,OrderClassSClass);
    EditField(h3,v,100,"Nuoroda",Normal,RefStr,false,0);
    v = v + vs;
  end else begin
    if (HasModNL) then begin
      EditField(h3,v,82,"Savik. sąsk.",Normal,CostAcc,false,AccSClass);
    end;
    CheckBox(h4,v,0,"OK",OKFlag); //!!SAMETRANSLATION
    v = v + vs;
  end;
  if (HasMultiLocations) then begin
    EditField(h,v,82,"Patalpa",Normal,Location,false,LocationSClass);
  end;
  if (HasAdvancedAccounting) then begin
    EditField(h2,v,82,"Rūš. kd.",Normal,ACShort,false,ACShortSClass);
  end;
  if (HasModTS or IsEnterprise) then begin
    EditField(h3,v,100,"Projektas",Normal,PRCode,false,PRSClass);
  end;
  v = v + vs;
  if (HasApprovals) then begin
    SoftEditField(h,v,82,"Patv. statusas",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255); 
  end;

  if (HasObjects) then begin
    EditField(h2,v,270,"Objektai",Normal,Objects,false,ObjSClass);
  end;
  EnterSkip(Math);
//  CheckBox(450,6,0,"OK",OKFlag);
  v = v + 40;
  if (IsEnterprise) then begin
    vm = v + 1;
    MatrixBegin(4,v,-50,-35,-,200);
  end else begin
    MatrixBegin(4,v,-40,-25,-,99);
  end;
  Flip(0);
  if (HasJewelleryInterface) then begin
    MatCol(1,24,"Ser. Nr.",0,SerialNr,false,SerialNrSClass); 
    EnterSkip(Quant);
    MatCol(1,130,"Prekė",0,ArtCode,false,INSClass); 
    if (HasVarieties) then begin
    MatCol(1,192,"Kiekis",0,Qty,true,MATVARINSClass); 
    end else begin
      MatCol(1,192,"Kiekis",0,Qty,true,0); 
    end;
    MatCol(1,254,"Aprašymas",0,Spec,false,0); 
  end else begin
    MatCol(1,32,"Prekė",0,ArtCode,false,INSClass);
//  MatCol(1,94,"Var",0,VARList,false,VARSClass);
//  MatCol(1,144,"Kiekis",0,Qty,true,0);
    if (HasVarieties) then begin
    MatCol(1,94,"Kiekis",0,Qty,true,MATVARINSClass);
    end else begin
      MatCol(1,94,"Kiekis",0,Qty,true,0); 
    end;
    MatCol(1,154,"Aprašymas",0,Spec,false,0); 
  end;
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  if (HasJewelleryInterface==false) and (HasSerialNumbers) then begin
    MatCol(1,-280,"Ser. Nr.",0,SerialNr,false,SerialNrSClass); 
  end;
  if (HasMultiLocations) then begin
  MatCol(1,-160,"Patalpa",0,Location,false,LocationSClass); 
  end;
  if (HasPositions) then begin
  MatCol(1,-100,"Pozicija",0,PosCode,false,UsedPosSClass); 
  end;
  if (IsEnterprise) then begin
  MatCol(1,-40,"Koef.",0,Coefficient,false,0); 
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,-270,"Rūš. kd.",0,ACShort,false,ACShortSClass);
  MatCol(1,-200,"Savik. sąsk.",0,CostAcc,false,AccSClass); 
  MatCol(1,-100,"Objektai",0,Objects,false,ObjSClass); 
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,-210,"FIFO",0,FIFO,true,0); //!!SAMETRANSLATION
  MatCol(1,-125,"Eilutės FIFO",0,FIFORowVal,true,0);
  MatCol(1,-40,"Koef.",0,Coefficient,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,-240,"Ruošinys",0,Recepy,false,RecSClass); 
    if (StandardHansa==false) then begin
  MatCol(1,-180,"Projektas",0,PRCodeRow,false,PRSClass); 
    end;
  MatCol(1,-120,"Bazinė kaina",0,BasePrice,true,0); 
  MatCol(1,-40,"Koef.",0,Coefficient,false,0); 
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,-140,"Plotis",0,UnitXval,true,0); 
  MatCol(1,-95,"Aukštis",0,UnitYval,true,0); 
  MatCol(1,-50,"Gylis",0,UnitZval,true,0); 
  end else begin
    if (HasModNL) then begin
      MatCol(1,-200,"Savikainos sąsk.",0,CostAcc,false,AccSClass);
    end;
    MatCol(1,-100,"Vnt. Savikainos vertė",0,FIFO,true,0); 
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Prekės būklė",'I','I',0,"ItemStatusSDDsm");
  if (HasQualityControl) then begin
    RowMenuItem(0,"Kokybės kontrolė",'u','u',0,"QualConFromSDDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 22;
  v = vm;/* 28 */
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));  //!!SAMETRANSLATION
      v = v + vs;
    end;
  end;
//  CheckBox(20,-20,0,"OK",OKFlag);
  EditField(h=150,-20,70,"Viso. kiekis",ViewOnly,TotQty,false,0); 
  EditField(h=290,-20,-40,"Komentaras",Normal,Comment,false,0); 
/*
//oldapprovals  
  if (HasApprovals) then begin
    Tile(2,200,true,"1",AcceptanceStatus);
    if (HasApprovals) then begin
      SoftEditField(h3=-163,v=16,123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);  //!!SAMETRANSLATION
    end;
  ButtonFrame(h3=-163,v=16,123,6,"Patvirtinimo būklė");
  RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Nereikalaujama",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Nepradėta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Nereikalauta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Aktyvus",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Patvirtinta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Atmesta",AcceptanceStatus);  
  end;
*/    
  if (HasAdvancedStock) then begin
  SpecialMenu("Sandėlio nurašymo būklė",'r',4,"SDStatusDsm"); 
  end;
  if (HasIntegratedNL) then begin
  SpecialMenu("Atidaryti D/K operaciją",'t',1,"OpenTRFromSD");
  end;
    SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm"); 
  if (HasApprovals) then begin
    SpecialMenu("Siųsti patvirtinimui",' ',6,"SDSendforAcceptanceSDDsm");
    SpecialMenu("Atšaukti patvirtinimo užklausą",' ',2,"CancelApprovalRequestDsm");
  end;
  EndWindow;
end;

window SHDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  Integer tilenr,f,flipnr,rn,pos;

  WindowBegin("Siuntimas",SHDClass,CGview,-);
  SetWRect(20,80,750,460);
  Sizeable(-1,-1,0,0);
  UseView(SHVc);
  vs = 20;
  Tile(0,74,false,"",SerNr);
  EditField(75,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Pirkėjas",ViewOnly,CustCode,false,0);
  EditField(h=255,v=vm,-40,"Pavadinimas",Normal,Addr0,false,0);
  v = v + vs;
  if (HasOfficialSerNr and (HasLocalization("AGO")==false)) then begin
    EditField(h,vm=v,135,"Oficialus Nr.",Normal,OfficialSerNr,false,LegalInvNrSClass); 
  end;  
  if (HasTREO) then begin
    EditField(h+230,vm,95,"TREO Nr.",Normal,TREONr,false,0);
  end;
  CheckBox(h4=-100,v,0,"OK",OKFlag); //!!SAMETRANSLATION
  tilenr = 1;
  if (IsEnterprise) then begin
    TileButton(tilenr,"Terminai"); tilenr = tilenr + 1; 
    TileButton(tilenr,"Prekės"); tilenr = tilenr + 1; 
    TileButton(tilenr,"Siunt. sąl."); tilenr = tilenr + 1; 
    TileButton(tilenr,"Pakavimas"); tilenr = tilenr + 1; 
    TileButton(tilenr,"Siunt. adresas"); tilenr = tilenr + 1; 
    TileButton(tilenr,"Komentaras"); tilenr = tilenr + 1; 
    TileButton(tilenr,"Frachtas"); tilenr = tilenr + 1; 
  end else begin
    TileButton(tilenr,"Komentaras"); tilenr = tilenr + 1; 
    TileButton(tilenr,"Prekės"); tilenr = tilenr + 1; 
    TileButton(tilenr,"Adresas"); tilenr = tilenr + 1; 
    if (HasLocalization("PRT")) then begin 
      if (HasModIN and HasModSL) then begin 
        TileButton(tilenr,"Packaging"); tilenr = tilenr + 1;     //!!SAMETRANSLATION
      end;
    end;
    if (HasLocalization("LTU,PRT") or BuildProductCode=="PAYYAPERP") then begin
      TileButton(tilenr,"Freight"); tilenr = tilenr + 1;  //!!SAMETRANSLATION
    end;
  end;
  tilenr = 1;
  Tile(tilenr,70,false,tilenr,ShipDate); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Data",Normal,ShipDate,false,PasteCurDate);
  if (HasMultiLocations) then begin
    v = v + vs;
    EditField(h1,v,82,"Patalpa",Normal,Location,false,LocationSClass); 
  end;
  if (HasRoute) then begin
    v = v + vs;
    EditField(h1,v,82,"Maršrutas",Normal,Sorting,false,DelRouteSClass); 
  end;
  if (IsEnterprise) then begin
    v = v + vs;
    SoftEditField(h1,v,82,"Skanuoti barkodą",Normal,"scanbarcode",false,0,M4Str,60); 
  end;
  if (HasObjects) then begin
  EditField(h2,v=vm,135,"Objektai",Normal,Objects,false,ObjSClass);
  end;
  if (HasBranch) then begin
    v = v + vs;
    EditField(h2,v,135,"Filialas",ViewOnly,BranchID,false,0); 
  end;
  if (HasMultiLocations or HasModTS) then begin
    v = v + vs;
  end;
  if (HasModTS) then begin
    EditField(h2,v,135,"Projektas",ViewOnly,PRCode,false,0);
  end;
  if (HasObjects) then begin
    EditField(h3,v=vm,80,"Užs. nr.",ViewOnly,OrderNr,false,0); 
  end else begin
    if (IsEnterprise==false) then begin
      if (HasModTS) then begin
        EditField(h3,v=vm,135,"Užs. Nr.",ViewOnly,OrderNr,false,0); 
      end else begin
      EditField(h2,v=vm,135,"Užs. Nr.",ViewOnly,OrderNr,false,0); 
      end;
    end;
  end;
  if (IsEnterprise) then begin
  EditField(h3,v+=vs,80,"Užsk. klasė",Normal,SHClass,false,OrderClassSClass);
  //START-CUST PST 2016-May-18// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:07:28
   if (UserCanAction("AllowPersonChange",false)) then begin
    EditField(h3,v+=vs,80,"Pardavėjas",Normal,User,false,UserSClass);
  end else begin
    EditField(h3,v+=vs,80,"Pardavėjas",ViewOnly,User,false,0);
  end; 
  //END-CUST PST 2016-May-18// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:07:29
  CheckBox(h4,v=6,0,"Sms žinutė",Check1);
  end;
  if (IsEnterprise==false) then begin
    if (HasMultiLocations) then begin
      EditField(h1,v+=2*vs,-40,"Komentaras",Normal,Comment,false,0); 
    end else begin
      EditField(h1,v+=vs,-40,"Komentaras",Normal,Comment,false,0); 
    end;
    if (HasLanguages) then begin 
      EditField(h1,v+=vs,82,"Kalba",Normal,LangCode,false,LangSClass);
    end;      
  end;
  Tile(tilenr,190,true,tilenr,Math); tilenr = tilenr + 1;
  v = 20;
  MatrixBegin(4,v,-50,-35,-,200);
  MatTypedRow(stp);
  Flip(0);
  MatCol(1,32,"Prekė",0,ArtCode,false,ForSaleINSClass);
//  MatCol(1,94,"Var",0,VARList,false,VARSClass);
//  MatCol(1,144,"Aprašymas",0,Spec,false,0);
  MatCol(1,94,"Aprašymas",0,Spec,false,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Prekė",0,ArtCode,false,ForSaleINSClass);
//  MatCol(t,94,"Var",0,VARList,false,VARSClass);
//  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,94,"Aprašymas",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeHidden,32,"Ši ir sekančios eilutės bus paslėptos spausdinant",false); 
  t = kInvoiceRowTypePerceptionTax;    
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  if (HasCustItem) then begin
    MatCol(1,-230,"Pirk. prekės Nr.",0,CustArtCode,false,CUINSClass); 
  end;
  MatCol(1,-150,"Užsakyta",0,Ordered,true,0);
  MatCol(1,-98,"Turima",0,InStock,true,0);
  MatCol(1,-50,"Siunč. kiekis",0,Ship,true,0);
  if (HasCustItem) then begin
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,-230,"Pirk. prek. nr.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-150,"Užsakyta",0,Ordered,true,0);
  end else begin
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,-147,"Užsakyta",0,Ordered,true,0);
  end;
  MatCol(t,-98,"Galim.",0,InStock,true,0);
  MatCol(t,-50,"Siunt. kiekis",0,Ship,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  if (IsEnterprise==false) then begin
    pos = -350;
    if (HasSerialNumbers) then begin
      MatCol(1,pos,"Serijinis. Nr.",0,SerialNr,false,SerialNrSClass); pos = pos + 100;
      MatCol(1,pos,"Geriausia iki",0,BestBefore,false,0); pos = pos + 80; 
    end;
    if (HasObjects) then begin
      MatCol(1,pos,"Objektai",0,Objects,false,ObjSClass); pos = pos + 100;
    end;
    MatCol(1,pos,"Sand. vertė",0,FIFORowVal,false,0);
    if (HasLocalization("RUS")) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,-230,"Vienetas",0,UnitCode,false,UnitSClass);
      MatCol(1,-180,"Vnt. pav.",0,UnitComment,false,0);
    end;
  end else begin
		MatCol(1,-350,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
		MatCol(1,-250,"Galioja iki",0,BestBefore,false,0);
		MatCol(1,-150,"Patalpa",0,Location,false,LocationSClass);
    if (HasPositions) then begin
      MatCol(1,-50,"Vieta",0,PosCode,false,UsedPosSClass);
    end;
		MatCol(t=kInvoiceRowTypeStructuredItemComponent,-350,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
		MatCol(t,-250,"Gal. data",0,BestBefore,false,0);
		MatCol(t,-150,"Patalpa",0,Location,false,LocationSClass);
    if (HasPositions) then begin
      MatCol(t,-50,"Pozicija",0,PosCode,false,UsedPosSClass);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    if (HasBuyBack) then begin
		MatCol(1,-400,"BuyBack Pr.",0,BBCostPrice,false,0);
    end;
		MatCol(1,-320,"Eilutės FIFO",0,FIFORowVal,false,0);
    if (StandardHansa==false) then begin
      MatCol(1,-220,"Sv. vid. baz. val. 2",0,WAB2,false,0);
    end;
		MatCol(1,-120,"Pard. kaina",0,BasePrice,false,0);
		MatCol(1,-40,"Koef.",0,Coefficient,false,0);
    if (HasBuyBack) then begin
		MatCol(t=kInvoiceRowTypeStructuredItemComponent,-400,"BuyBack Pr.",0,BBCostPrice,false,0);
		MatCol(t,-320,"Eilutės FIFO",0,FIFORowVal,false,0);
    if (StandardHansa==false) then begin
      MatCol(t,-220,"Sv. vid. baz. val. 2",0,WAB2,false,0);
    end;
		MatCol(t,-120,"Pard. kaina",0,BasePrice,false,0);
		MatCol(t,-40,"Koef.",0,Coefficient,false,0);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
		MatCol(1,-400,"Ruošinys",0,Recepy,false,0);
		MatCol(1,-320,"ŠŠaltinis",0,Source,false,SourceSClass);
		MatCol(1,-240,"Faktūruota",0,Invd,false,0); 
    if (StandardHansa==false) then begin
			MatCol(1,-160,"Siuntimo data",0,DespatchRowDate,false,PasteCurDate); 
			MatCol(1,-80,"Siuntimo laikas",0,DespatchRowTime,false,PasteCurTime); 
    end;
		MatCol(t=kInvoiceRowTypeStructuredItemComponent,-400,"Ruošinys",0,Recepy,false,0);
		MatCol(t,-300,"Šaltinis",0,Source,false,SourceSClass);
		MatCol(t,-240,"Faktūruota",0,Invd,false,0); 
    if (StandardHansa==false) then begin
			MatCol(t,-160,"Siuntimo data",0,DespatchRowDate,false,PasteCurDate); 
			MatCol(t,-80,"Siuntimo laikas",0,DespatchRowTime,false,PasteCurTime); 
    end;
    Flip(flipnr); flipnr = flipnr + 1;
		MatCol(1,-400,"Pardavimų sąsk.",0,SalesAcc,false,AccSClass);
		MatCol(1,-330,"Savikainos sąsk.",0,CostAcc,false,AccSClass);
		MatCol(1,-250,"Objektai",0,Objects,false,ObjSClass);
		MatCol(1,-135,"Plotis",0,UnitXval,true,0);
		MatCol(1,-90,"Aukštis",0,UnitYval,true,0);
		MatCol(1,-45,"Gylis",0,UnitZval,true,0);
		MatCol(t=kInvoiceRowTypeStructuredItemComponent,-400,"Pard. sąsk.",0,SalesAcc,false,AccSClass);
		MatCol(t,-330,"Savik. sąsk.",0,CostAcc,false,AccSClass);
		MatCol(t,-250,"Objektai",0,Objects,false,ObjSClass);
		MatCol(t,-135,"Plotis",0,UnitXval,true,0);
		MatCol(t,-90,"Aukštis",0,UnitYval,true,0);
		MatCol(t,-45,"Gylis",0,UnitZval,true,0);
    if (StandardHansa==false) then begin
      Flip(flipnr); flipnr = flipnr + 1;
			MatCol(1,-300,"Įpakavimai",0,RowPackages,false,0);
			MatCol(1,-220,"Įp. tipas",0,PackageType,false,PackTypeSClass);
			MatCol(1,-170,"Įp. apraš.",0,PackageDesc,false,0);
			MatCol(1,-70,"Akcizas",0,ExciseNr,false,0);
			MatCol(t=kInvoiceRowTypeStructuredItemComponent,-300,"Pakuotės",0,RowPackages,false,0);
			MatCol(t,-220,"Pak. tipas",0,PackageType,false,PackTypeSClass);
			MatCol(t,-170,"Pak. apr.",0,PackageDesc,false,0);
			MatCol(t,-70,"Akcizo",0,ExciseNr,false,0);
    end;
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Prekės būklė",'I','I',0,"ItemStatusSHDsm");
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
      RowMenuItem(0,"Išskleisti eilutę",' ',' ',0,"SplitRowSHDsm");
    end;
  end;
  EndRowMenu;
  EndMatrix;
  vs = 22;
//  v = 21;
  v = v + 1; 
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));  //!!SAMETRANSLATION
      v = v + vs;
    end;
  end;

//  CheckBox(20,-20,0,"OK",OKFlag);
  if (HasLocalization("PRT")) then begin 
    EditField(120,-20,150,"Tax Seal",ViewOnly,TaxAdminServSeal,false,0); //!!SAMETRANSLATION
//    SoftEditField(120,-20,150,"Tax Auth. Approval",Normal,"TaxAdminServSeal",false,0,M4Str,200);
  end;
  EditField(-131,-20,80,"Viso kiekis",ViewOnly,TotQty,true,0); 
  if (IsEnterprise) then begin
    Tile(tilenr,90,false,tilenr,ShipMode); tilenr = tilenr + 1;
  vs = 20;
  EditField(h1,v=vm,82,"Siunt. būdas",Normal,ShipMode,false,DMSClass);
  EditField(h1,v+=vs,80,"Mok. suma",ViewOnly,TAX1Sum,true,0);
    if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Dekl. vertė",Normal,DeclaredVal,true,0);
  EditField(h1,v+=vs,-20,"E-siunt. būklė",ViewOnly,EShipStatus,false,0);
      if (HasLocalization("BRA,BOL,PRT")) then begin
        EditField(h1,v+=vs,80,"Tax Seal",ViewOnly,TaxAdminServSeal,false,0); //!!SAMETRANSLATION
      end;
    end;
  EditField(h2,v=vm,80,"Viso kiekis",ViewOnly,TotQty,true,0);
  EditField(h2,v+=vs,80,"Viso svoris",Normal,TotWeight,true,0);
  EditField(h2,v+=vs,80,"Viso kiekis",Normal,TotVolume,true,0);
  CheckBox(473,v=vm,0,"Naudoti fakt. adresą",Check2);
    if (StandardHansa==false) then begin
  CheckBox(473,v+=16,0,"Sukurtas elektroninis siuntimas",EShipmentCreated);
  CheckBox(473,v+=16,0,"Surinktas elektroninis siuntimas",EShipCollected);
    end;
    Tile(tilenr,110,false,tilenr,Packages); tilenr = tilenr + 1;
    h2 = 310;
  EditField(h1,v=6,82,"Transporto nr.",Normal,TransportNumber,false,0);
  EditField(h1,v+=vs,82,"Pakuotės",Normal,Packages,true,0);
    if (HasLanguages) then begin 
  EditField(h1,v+=vs,82,"Kalba",Normal,LangCode,false,LangSClass);
    end;  
  EditField(h1,v+=vs,82,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
    if (StandardHansa==false) then begin
  EditField(h1,v+=vs,-20,"Transp. kryptys",Normal,TransportDirect,false,0);
      EditField(h1,v+=vs,80,"Plan. siunt. data",Normal,PlanSendDate,false,PasteCurDate); 
      EditField(h1,v+=vs,80,"Plan. siunt. laikas",Normal,PlanSendTime,false,PasteCurTime); 
    end;

  EditField(h2,v=6,135,"Iš miesto",Normal,FromCity,false,0);
  EditField(h2,v+=vs,135,"Į miestą",Normal,ToCity,false,0);
  EditField(h2,v+=vs,135,"Iš uosto",Normal,FromDock,false,0);
  EditField(h2,v+=vs,135,"Į uostą",Normal,ToDock,false,0);
    if (StandardHansa==false) then begin
      EditField(h2,v+=2*vs,80,"Plan. atvyk. data",Normal,PlanArrDate,false,PasteCurDate); 
      EditField(h2,v+=vs,80,"Plan.atvyk. laikas",Normal,PlanArrTime,false,PasteCurTime); 
    end;
  end;
  Tile(tilenr,150,false,tilenr,Addr1); tilenr = tilenr + 1;
  vs = 20;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
  EditField(h1,v=6,80,"Adreso kodas",Normal,DelAddrCode,false,DelAddr3SClass);
  EditField(h1,v+=vs,-20,"Siuntimas",Normal,Addr1,false,0);
    end else begin
      EditField(h1,v=6,-20,"Siuntimas",Normal,Addr1,false,0); 
    end;
  EditField(h1,v+=vs,-20,"Adresas",Normal,Addr2,false,0);
  end else begin
    EditField(h1,v=6,-20,"Adresas",Normal,Addr1,false,0); 
    EditField(h1,v+=vs,-20,"",Normal,Addr2,false,0); 
  end;
  EditField(h1,v+=vs,-20,"",Normal,Addr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
  if (HasCountryPerCustomer) then begin
  EditField(h1,v+=vs,80,"Šalis",Normal,DelCountry,false,CountrySClass);
    if (HasLocalization("BRA")) then begin  
      EditField(h2-109,v,232,"",ViewOnly,DelCountryName,false,0); 
    end;    
  end;
  if (IsEnterprise) then begin
  EditField(h3,v,-20,"Regionas",Normal,Region,false,RegionSClass); 
    Tile(tilenr,30,false,tilenr,Comment); tilenr = tilenr + 1;
    EditField(h1+10,v=6,-20,"Komentaras",Normal,Comment,false,0);
    EditField(h1+10,v+=20,-20,"Pard. kontrakto tipas",Normal,ORCOType,false,0); 
    if (HasNumberSeries and HasLocalization("PRT")) then begin
      if (HasOfficialSerNr) then begin
        EditField(h1+10,v+=vs,100,"Oficialus ser. nr. 2",Normal,OfficialSerNr2,false,0);
        EditField(h2,v,135,"Būklė",Normal,Status,false,SetSClass);
      end;    
    end;
  end else begin
    if (HasLocalization("RUS")) then begin 
      EditField(h1,v+=vs,80,"Total Weight",Normal,TotWeight,true,0);  //!!SAMETRANSLATION
    end;
  end;
  if (IsStandardProduct and HasLocalization("PRT,LTU") and HasModIN and HasModSL) then begin 
    Tile(tilenr,110,false,tilenr,PlanSendDate); tilenr = tilenr + 1;
    h2 = 310;
    EditField(h1,v=6,80,"Plan. Sent Date",Normal,PlanSendDate,false,PasteCurDate);  //!!SAMETRANSLATION
    EditField(h1,v+=vs,80,"Plan. Sent Time",Normal,PlanSendTime,false,PasteCurTime);  //!!SAMETRANSLATION
    if (HasLocalization("PRT")) then begin
    EditField(h2,v=6,80,"Plan. Arrival Date",Normal,PlanArrDate,false,PasteCurDate);  //!!SAMETRANSLATION
    EditField(h2,v+=vs,80,"Plan. Arrival Time",Normal,PlanArrTime,false,PasteCurTime);        //!!SAMETRANSLATION
  end;
  end;
  
  if (IsEnterprise or HasLocalization("LTU,PRT") or BuildProductCode=="PAYYAPERP") then begin
    if (IsStandardProduct==false or HasLocalization("PRT,LTU")==false or HasModIN==false or HasModSL==false) then begin
    Tile(tilenr,130,false,tilenr,FreightCode); tilenr = tilenr + 1;
      v = 6;
    end else begin
      v = v + vs;
    end;
    if (IsEnterprise) then begin
      HalPushButton(473,2,600,22,"UpdateSHPackages","Paketai");
    end;
    EditField(h1,v,80,"Frachto įmonė",Normal,FreightCode,false,FreightCompanySClass);
    EditField(h1,v+=vs,-20,"Pavadinimas",Normal,FreightCompany,false,0); 
    EditField(h1,v+=vs,-20,"#Reg. Nr.#",Normal,FreightCompanyRegNr,false,0); 
    EditField(h1,v+=vs,-20,"Sunkv. informacija",Normal,TruckInfo,false,0); 
    if (IsEnterprise or HasLocalization("PRT")) then begin
    EditField(h1,v+=vs,-20,"Vairuotojas",Normal,Driver,false,0); 
    EditField(h1,v+=vs,-20,"CMR",Normal,CMRText,false,0); // International transporting number  //!!SAMETRANSLATION
    end;
  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Prekės būklė",'I',2,"ItemStatusSHDsm"); 
    if (HasIntegratedNL) then begin
      SpecialMenu("Atidaryti D/K operaciją",'t',3,"OpenTRFromSH"); 
    end;
    SpecialMenu("Spausdinti frachto etiketes",'l',0,"PrintSHLabSHDsm"); 
    if (HasReturnedGoods and HasModIN) then begin
      SpecialMenu("Sukurti Prekių grąžinimą",'B',5,"RetFromSHSpec"); 
    end;
  end else begin
  SpecialMenu("Spausdinti frachto etiketes",'l',0,"PrintSHLabSHDsm");
  if (IsEnterprise) then begin
  SpecialMenu("Perskaičiuoti svorį",'w',1,"SHCalcWeightDsm");
  end;
  if (HasIntegratedNL) then begin
  SpecialMenu("Atidaryti D/K operaciją",'t',3,"OpenTRFromSH");
  end;
  if (HasLocalization("SWE")) then begin 
   SpecialMenu("ASG eksportas",' ',4,"ASGEnSHDsm"); /* Specific for Sweden */
  end;
  if (HasLocalization("NOR")) then begin 
   SpecialMenu("Winedi eksportas",' ',4,"WinEDIEnSHDsm"); /* Specific for Norway */
  end;
  if (HasLocalization("PRT")) then begin 
    if (HasETaxDocuments) then begin
    SpecialMenu("Send to Tax Authorities",'',10,"EShipPRTDsm");  //tax authorities server is down  //!!SAMETRANSLATION
    end;
  end;
  if (IsEnterprise) then begin
  SpecialMenu("Papildyti siuntos nr. prekes",' ',6,"INBatchSHSpec");
  end;
  if (HasModWHM) then begin
  SpecialMenu("OK sandėlio vald. perkėlimus",' ',8,"OKStockMovSHrDsm");
  SpecialMenu("Sandėlio vald. surinkimo sąrašą",' ',9,"PickingListDsm");
  end;
//  SpecialMenu("Calculate Manually",' ',10,"CalcSHMan"); /* Specific for one customer in Portugal, you may comment it out */
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
    SpecialMenu("Registruoti elektroninį pristatymą",' ',9,"EShipRegisterDsm");
    end;
    if (GuiType==kGuiiPhone) then begin
      SpecialMenu("Pasirašyti",' ',10,"SignSHDsm");
    end;
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  if (HasModSL) then begin
    SpecialMenu("Faktūra",'F',1,"IVFromSHDsm");
  end;
  if (IsEnterprise or HasReturnedGoods) then begin
    SpecialMenu("Sukurti prekių grąžinimą",'B',2,"RetFromSHDsm");
  end;
  end;
  EndWindow;
end;

window AccTClass:3
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real f,h,h2,h3,h4,h5,v,vm,vs;
  if (HasModNL or IsEnterprise) then begin
    if (HasModSL==false) then begin
      WindowBegin("Sąskaitų panaudojimas pard. kn.",AccTClass,CGSbl,-); 
    end else begin
  		WindowBegin("Sąskaitų panaudojimas pard. kn.",AccTClass,CGSbl,-);
    end;
  end else begin
    WindowBegin("Faktūrų parametrai",AccTClass,CGSbl,-); 
  end;
  SetBlid(AccBlock);
  SetWRect(20,80,885,450);
  if (IsEnterprise) then begin
    Sizeable(-1,-1,0,0);
		vs = 20; h = 160; f = 70; h2 = 400; h3 = 250; h4 = 535; h5 = 520;
		Tile(0,30,false,"",ARAcc);
		TileButton(1,"Skolos");
		TileButton(2,"PVM ir Mokesčiai");
		TileButton(3,"Kursas");
		TileButton(4,"Pardavimai");
		TileButton(5,"Kreditas");
		Tile(1,250,false,"1",ARAcc);
		EditField(h,vm=(v=6),f,"Pirkėjų skolos",Normal,ARAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Nemokūs debitoriai",Normal,BadARAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Grynieji",Normal,CashAcc,false,AccSClass);
		EditField(h,v+=vs,f,"POS grąža",Normal,CashBackAcc,false,AccSClass);
    EditField(h,v+=vs,f,"POS grynųjų išėmimas",Normal,CashWithdrawalAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Avanso sąsk.",Normal,OnAccAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Apvalinimo pelnas",Normal,RndAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Apvalinimo nuostolis",Normal,RndLossAcc,false,AccSClass);
    if (StandardHansa==false) then begin
			EditField(h,v+=vs,f,"Komisiniai",Normal,CommisionAcc,false,AccSClass);
			EditField(h,v+=vs,f,"Sąskaitos nuolaida",Normal,DiscountAcc,false,AccSClass);
    end;
    v = vm;
    if (HasObjects) then begin
      CheckBox(h3,v,0,"Objektai skolininkų atsisk. sąsk.",ARUseObj); v = v + 16;
    end;
    CheckBox(h3,v,0,"Tikrinimas",SLAccTest);
		CheckBox(h3,v+=16,0,"Faktūros atnaujina sandėlį",InvUpdStock);
		CheckBox(h3,v+=16,0,"Faktūros info D/K operacijoje",ARonTR);
		CheckBox(h3,v+=16,0,"Atnaujinti baz. val. išrašant faktūras",UpdBaseRate);
		CheckBox(h3,v+=16,0,"Atnaujinti Užsienio val. išrašant faktūras",UpdForeginRate);
		CheckBox(h3,v+=16,0,"Neimti antraštės objekto prie pard. sąsk.",SkipObjectsOnIVFromHeader);
		CheckBox(h3,v+=16,0,"Priverstinė chronologija faktūroms",ChronologyforInvNo);
		CheckBox(h3,v+=16,0,"Naudoti kredito pard. sąsk.",CredSalesAccs);
		CheckBox(h3,v+=16,0,"Išankstinių apmokėjimų kontrolė",DemandPPNo);
		CheckBox(h3,v+=16,0,"Unikalūs išankst. mok. nr.",ForceUniquePP);
		CheckBox(h3,v+=16,0,"Atskira eilutė įplaukai banko sąskaitoje",IPTransBankRowPerCU);
		if (StandardHansa==false) then begin
			CheckBox(h3,v+=16,0,"Skaičiuoti apmokėjimo datą iš paslaugos atlikimo datos",DueDateBasedOnServDelDate);
		end;
		CheckBox(h4,v=vm,0,"Objektai banko sąsk.",ObjectonBankAcc);
		if (StandardHansa==false) then begin
			CheckBox(h4,v+=16,0,"Skaičiuoti nuolaidą",BookedDiscount);
			CheckBox(h4,v+=16,0,"Neleisti gauti daugiau nei nur. faktūr.",NoOverPayIV);
//      CheckBox(h4,v+=16,0,"Do not Print rows with Negative Sums to Fiscal Printer",DonotFPPrintRowsNegativeSum); //  not used anywhere in the rest of the code
		end;
		CheckBox(h4,v+=16,0,"Neleisti neigiamų kiekių pardavimuose",DisallowNegativeTotalsonSales);
		CheckBox(h4,v+=16,0,"Neleisti neigiamų sumų matr.eilutėse parduodant",DisallowNegativeRowSumsonSales);
		CheckBox(h4,v+=16,0,"Neleisti parduoti be kiekio",CheckZeroQtysIVFlag); // EVS: HAL-233
	//    CheckBox(h4,v+=16,0,"Allow Receipt Date before Invoice Date",IPbeforeIVDate);
	//this lovely checkbox leads to totoaly incorect SL and open inv cust stat and all other reports in SL
	//comenting out
		if (HasLocalization("BOL")) then begin  
			CheckBox(h4,v+=16,0,"Disallow create invoice if the Dosage Key has expired",CheckDosageKey); 
		end;
		Tile(2,290,false,"2",VATBAcc);
		EditField(h,vm=(v=6),f,"PVM sąsk.",Normal,VATBAcc,false,AccSClass);
		if (StandardHansa==false) then begin
			EditField(h,v+=vs,f,"Sutart. nuolaidos PVM",Normal,VATERAcc,false,AccSClass);
		end;
		EditField(h,v+=vs,f,"Išankstinių apmokėjimų PVM",Normal,OnAccVATAcc,false,AccSClass);//as it was in 4.2
	//  EditField(h,v+=vs,f,"Išankstinių apmokėjimų PVM",Normal,PreIPVATAcc,false,AccSClass);//no code using it
		EditField(h,v+=vs,f,"PVM pard. sąsk.",Normal,SalesVAT,false,AccSClass);
		EditField(h,v+=vs,f,"Mokesčiai pard. sąsk.",Normal,SalesTAX,false,AccSClass);
    EditField(h,v+=vs,f,"PVM bazė",Normal,VATBase,false,AccSClass);
    EditField(h,v+=vs,f,"PVM bazė priešingas",Normal,VATBaseOppositeAcc,false,AccSClass);
		if (StandardHansa==false) then begin
			EditField(h,v+=vs,f,"Vidinė PVM sąsk.",Normal,IntARAcc,false,AccSClass);
		end;
		EditField(h,v+=vs,f,"Mokesčių sąsk.",Normal,Tax1TmpAcc,false,AccSClass);
		ButtonFrame(h3,v=vm+10,380,3,"Pap. mok.");
		RadioButton(h3,v   ,0,0,"Skaičiuoti pap. mok. nuo sumos su PVM",NoTAXonVAT);
		RadioButton(h3,v+=16,1,0,"Skaičiuoti pap. mok. nuo sumos be PVM",NoTAXonVAT);
		RadioButton(h3,v+=16,2,0,"Skaičiuoti pap. mok. nuo sumos be PVM ir skaič. PVM nuo pap. mok.",NoTAXonVAT);

		ButtonFrame(h3,vm=(v+=40),165,3,"Bazinė kaina");
    RadioButton(h3,v    ,kBasePriceNotInclVAT,0,"Be PVM",BasePriceInclVAT);
    RadioButton(h3,v+=16,kBasePriceInclVATandTax,0,"Su PVM ir pap. mok.",BasePriceInclVAT);
    RadioButton(h3,v+=16,kBasePriceInclVAT,0,"Su PVM",BasePriceInclVAT);
	
		CheckBox(h4=500,vm,0,"Suma be pap. mok.",TotalwoTAX);

		CheckBox(h3,vm=(v+=24),0,"PVM kodų kontrolė",VATCodeCtrl); 
    if (HasLocalization("PRT")==false) then begin
      CheckBox(h3,v+=16,0,"Post Receipt #VAT#",IPBookVAT);
    end;
		if (StandardHansa==false) then begin
			CheckBox(h3,v+=16,0,"Kursų pasikeitimo PVM",BookVATonRateGain);
			CheckBox(h3,v+=16,0,"Kredito pažymos PVM",BookCreditOnPurchAcc);
			CheckBox(h3,v+=16,0,"Skaičiuoti PVM tik mokėjimams",BookVATOnlyFromDownpayment);
			CheckBox(h3,v+=16,0,"Neskaičiuoti PVM sutart. nuolaidai",DiscCashVAT);
		end;
		CheckBox(h3,v+=16,0,"Neperspėti, jei kartojasi PVM mok. kd.",NoWarnOnDupVATnoOnCU);
		CheckBox(h3,v+=16,0,"Neįkelti PVM kodo į įplaukas",NoPasteVATToIP);
    if (HasExtTax) then begin
		CheckBox(h3,v+=16,0,"Leisti prekėms be kodo priskaičiuoti Tax2",AllowItemWOCommodity);
    end;

		CheckBox(h4,v=vm,0,"Objektai PVM sąsk.",VATUseObj);
		if (StandardHansa==false) then begin
			CheckBox(h4,v+=16,0,"Apyvarta su PVM",RevInclVAT);
		end;
		CheckBox(h4,v+=16,0,"Skaičiuoti išankst. mok. PVM",PreIPBookVAT);
    if (StandardHansa==false and HasLocalization("HRV,POL,RUS,SLV,SVN,SRB,UKR")) then begin
      CheckBox(h4,v+=16,0,"Post Inv. #VAT# to #VAT# Corr. A/C",PostIVVATonVATCorr);
    end;
		CheckBox(h4,v+=16,0,"PVM įplaukų nurašymuose",PostWriteOffVAT);
    if (HasExtTax) then begin
		CheckBox(h4,v+=16,0,"Skaičiuoti percepcijos mok.",CalculatePerceptionTaxes);
    end;
		CheckBox(h4,v+=16,0,"#PVM# iš siuntimo adreso",ExportFlagfromDelAddr); 
		Tile(3,150,false,"3",CredAcc);
		h2 = 400;
		EditField(h,v=6,f,"Nurašymų pajamos",Normal,CredAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Nurašymų nuostolis",Normal,WriteOffLossAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Kursų apvalinimas",Normal,RateRndOffAcc,false,AccSClass);
		if (StandardHansa==false) then begin
			EditField(h,v+=vs,f,"EMU kursų apvalinimas",Normal,EMURndOffAcc,false,AccSClass);
			EditField(h,v+=vs,f,"EMU kursų nurašymas",Normal,EMUWriteOffAcc,false,AccSClass);
		end;
		EditField(h,v+=vs,f,"Baz. valiutos apvalinimas",Normal,BaseRoundOffAcc,false,AccSClass);
		EditField(h2,v=6,f,"Kursų pas. paj.",Normal,RateGainAcc,false,AccSClass);
		EditField(h2,v+=vs,f,"Kursų pas. nuost.",Normal,RateLossAcc,false,AccSClass);
		EditField(h2,v+=vs,f,"Banko k. peln.",Normal,BankRateGainAcc,false,AccSClass);
		EditField(h2,v+=vs,f,"Banko k. nuost.",Normal,BankRateLossAcc,false,AccSClass);
		EditField(h2,v+=vs,f,"Banko mokestis",Normal,ExtraCostAcc,false,AccSClass);
		EditField(h2,v+=vs,f,"Forex operacijos sąsk.",Normal,ForexTRAcc,false,AccSClass);
		CheckBox(h,v+=24,0,"Skaičiuoti kursų pas. pajamas/nuostolį įplaukos eilutei",BookRateGainPerIPRow);
		Tile(4,150,false,"4",DomSalesAcc);
		EditField(h,v=6,f,"Viet. pardavimų sąsk.",Normal,DomSalesAcc,false,AccSClass);
		EditField(h,v+=vs,f,VATZoneEditFieldLabelLIT(1) & "Pardavimų sąsk.",Normal,EUSalesAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Ne ES pardavimų sąsk.",Normal,ExpSalesAcc,false,AccSClass);
		EditField(h,v+=vs,f,"Viet. Sutart. nuolaida",Normal,ERebAcc,false,AccSClass);
		EditField(h,v+=vs,f,VATZoneEditFieldLabelLIT(1) & " Sutart. Nuolaida",Normal,EUERebAcc,false,AccSClass); 
		EditField(h,v+=vs,f,"Eksportas" & " Sutart. Nuolaida",Normal,ExpERebAcc,false,AccSClass); 
		CheckBox(h,v+=22,0,"Registruoti Kasos pardavimus Fiskalo bloke",CashSalesToFiscalControlUnit);
    CheckBox(h,v+=16,0,"Atskirti operacijų eilutes faktūrų eilutese",SalesAccSeparateRows);
	//  EditField(h,v+=vs,f,"Vidaus pardavimai",Normal,IntDomSalesAcc,false,AccSClass);
		EditField(h2,v=6,45,"Viet. PVM kodas",Normal,VATCodeDom,false,VATCodeSClass);
		EditField(h2,v+=vs,45,VATZoneEditFieldLabelLIT(1) & "PVM kodas",Normal,VATCodeEU,false,VATCodeSClass);
		EditField(h2,v+=vs,45,"Ne ES PVM kodas",Normal,VATCodeExp,false,VATCodeSClass);
		if (HasTaxMatrix) then begin
			EditField(h2=580,v=6,50,"Viet. mokesčių šabl.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
      EditField(h2,v+=vs,50,VATZoneEditFieldLabelLIT(1) & "Mokesč. šablon.",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass);
			EditField(h2,v+=vs,50,"Eksp. mokesčių šabl.",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass);
		end;
		Tile(5,160,false,"5",CredDomSalesAcc);
		h2=400;
		StaticText(h,v=12,"Kredito pažymos",false);
		EditField(h,vm=(v+=16),55,"Viet. pard. sąsk.",Normal,CredDomSalesAcc,false,AccSClass);
		EditField(h,v+=vs,55,VATZoneEditFieldLabelLIT(1)  & "Pardavimų sąsk.",Normal,CredEUSalesAcc,false,AccSClass);
		EditField(h,v+=vs,55,"Ne ES pard. sąsk.",Normal,CredExpSalesAcc,false,AccSClass);
		EditField(h2,v=vm,45,"Viet. PVM kodas",Normal,CredVATCodeDom,false,VATCodeSClass);
		EditField(h2,v+=vs,45,VATZoneEditFieldLabelLIT(1) & "PVM kodas",Normal,CredVATCodeEU,false,VATCodeSClass);
		EditField(h2,v+=vs,45,"Ne ES PVM kodas",Normal,CredVATCodeExp,false,VATCodeSClass);
    CheckBox(h,v+=32,0,"Nenaudoti autom. operacijų kredito pažymose",NoAutAutoTransOnCredIV);
    CheckBox(h,v+=16,0,"Aut. nustatyti žymę 'Abejotina' kredito faktūroms",SetDisputedFlagsOnCredIV);
    CheckBox(h,v+=16,0,"Neleisti įvesti kredito pažymų be numerių",CredInvWithNo);
    CheckBox(h,v+=16,0,"Reikalauti #Kredito pažymos# priežasties",RequireCreditNoteReason);
    CheckBox(h,v+=16,0,"Kredito pažyma negali viršyti faktūros vertės",CreditIVTotNotExceedInvCheck);
    CheckBox(h,v+=16,0,"Prijungti kredito išrašą prie pirkimo faktūros",ConnectCreditNotetoVI);
		CheckBox(h,v+=16,0,"Neigiamos sumos spausdinant kredito faktūrą",PrintNegAmountsCredNote);
  end else begin
    if (HasModNL) then begin
      SetWRect(20,80,520,300);
      vs = 20; h = 130; f = 70; h2 = 260; h3 = 420;
      if (HasMultiCurrency) then begin
        h = 150;
      end;
			EditField(h,vm=(v=6),f,"Pirkėjų skolos",Normal,ARAcc,false,AccSClass);  
			if (HasLocalization("PRT,ZWE")) then begin
				EditField(h,v+=vs,f,"Blogos skolos",Normal,BadARAcc,false,AccSClass);  
			end;
			EditField(h,v+=vs,f,"Grynieji",Normal,CashAcc,false,AccSClass); 
			EditField(h,v+=vs,f,"Apvalinimas",Normal,RndAcc,false,AccSClass); 
	//      EditField(h,v+=vs,f,"Bank Fee",Normal,ExtraCostAcc,false,AccSClass); // no fee option in Std
			if (HasModSL) then begin
				EditField(h,v+=vs,f,"Nurašymai",Normal,CredAcc,false,AccSClass); 
	//        EditField(h,v+=vs,f,"On Account",Normal,OnAccAcc,false,AccSClass);//not in stdacc
			end;
			if (HasMultiCurrency) then begin
				EditField(h,v+=vs,f,"Baz. val. apval.",Normal,BaseRoundOffAcc,false,AccSClass); 
				EditField(h,v+=vs,f,"Kursų pajamos",Normal,RateGainAcc,false,AccSClass); 
				EditField(h,v+=vs,f,"Kursų nuostolis",Normal,RateLossAcc,false,AccSClass); 
			end;
	/*
		if (HasMultiCurrency) then begin
		EditField(h,v+=vs,f,"Domestic Sales A/C",Normal,DomSalesAcc,false,AccSClass); 
		EditField(h,v+=vs,f,"EU Sales A/C",Normal,EUSalesAcc,false,AccSClass); 
		EditField(h,v+=vs,f,"Export Sales A/C",Normal,ExpSalesAcc,false,AccSClass); 
		EditField(h3,v=6,20,"Domestic #VAT Code#",Normal,VATCodeDom,false,VATCodeSClass); 
		EditField(h3,v+=vs,20,"EU #VAT Code#",Normal,VATCodeEU,false,VATCodeSClass); 
		EditField(h3,v+=vs,20,"Export #VAT Code#",Normal,VATCodeExp,false,VATCodeSClass); 
		end else begin
	*/
      if (IsBooks and IsStandardProduct==false) then begin
				EditField(h,v+=vs,f,"#VAT# (A/C)",Normal,VATBAcc,false,AccSClass); 
				EditField(h,v+=vs,f,"Bank Fee",Normal,ExtraCostAcc,false,AccSClass); 
				EditField(h,v+=vs,f,"On Account",Normal,OnAccAcc,false,AccSClass); 
      end;
      if (HasSettlementDiscount) then begin
				EditField(h,v+=vs,f,"Settl. Discount",Normal,ERebAcc,false,AccSClass); 
      end;
      if (HasRussianPrepayment or (HasLocalization("LVA") and HasPrepayments)) then begin
        if (HasTaxMatrix==false) then begin
				EditField(h,v+=vs,f,"Avanso PVM",Normal,OnAccVATAcc,false,AccSClass); 
        end;
      end;
      if (HasSettlementDiscount) then begin
				EditField(h,v+=vs,f,"Settl. Discount #VAT#",Normal,VATERAcc,false,AccSClass); 
      end;
      if (IsStandardProduct) then begin
        if (HasVATZone==false) then begin
          EditField(h,v+=vs,f,"Pard. sąsk.",Normal,DomSalesAcc,false,AccSClass);
				if (HasTaxMatrix) then begin
            EditField(h,v+=vs,50,"Mokesčių šabl.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
				end else begin
					EditField(h,v+=vs,45,"PVM kd.",Normal,VATCodeDom,false,VATCodeSClass);    
          end;
        end;
      end;
  //  end;
      if (HasRussianPrepayment or HasPrepayments) then begin
        EditField(h,v+=vs,f,"Avanso sąsk.",Normal,OnAccAcc,false,AccSClass);
      end;
      if (BuildProductCode=="StandardRestaurant" or BuildProductCode=="StandardHealthcare") then begin
        EditField(h,v+=vs,f,"Nuolaidos sąsk.",Normal,DiscountAcc,false,AccSClass);
      end;
			if (HasLocalization("PRT")) then begin 
				StaticText(h,v+=48,"Kredito pažymos",false); 
				CheckBox(h,v+=14,0,"Naudoti kredito pard. sąsk. ir PVM kd.",CredSalesAccs);
				EditField(h,v+=24,55,"Pard.",Normal,CredDomSalesAcc,false,AccSClass); 
				EditField(h,v+=vs,45,"Vietinis PVM kd.",Normal,CredVATCodeDom,false,VATCodeSClass); 
			end;
      if (HasVATZone) then begin
        EditField(h,vm=(v+=2*vs),f,"#Domestic# Sales A/C",Normal,DomSalesAcc,false,AccSClass);
        EditField(h,v+=vs,f,VATZoneEditFieldLabelLIT(1) & " pard. sąsk.",Normal,EUSalesAcc,false,AccSClass);
        EditField(h,v+=vs,f,VATZoneEditFieldLabelLIT(2) & " pard. sąsk.",Normal,ExpSalesAcc,false,AccSClass);
        if (HasTaxMatrix) then begin
          EditField(h2+100,v=vm,50,"Viet. mok. šabl.",Normal,TaxTemplateCode,false,TaxTemplateSClass); 
          EditField(h2+100,v+=vs,50,VATZoneEditFieldLabelLIT(1) & "Mok. šabl.",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass); 
          EditField(h2+100,v+=vs,50,"Eksportuoti mok. šabl",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass); 
        end else begin
        if (HasLocalization("POL")) then begin
          EditField(h,v+=vs,f,"Vidinis PVM",Normal,IntARAcc,false,AccSClass);
        end;
        EditField(h2+100,v=vm,45,"Viet. PVM kd.",Normal,VATCodeDom,false,VATCodeSClass);
        EditField(h2+100,v+=vs,45,VATZoneEditFieldLabelLIT(1) & " pard. sąsk.",Normal,VATCodeEU,false,VATCodeSClass);
        EditField(h2+100,v+=vs,45,VATZoneEditFieldLabelLIT(2) & " pard. sąsk.",Normal,VATCodeExp,false,VATCodeSClass);
        end;
      end;
      ButtonFrame(h2,v=22,120,2,"Bazinė kaina");
			RadioButton(h2,v,0,0,"Be PVM",BasePriceInclVAT); 
			RadioButton(h2,v+=16,2,0,"Su PVM",BasePriceInclVAT);
      v = v + 24;
			if (HasModIN) then begin
				CheckBox(h2,v,0,"Faktūros atnaujina sandėlį",InvUpdStock); v = v + 16;
			end;
      if ((HasLocalization("HRV") and HasRussianPrepayment) or (HasLocalization("LVA") and HasPrepayments)) then begin
 //       CheckBox(h2,v,0,"",IPBookVAT); v = v + 16; //we output this later
				CheckBox(h2,v,0,"Post Prepayment #VAT#",PreIPBookVAT); v = v + 16; 
			end;
      if (HasMultiCurrency) then begin
        CheckBox(h2,v,0,"Kursų paj./nuost. per įplaukos eilutę",BookRateGainPerIPRow); v = v + 16;
      end;
			if (HasPrepayments) then begin 
				CheckBox(h2,v,0,"Naudoti išankst. apm. numerius",DemandPPNo);  v = v + 16;    
				CheckBox(h2,v,0,"Tik unikalūs išankst. apm. numeriai",ForceUniquePP); v = v + 16;       
			end;
			if (HasLocalization("PRT")==false) then begin 
				CheckBox(h2,v,0,"Skaičiuoti PVM įplaukoje",IPBookVAT); v = v + 16;
			end;
		end else begin
			SetWRect(64,80,470,190); 
			vs = 20; h = 150; f = 70; h2 = 300; v = 6;
			if (HasTaxMatrix) then begin
				EditField(h,v,f,"Mok. šabl.",Normal,TaxTemplateCode,false,TaxTemplateSClass); 
			end else begin
				EditField(h,v,f,"PVM kd.",Normal,VATCodeDom,false,VATCodeSClass); 
			end;
      v = v + 42; 
      ButtonFrame(h,v,120,2,"Kaina");
      RadioButton(h,v,0,0,"Be PVM",BasePriceInclVAT);
      RadioButton(h,v+=16,2,0,"Su PVM",BasePriceInclVAT);
      if (HasModIN) then begin
        CheckBox(h,v+=32,0,"Faktūros atnaujina sandėlį",InvUpdStock);
      end;
      if (HasModSL and HasLocalization("PRT")==false) then begin 
        CheckBox(h,v+=32,0,"Post Receipt #VAT#",IPBookVAT);
      end;  
    end;
  end;
  EndWindow;
end;

window IDEALLitTaxXmlEClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer") //!!TRANSLATE
begin
  real h,v,vs;
  boolean NextLine;
  WindowBegin("IDEAL - Apibrėžti i.SAF",IDEALLitTaxXmlEClass,CGEcW,RcType); //!!TRANSLATE
  SetWRect(20,80,400,290);
  PeriodField(h=140,v=6,"Periodas"); //!!TRANSLATE
  vs=20;
  EditFieldTL(h,v+=vs,150,"Serija",M4UStr,Normal,21,f4,false,0); //!!TRANSLATE
  EditFieldTL(h,v+=vs,100,"PVM kodas",M4UStr,Normal,20,f2,false,VATCodeSClass); //!!TRANSLATE
  EditFieldTL(h,v+=vs,80,"Neįtraukti mok. sąl.",M4UStr,Normal,21,f1,false,PDSClass); //!!TRANSLATE
  EditFieldTL(h,v+=vs,-20,"Neįtr. pirkėjo kateg.",M4UStr,Normal,255,f10,false,CCatSClass); // EVS: HAL-260
  EditFieldTL(h,v+=vs,-20,"Neįtr. PVM kodo",M4UStr,Normal,255,f11,false,VATCodeSClass); // EVS: HAL-519
  CheckBox(h,v+=30,0,"Įtraukti įplaukas ir mokėjimus",flags[0]); //!!TRANSLATE
  CheckBox(h,v+=16, 0,"Sukeisti įmonės kodą su PVM mok. kodu",flags[8]); //!!TRANSLATE
  CheckBox(h,v+=16, 0,"Įtraukti POS faktūras",flags[9]);// Edit ************************** BPI Ukraine - KramarAlexandr - 02, 02 07 2019 y. at 11:21:00 PM

  EndWindow;
end;

window IDEALLitiSAFRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer") //!!TRANSLATE
begin
  real h,v,vs;
  boolean NextLine;
  WindowBegin("IDEAL - Apibrėžti i.SAF",IDEALLitiSAFRClass,CGRcW,RcType); //!!TRANSLATE
  SetWRect(20,80,400,290);
  PeriodField(h=140,v=6,"Periodas"); //!!TRANSLATE
  vs=20;
  EditFieldTL(h,v+=vs,150,"Serija",M4UStr,Normal,21,f4,false,0); //!!TRANSLATE
  EditFieldTL(h,v+=vs,100,"PVM kodas",M4UStr,Normal,20,f2,false,VATCodeSClass); //!!TRANSLATE
  EditFieldTL(h,v+=vs,80,"Neįtraukti mok. sąl.",M4UStr,Normal,21,f1,false,PDSClass); //!!TRANSLATE
  EditFieldTL(h,v+=vs,-20,"Neįtr. pirkėjo kateg.",M4UStr,Normal,255,f10,false,CCatSClass); // EVS: HAL-260
  EditFieldTL(h,v+=vs,-20,"Neįtr. PVM kodo",M4UStr,Normal,255,f11,false,VATCodeSClass); // EVS: HAL-519
  CheckBox(h,v+=30,0,"Įtraukti įplaukas ir mokėjimus",flags[0]); //!!TRANSLATE
  CheckBox(h,v+=16, 0,"Sukeisti įmonės kodą su PVM mok. kodu",flags[8]); //!!TRANSLATE
  CheckBox(h,v+=16, 0,"Įtraukti POS faktūras",flags[9]);// Edit ************************** BPI Ukraine - KramarAlexandr - 02, 02 07 2019 y. at 11:21:00 PM
  EndWindow;
end;

window PLDefDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,l,v;

  h2 = 270;
  WindowBegin("Kainoraštis",PLDefDClass,CGview,-);
  UseView(PLDefVc);
  SetWRect(20,80,550,370);
  EditField(h=110,v=10,80,"Kodas",St_i,Code,false,0);
  EditField(h2,v,-40,"Aprašymas",Normal,Comment,false,0);
  if (IsEnterprise) then begin
  EditField(h,v+=20,80,"Periodas",Normal,StartDate,false,PasteCurDate);
  EditField(h2,v,80,"-",Normal,EndDate,false,PasteCurDate);
  EditField(420,v,-40,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
    EditField(h,v+=20,80,"Laikas",Normal,StartTime,false,PasteCurTime);
  EditField(h2,v,80,"-",Normal,EndTime,false,PasteCurTime);
  EditField(h,v+=20,80,"Pakeisti",Normal,PLReplCode,false,PLDefSClass);
    if (HasBuyBack) then begin
  EditField(h,v+=20,80,"Perpirk. tiekėjas",Normal,BBVECode,false,VESClass);
  EditField(h,v+=20,80,"Sukaup.perp.sąsk.",Normal,BBVarAcc,false,AccSClass);
    end;
  end else begin
    if (HasModHotel and HasPriceLists) then begin
      EditField(h,v+=20,80,"Periodas",Normal,StartDate,false,PasteCurDate); 
      EditField(h2,v,80,"-",Normal,EndDate,false,PasteCurDate);
      EditField(h,v+=20,80,"Pakeisti",Normal,PLReplCode,false,PLDefSClass); 
    end;
    if (HasMultiCurrency) then begin
      EditField(h,v+=20,80,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass); 
    end;
  end;
//  EditField(230,v,80,"V-Cd",Normal,VATCode,false,VATCodeSClass);
  if (HasAdvancedPricing) then begin
  h = 7; v=v+19; l = 35;
  MatrixBegin(h,v+=22,h+320,-11,-,200);
  //StaticText(h=45,v-5,"Kodas",false);
  MatColTL(1,h=34,"Eilutės tipas",0,M4Set,Normal,14444,CodeType,false,SetSClass);// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 10:09:56
  MatCol(1,h+=84,"Prekės grupė",60,ItemCode,false,ITSClass);
  MatCol(1,-100,"Formulė",5,Formula,false,PFormSClass);
	if (UseTaxTemplatesforTaxCalc) then begin
		MatCol(1,-40,"Mok. kd.",10,TaxTemplateCode,false,TaxTemplateSClass);
	end else begin
		MatCol(1,-45,"PVM kd.",5,VATCode,false,VATCodeSClass);
	end;
	EndMatrix;
  ButtonFrame(h=360,v=83,150,3,"PVM");
  end else begin
    ButtonFrame(h=250,v+=30,150,3,"PVM");
  end;
  RadioButton(h,v,0,0,"Neįskaitant",InclVAT);
  if (HasExtTax) then begin
  RadioButton(h,v+=16,1,0,"Įskaitant, įsk. pap. mok.",InclVAT);
  end;
  RadioButton(h,v+=16,2,0,"Įskaitant",InclVAT);
  EndFrame;
  if (HasAdvancedPricing) then begin
  ButtonFrame(h=360,v+=40,150,3,"Tipas");
  RadioButton(h,v,0,0,"Nuolaida",DepPrice);
  RadioButton(h,v+=16,1,0,"Kiekinės nuol. vertės",DepPrice);
    if (HasBuyBack) then begin
  RadioButton(h,v+=16,2,0,"BuyBack",DepPrice); //!!SAMETRANSLATION
end;
    EndFrame;
  end;
  EndWindow;
end;

window IDEALLitVATRegIVEClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("IDEAL - Išrasomų PVM s/f registras",IDEALLitVATRegIVEClass,CGEcW,RcType);
  SetWRect(20,80,400,390);
  vs = 20; h = 120; v = 6; h2 = 160;
  PeriodField(h, v=6, "Periodas");
  EditFieldTL(h, v+=20, 150,"Serija", M4UStr, Normal, 21, f4, false, 0);
  EditFieldTL(h, v+=20, 80,"PVM kodas", M4UStr, Normal, 21, f2,false, VATCodeSClass);
  EditFieldTL(h, v+=20, 80,"Netr. mok. sąl.", M4UStr, Normal, 21, f1, false, PDSClass);
  ButtonFrame(h=120,v+=40,130, 5, "PVM Sritis");
  CheckBox(h, v, 0, "Vietinė",flags[5]);
  CheckBox(h, v+=16, 0, VATZoneEditFieldLabelLIT(1), flags[6]);
  CheckBox(h,v+=16,0,VATZoneEditFieldLabelLIT(1) & "(su PVM)",flags[9]);
  CheckBox(h,v+=16,0,VATZoneEditFieldLabelLIT(2),flags[7]);
  CheckBox(h,v+=16,0,VATZoneEditFieldLabelLIT(2) & "(su PVM)",flags[10]);
  ButtonFrame(h, v+=41, 123, 2, "Rūšiuoti pagal");
  RadioButton(h, v, 0, 0, "Faktūros datą", flags[1]);
  RadioButton(h, v+=16, 1, 0, "Operacijos datą", flags[1]);
  CheckBox(h, v+=30, 0, "Vietoje PVM mok. kd. naudoti Įmonės kd.", flags[8]);
  StaticText(h, v+=40, "Bylos praplėtimas turi būti '.ffdata'", false);
  EndWindow;
end;

window IDEALSLVATLitRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  string 255 country;
  country = ""; 
  if (HasLocalization("KEN")) then begin  
    country = "(Kenya 1)"; 
  end;
  WindowBegin("IDEAL - Išrašomų PVM s/f registras FR0672",IDEALSLVATLitRClass,CGRcW,RcType); 
  SetWRect(20,80,400,320);
  vs = 20; h = 100; v = 6; h2 = 160;
  PeriodField(h,v=6,"Periodas");
  EditFieldTL(h,v+=20, 150,"Serija",   M4UStr,Normal,21,f4,false,0);
  EditFieldTL(h,v+=20, 150,"Išsk. mok. sąl.",   M4UStr,Normal,21,f1,false,PDSClass);
  EditFieldTL(h,v+=20, 50,"PVM kodas",M4UStr,Normal,10,FirstAcc,false,VATCodeSClass);
  ButtonFrame(h,v+=40,130,3,"PVM sritis");
  CheckBox(h,v,0,"Vietinė",flags[5]);
  CheckBox(h,v+=16,0,VATZoneEditFieldLabelLIT(1),flags[6]);
  CheckBox(h,v+=16,0,VATZoneEditFieldLabelLIT(2),flags[7]);
  ButtonFrame(h,v+=41,123,4,"Rūšiavimas");
  RadioButton(h,v,0,0,"Faktūros nr.",flags[1]);
  RadioButton(h,v+=16,1,0,"Faktūros data",flags[1]);
  RadioButton(h,v+=16,2,0,"Ofic. ser. nr.",flags[1]);
  RadioButton(h,v+=16,3,0,"PVM kodas",flags[1]);
  CheckBox(h,v+=30,0,"Vietoje PVM mok. kd. naudoti Įmonės kd.",flags[8]);

/*
  ButtonFrame(h=50,vm=(v+=41),123,2,"Funkcija");
  RadioButton(h,v,0,0,"Peržiūra",ArtMode);
  RadioButton(h,v+=16,1,0,"Išsamiai",ArtMode);
  */
  EndWindow;
end;

window GiftVoucherTouchScreenDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad")
begin
  real h,h2,h3,h4,hm,l,v,v3,vm,vs,v4;
  real fieldh,fieldh2,keypadh,keypadh2,keypadv,fntsize;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  WindowBegin("Dovanų kupono apmokėjimas",GiftVoucherTouchScreenDClass,CGother,RcType);
  AutoSizeWindow(false);
//  Modality(kModalityGlobal);
  UseView(RcVc);
  SetWRect(80,200,650,510);
  AutoSizeWindow(false);
  SetupColumWithKeypadWindow(fieldh,fieldh2,keypadh,keypadh2,keypadv,vs,fntsize);

  h = fieldh; h2 = 170; v=40;

  EditFieldTLX(h,v=6,150,"Dovanų kuponas",M4Str,Normal,100,25,patM4black,f1,false,GCSSClass); 
  EditFieldTLX(h,v+=35,150,"Suma",M4Val,ViewOnly,100,25,patM4black,vals0,true,0); 

  if (LMb.POSButtonsPosition==kPOSButtonsPositionRight) then begin
    keypadh = keypadh + 40;
    keypadh2 = keypadh2 + 40;
  end;
  v = keypadv;
  POSKeyPad(v,keypadh,v + 250,keypadh2,2,"NPTSPaymentToolKeyPad",kKeyPadEnter);  
  v = v + 255;
  SplitButton(keypadh,v,keypadh2,v + vs,2,"CancelCCPayTouchScreenDClass","Atšaukti" & F_Label("F2"),"ProceedGiftVoucherTouchScreenDClass","Tęsti" & F_Label("F1"),20);  
  EndWindow;
end;

window AddHeaderCommentNPTSSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,hm,l,v,v3,vm,vs;
  WindowBegin("Change Comment",AddHeaderCommentNPTSSClass,CGother,RcType);
  UseView(RcVc);
  Modality(kModalityGlobal);//kModalityAboveParent
  SetWRect(80,200,550,360);
  vs = 40;
  EditFieldTL(h=110,v=26,-20,"Comment",M4STR,Normal,200,f1,false,0);
	v=v+30;
  ColourPushButton(110,v,210,v+60,"CancelAndOverrideLogout","Cancel<BR>F2",20);
  ColourPushButton(240,v,340,v+60,"ProceedAddHeaderComment","Proceed<BR>F1",20);
  EndWindow;
end;

window IVCashLClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  Integer pos;
  WindowBegin("POS faktūros",IVCashLClass,CGmlist,-); 
  SetWRect(20,80,650,291);
  Sizeable(-1,-1,0,0);
  SpawnClass(IVCashDClass);
  UseView(IVCashVc);
  FormName(PrintIVCashL);
  RecordList(4,17,-21,-39);
  if (HasLocalization("HRV,PRT,SVN")) then begin
    RlColKey(4,4,"Nr.",SerNr,false,SerNr); 
    pos = 101;
    RlColKey(pos,pos,"Oficialus Nr.",OfficialSerNr,false,OfficialSerNr); 
    pos = pos + 110;
  end else begin
    RlColKey(4,4,"Nr.",SerNr,false,SerNr); 
    pos = 101;
  end;  
  RlColKey(pos,pos,"OK",OKFlag,false,OKFlag);  
  pos = pos + 28;
  RlColKey(pos,pos,"Fakt. data",InvDate,false,InvDate); 
  pos = pos + 80;
  RlColKey(pos,pos,"Pirk.",CustCode,false,CustCode); 
  pos = pos + 90;
  RlColKey(pos,pos,"Pavadinimas",Addr0,false,Name);
  pos = pos + 90;// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 November 2017 18:40:58
  RlCol(pos,pos,"Comment",InvComment,false);// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 November 2017 18:40:15
  RlColKey(-115,-115,"Viso",Sum4,true,Sum4);
  RlColKey(-25,-25,"D/K",NLFlag,true,NLFlag);
  RlCol(-1,-1,"",Invalid,true);
  SearchField("Ieškoti");
  SpecialMenu("OK",'G',0,"OKIVCashLsm"); 
  SpecialMenu("Sinchronizuoti bazinius registrus ir parametrus",' ',0,"SynchServToOfflineSettingsm");
  SpecialMenu("Sinchronizuoti Offline faktūras",' ',0,"SynchOfflineToServsm");
  EndWindow;
end;

window AmendLineNPTSSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad")
begin
  real h,h2,h3,h4,hm,l,v,v3,vm,vs,v4,v5,v6;
  real fieldh,fieldh2,keypadh,keypadh2,keypadv,fntsize;
  Integer wn,mwn;
  Boolean testf;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  wn = CurWindow;
  if (wn>0) then begin
    mwn = MotherWindow(wn);
  end;
  WindowBegin("Taisymo eilutė",AmendLineNPTSSClass,CGother,RcType);
//  Modality(kModalityGlobal);
  UseView(RcVc);
  SetWRect(80,200,730,600);
  AutoSizeWindow(false);

  SetupColumWithKeypadWindow(fieldh,fieldh2,keypadh,keypadh2,keypadv,vs,fntsize);


  switch (GuiType) begin
    case kGuiAndroid:
      vs = 20;
      EditFieldTL(h=fieldh,v=6,70,"Prekė",M4UStr,ViewOnly,20,AccStr,false,0); 
      EditFieldTL(h,v+=vs,-20,"Pavad.",M4Str,Normal,255,f1,false,0); 
      EditFieldTL(h,v+=vs,70,"Kiek.",M4Qty,Normal,0,vals0,true,0); 
  
      EditFieldTL(h,v+=vs,70,"Nuolaida",M41Val,Normal,0,vals2,true,0); 
//      EditFieldTL(h,v+=vs,70,"",M4Val,Normal,0,vals3,true,0);
//      EditFieldTL(h,v+=vs,70,"",M4Code,Normal,10,f2,false,VATCodeSClass);
      testf = false;
      if (mwn>0) then begin
        switch (GetWindowClass(mwn)) begin
          case "IVDClass":
            EditFieldTL(h,v+=vs,70,"Vieta",M4Code,Normal,10,f3,false,LocationSClass); 
          case "RestAccDClass":
            EditFieldTL(h,v+=vs,70,"Patiekalas",M4Str,Normal,255,f11,false,MealCourseSClass); 
            EditFieldTL(h,v+=vs,70,"Vietos nr.",M4Str,Normal,255,f12,false,0);
        end;
      end;
    otherwise
      vs = 20;
  EditFieldTL(h=100,v=6,70,"Prekė",M4UStr,ViewOnly,20,AccStr,false,0);
  EditFieldTL(h2=250,v,-20,"Pavadinimas",M4Str,Normal,255,f1,false,0);
  EditFieldTL(h,v+=vs,70,"Kiekis",M423Val,Normal,0,vals0,true,0);
  EditFieldTL(h2,v,70,"Kaina",M4Val,Normal,0,vals1,true,0);
  EditFieldTL(h3=400,v,70,"Nuolaida",M41Val,Normal,0,vals2,true,0);
  EditFieldTL(h4=550,v,70,"Suma",M4Val,Normal,0,vals3,true,0);
  if (UseTaxTemplatesforTaxCalc) then begin
    EditFieldTL(h,v+=vs,70,"#VAT# Code",M4Code,Normal,10,f2,false,TaxTemplateSClass);
  end else begin
    EditFieldTL(h,v+=vs,70,"PVM kodas",M4Code,Normal,10,f2,false,VATCodeSClass);
  end;
  EditFieldTL(h,v+=vs,140,"RMI Number",M4Str,Normal,10,f4,false,0); // Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 November 2017 19:42:19
  testf = false;
  if (mwn>0) then begin
    switch (GetWindowClass(mwn)) begin
      case "IVDClass":
        EditFieldTL(h,v+=vs,70,"Patalpa",M4Code,Normal,10,f3,false,LocationSClass);
      case "RestAccDClass":
        EditFieldTL(h,v+=vs,70,"Valgis",M4Str,Normal,255,f11,false,MealCourseSClass);
            EditFieldTL(h2,v,70,"Vietos nr.",M4Str,Normal,255,f12,false,0);
        end;
    end;
  end;

  switch (GuiType) begin
    case kGuiAndroid:
      v = keypadv;
      POSKeyPad(v,keypadh,v + 250,keypadh2,2,"NPTSPaymentToolKeyPad",kKeyPadEnter);  
      v = v + 250;
      SplitButton(keypadh,v,keypadh2,v + 2*vs,2,"CancelAndOverrideLogout","Atšaukti" & F_Label("F2"),"ProceedAmendLineNPTSSClass","Tęsti" & F_Label("F1"),20);  
    otherwise
      v = keypadv + 70;
      if (LMb.POSButtonsPosition==kPOSButtonsPositionRight) then begin
        keypadh = keypadh + 100;
        keypadh2 = keypadh2 + 100;
      end;
  POSKeyPad(v,keypadh,v + 250,keypadh2,2,"NPTSPaymentToolKeyPad",kKeyPadEnter);  
  v = v + 255;
  SplitButton(keypadh,v,keypadh2,v + 2*vs,2,"CancelAndOverrideLogout","Atšaukti" & F_Label("F2"),"ProceedAmendLineNPTSSClass","Tęsti" & F_Label("F1"),20); 
  end;

  EndWindow;
end;

window IVCashDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  Integer rn;
  
  WindowBegin("POS faktūra",IVCashDClass,CGview,-);
  SetWRect(20,80,700,400);
  Sizeable(-1,-1,0,0);
  UseView(IVCashVc);
  vs=20;
  if (CheckOffLineRecords(false)) then begin
  StaticText(50,20,"Yra faktūrų, kurias reikia sinchronizuoti.",false);
  StaticText(50,40,"Norėdami sukurti naujas kasos faktūras, pasirinkite",false);
  StaticText(50,60,"Sinchronizuoti Offline faktūras per faktūrų sąrašo meniu 'Specialus'",false);
  end else begin
  ActiveFieldOnOK("CashValue");
  Tile(0,48+24,false,"",CustCode);
  EditField(75,vm=(v=6), 82,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95, "Pirkėjas",Normal,CustCode,false,CUSClass);
  EnterSkip(Math);
  EditField(h=256,v=vm,-40,"Pavadinimas",Normal,Addr0,false,0);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs,100,"Lojalumo kort.",Normal,LoyaltyCardNr,false,LoyaltyCardSClass);
      EditField(h=456,v,-40,"Oficialus ser. nr.",Normal,OfficialSerNr,false,LegalInvNrSClass);
  end;
  TileButton(1,"Mokėjimas");
  TileButton(2,"Prekės");
  TileButton(3,"Data");
  TileButton(4,"Patalpa");
  TileButton(5,"Valiuta");
//  CheckBox(230,v,0,"OK",OKFlag);
//  CheckBox(330,v,0,"Pirk. operc. informac.",ARonTR);
  Tile(1,90,false,"1",CashValue);//PayDeal
  vs = 20;h=75;h2=160;h3=310;h4=540;
  EditField(h2,v=6,80,"Grynieji",Normal,CashValue,true,0);
//  EditField(h3,v,70,"POSSalesNo",Normal,POSSalesNo,false,0);
  EnterSkip(PayDeal);
  EditField(h4,v,70,"Grąža",ViewOnly,RetValue,true,0);
  EditField(h,v+=vs,30,"Mok. terminas",Normal,PayDeal,false,RestPMSClass);
  EditField(h2,v,80,"Sumok.",Normal,RecValue,true,0);
  EditField(h3,v,100,"Kred. kort.",Normal,CreditCard,false,CreditCardSClass);
  EditField(h4,v,70,"Autorizuota",Normal,AuthorizationCode,false,0);
  EditField(h,v+=vs,30,"Mok. būdas",Normal,PayDeal2,false,RestPMSClass);
  EditField(h2,v,80,"Sumok.",Normal,RecValue2,true,0);
  EditField(h3,v,100,"Kred. kort.",Normal,CreditCard2,false,CreditCardSClass);
  EditField(h4,v,70,"Autorizuota",Normal,AuthorizationCode2,false,0);
  if (StandardHansa==false) then begin
  EditField(h3,v+=vs,100,"Lojalumo taškai",ViewOnly,Points,true,0);
  EditField(h4,v,70,"Narystės lygis",ViewOnly,LCMLevel,false,LCMemberLevelSClass);
  end;
//  EditField(330,-26,95,"Bazė",ViewOnly,BaseSum4,true,0);
  EnterSkip(Math);
  Tile(2,120,true,"2",Math);
  CheckBox(30,-21,0,"OK",OKFlag); 
  EditField(-433,-21,80,"PVM",ViewOnly ,Sum3,true,0);
  EditField(-283,-21,95,"Tarp. suma",ViewOnly ,Sum1,true,0);
  EditField(-133,-21,95,"VISO",ViewOnly ,Sum4,true,0);
  v = 24;
  MatrixBegin(4,v,-50,-29,-,200);
  MatTypedRow(stp);
    MatOverStrike(ovst);
  Flip(0);
  MatCol(t=kInvoiceRowTypeNormal,32,"Prekė",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
  MatCol(t,144,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,144,"Kiekis",0,Quant,true,0); 
  end;
  EnterSkip(ArtCode);
  MatText(t=kInvoiceRowTypeHeader,32,"Antraštė",true); 
  MatCol(t,100,"",0,Spec,false,0); 
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Prekė",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
  MatCol(t,144,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,144,"Kiekis",0,Quant,true,0); 
  end;
  EnterSkip(ArtCode);
  MatText(t=kInvoiceRowTypeVoid,28,"Tuščia",false); 
  MatColTL(t,65,"Vart.",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,100,"Prekė",0,ArtCode,false,INSClass);
  if (HasVarieties) then begin
  MatCol(t,150,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,150,"Kiekis.",0,Quant,true,0); 
  end;
  MatCol(t,140,"Kaina be PVM",0,PriceExclVAT,true,0);// Edit ************************** BPI Ukraine - KramarAlexandr - 02, 06 03 2018 y 07:49:30
  MatCol(t,190,"Kaina",0,Price,true,0);
  MatCol(t,250,"Aprašymas",0,Spec,false,0);
  MatCol(t,-195,"Ser. Nr",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-110,"%",0,vRebate,true,0);
  MatCol(t,-80,"Suma",0,Sum,true,0);
    MatText(t=kInvoiceRowTypeUpdateMark,28,"Vart.",false);
  MatColTL(t,85,"Vart.",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,150,"Aprašymas",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeGiftVoucherPayment,32,"GVR",true); 
  MatCol(t,68,"",0,GCNr,false,GCSSClass);
  MatCol(t,108,"Mok. būdas",0,PayMode,true,PMSClass);
  MatCol(t,148,"",0,Spec,false,0);
  MatCol(t,-84,"Suma",0,Sum,true,0);
 //MatCol(t,-45,"",0,VATCode,false,VATCodeSClass);  
  if (StandardHansa==false) then begin
   MatText(t=kInvoiceRowTypeGiftVoucherSold,32,"GV",true); 
  end;
  MatCol(t,68,"",0,GCNr,false,GCSClass);
  MatCol(t,141,"",0,Spec,false,0);
  MatCol(t,-94,"Suma",0,Sum,true,0);
  MatCol(t,-45,"",0,VATCode,false,VATCodeSClass);  
  MatText(t=kInvoiceRowTypeCashPayment,32,"CASH",true); 
  MatCol(t,68,"Suma",0,Sum,true,0);
  MatCol(t,141,"Grąža",0,BasePrice,true,0); 
  MatCol(t,201,"M. būdas",0,PayMode,true,PMSClass); 
  MatCol(t,231,"Apibr.",0,Spec,false,0); 
  MatCol(t,355,"",0,FrRate,true,0); 
  MatCol(t,400,"",0,ToRateB1,true,0); 
  MatCol(t,445,"",0,ToRateB2,true,0); 
  MatCol(t,490,"",0,BaseRate1,true,0); 
  MatCol(t,535,"",0,BaseRate2,true,0); 
  MatCol(t,580,"",0,CurncyCode,false,0); 
  MatText(t=kInvoiceRowTypeCashWithdrawal,32,"CW",true);
  MatCol(t,68,"Suma",0,Sum,true,0);
  MatCol(t,141,"M. būdas",0,PayMode,true,PMSClass);
  MatCol(t,181,"Apibr.",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeCreditCardPayment,32,"CC",true); 
  MatCol(t,68,"Suma",0,Sum,true,0);
  MatCol(t,141,"P. būdas",0,PayMode,true,PMSClass);
  MatCol(t,181,"",0,CreditCard,false,CreditCardSClass);
  MatCol(t,308,"Autorizacija",0,AuthorizationCode,false,0); 
  MatCol(t,378,"Kvito nr.",0,CCReceiptNr,false,0);  
  MatCol(t,438,"Spec",0,Spec,false,0);  
  MatText(t=kInvoiceRowTypeSwishPayment,32,"Swish",true);  
  MatCol(t,68,"Suma",0,Sum,true,0); 
  MatCol(t,141,"Mok. būdas",0,PayMode,true,PMSClass);
  MatCol(t,181,"",0,CreditCard,false,CreditCardSClass);
  MatCol(t,308,"Autorizacija",0,AuthorizationCode,false,0);
    MatCol(t,378,"Apr.",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeQRPayment,32,"QR",true);
  MatCol(t,68,"Suma",0,Sum,true,0);
  MatCol(t,141,"Mok. būdas",0,PayMode,true,PMSClass);
  MatCol(t,181,"Autorizacija",0,AuthorizationCode,false,0);
  MatCol(t,422,"Apr.",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeChequePayment,32,"CHQ",true);
  MatCol(t,68,"Suma",0,Sum,true,0);
  MatCol(t,141,"P. būdas",0,PayMode,true,PMSClass);
  MatCol(t,181,"Čekio Nr.",0,CheckNr,false,0);
  MatCol(t,308,"Apibr.",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeOnAccountPayment,32,"OnAcc",true);  
  MatCol(t,68,"Suma",0,Sum,true,0); 
  MatCol(t,141,"M. būdas",0,PayMode,true,PMSClass); 
  MatCol(t,201,"Apibr.",0,Spec,false,0); 
  MatCol(t,358,"",0,FrRate,true,0); 
  MatCol(t,403,"",0,ToRateB1,true,0); 
  MatCol(t,448,"",0,ToRateB2,true,0); 
  MatCol(t,493,"",0,BaseRate1,true,0); 
  MatCol(t,538,"",0,BaseRate2,true,0); 
  MatCol(t,583,"",0,CurncyCode,false,0); 

  MatText(t=kInvoiceRowTypeSplitItem,32,"SPLIT",true); 
  MatCol(t,68,"Prekė",0,ArtCode,true,0);
  MatCol(t,141,"Kiekis",0,Quant,true,0);
  MatCol(t,181,"Spec",0,Spec,false,0); 
  MatCol(t,288,"Į prekę",0,SplitArtCode,false,0);
  MatCol(t,348,"Išs. kiekis",0,SplitQuant,true,0);
  MatCol(t,388,"Spec",0,SplitArtName,false,0); 
  MatCol(t,-60,"Faktorius",0,SplitFactor,true,0);
  if (StandardHansa==false) then begin
    MatText(t=kInvoiceRowTypeMultiBuyDiscount,32,"Susij. pirk. nuol.",true);
  end;
  MatCol(t,152,"",0,MBRCode,false,0);
  MatCol(t,192,"",0,ArtCode,false,INSClass);
  MatCol(t,-400,"",0,Spec,false,0);
  MatCol(t,-270,"",0,Quant,true,0);
  MatCol(t,-235,"",0,Price,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);

  MatText(t=kInvoiceRowTypeReturnIVNr,32,"Faktūros Nr.",true);
  MatCol(t,108,"Faktūros Nr.",0,OrgIVNr,true,0);
  MatCol(t,184,"Stand. problema",0,StandProblemCode,false,0);
  if (StandardHansa==false) then begin
  MatCol(t,254,"Apr.",0,Spec,false,0);

  MatText(t=kInvoiceRowTypeLoyaltyPointsPayment,32,"LOYPA",true); 
  MatCol(t,68,"Suma",0,Sum,true,0);
  MatCol(t,141,"Taškai",0,Points,false,0);
  MatCol(t,181,"M. Būdas",0,PayMode,true,PMSClass);
  MatCol(t,221,"Apr.",0,Spec,false,0);
  MatCol(t,348,"",0,FrRate,false,0);
  MatCol(t,388,"",0,ToRateB1,false,0);
  MatCol(t,428,"",0,ToRateB2,false,0);
  MatCol(t,468,"",0,BaseRate1,false,0);
  MatCol(t,508,"",0,BaseRate2,false,0);
  MatCol(t,548,"",0,CurncyCode,false,0);
  MatText(t=kInvoiceRowTypeLoyaltyPointsBonus,28,"LOYBO",true); 
  MatCol(t,68,"Taškai",0,Points,true,0);
  MatCol(t,141,"Apr.",0,Spec,false,0);
  end;
  MatText(t=kInvoiceRowTypeSalesAssistant,28,"ASIST",true);  
  MatCol(t,68,"Asistentas",0,SalesAssistant,false,0);
  MatCol(t,141,"Spec",0,Spec,false,0);  
  Flip(1);
  MatCol(t=kInvoiceRowTypeNormal,184,"Aprašymas",0,Spec,false,0);
  if (UserCanAction("ShowSerialNronPOSInvoices",false)) then begin
    MatCol(t,-270,"Ser.nr.",0,SerialNr,false,SerialNrSClass);
  end;
  MatCol(t,-270,"Kaina ne PVM",0,PriceExclVAT,true,0);// Edit ************************** BPI Ukraine - KramarAlexandr - 02, 06 03 2018 y.  07:53:08
  MatCol(t,-225,"Vnt. kn.",0,Price,true,0);
  MatCol(t,-155,"%",0,vRebate,true,0);
  MatCol(t,-125,"Suma",0,Sum,true,0);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-70,"M-kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-45,"",0,VATCode,false,VATCodeSClass);  
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,184,"Aprašymas",0,Spec,false,0);
  if (UserCanAction("ShowSerialNronPOSInvoices",false)) then begin
    MatCol(t,-270,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  end;
  MatCol(t,-175,"Vnt. kaina",0,Price,true,0);
  MatCol(t,-105,"%",0,vRebate,true,0);
  MatCol(t,-70,"Suma",0,Sum,true,0);
  MatCol(t,-45,"",0,VATCode,false,VATCodeSClass);  
  Flip(2);
  MatCol(t=kInvoiceRowTypeNormal,184,"Aprašymas",0,Spec,false,0);
  MatCol(t,-200,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  if (HasObjects) then begin
  MatCol(t,-100,"Objektas",0,Objects,false,ObjSClass);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,184,"Aprašymas",0,Spec,false,0);
  MatCol(t,-200,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-100,"Objektai",0,Objects,false,ObjSClass);
  Flip(3);
  MatCol(t=kInvoiceRowTypeNormal,184,"Aprašymas",0,Spec,false,0);
  MatCol(t,-200,"Vėl. siuntimas",0,OrdQuant,false,0);
  MatCol(t,-100,"Apmok.",0,DownPaidSum,false,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,184,"Aprašymas",0,Spec,false,0);
  MatCol(t,-200,"Vėlus siuntimas",0,OrdQuant,false,0);
  MatCol(t,-100,"Apmok.",0,DownPaidSum,false,0);
  Flip(4);
  MatCol(t=kInvoiceRowTypeNormal,184,"Aprašymas",0,Spec,false,0);
  MatCol(t,-300,"RMI Number",0,RMINumber,false,0);// Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 15 November 2017 11:29:46
  MatCol(t,-100,"Pardavėjas",0,Salesmen,false,0);
  MatCol(t,-45,"",0,RvrsVATCode,false,VATCodeSClass); 
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Prekės būklė",'I','I',0,"ItemStatusIVCashDsm");
  RowMenuItem(0,"Ankstesnių pardavimų kaina",' ',' ',0,"IVCashLastSPrsm");
  RowMenuItem(0,"Add Cash Payment",' ',' ',0,"CashLineIVCashDsm");
  RowMenuItem(0,"Add Credit Card Payment",' ',' ',0,"CreditCardLineIVCashDsm");
  RowMenuItem(0,"Add Cash Withdrawal",' ',' ',0,"CashWithdrawalLineIVCashDsm");
  EndRowMenu;
  EndMatrix;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,4,"D"); 
  Tile(3,110,false,"3",InvDate);
  vs = 20; h1 = 95; h2 = 256; h3 = 486;
  EditField(h1,vm=(v=6),82,"Faktūros data",Normal,InvDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Apmok. data",Normal,PayDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Oper. data",Normal,TransDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Pardavėjas",Normal,SalesMan,false,UserSClass);
    EditField(h1,v+=vs,82,"Nuoroda",Normal,RefStr,false,0); 
  EditField(h2,v=vm,135,"Mūsų nuoroda",Normal,OurContact,false,0);
  EditField(h2,v+=vs, 135,"Jūsų asmuo",Normal,ClientContact,false,ContactSClass);
  EditField(h2,v+=vs, 50,"Operac. laikas",Normal,TransTime,false,PasteCurTime);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,82,"Prižiūrėtojas",Normal,Supervisor,false,SupervisorSClass);
    EditField(h2,v+=vs,82,"PVM nr.",Normal,VATNr,false,0);
  end;
  if (HasLocalization("SVN")) then begin
    EditField(h2,v+=vs,-40,"Neteis. mokesč. ID",ViewOnly,TaxAdminServSeal,false,0);
  end;
//  EditField(h3,v=vm,50,"POS nr.",Normal,POSNr,true,0);
  EditField(h3,v=vm,50,"Kasos ap. nr.",Normal,LocalMachineCode,false,0);
  EditField(h3+110,v=vm,50,"Stalčius",Normal,DrawerCode,false,0);
  if (StandardHansa==false) then begin
    EditField(h3,v+=vs,-40,"Oficialus nr. 2",Normal,OfficialSerNr2,false,LegalInvNrSClass);
    EditField(h3,v+=vs,50,"Filialas",ViewOnly,BranchID,false,0); 
    CheckBox(h3+110,v,0,"Fiskalinė faktūra",FiscalFlag);
    EditField(h3,v+=vs,82,"Pakuotojas",Normal,Bagger,false,BaggerSClass);
    CheckBox(h3+110,v,0,"Kvitas su PVM",IPBookVAT);
    CheckBox(h3+110,v+vs,0,"Ar grąžintas PVM",VATRetFlag);// Edit ************************** BPI Ukraine - KramarAlexandr - 05, 28 06 2019 y. at 4:12:20 PM
    if (HasLocalization("SWE")) then begin
      EditField(h2,v+=vs,82,"Grynųjų kvit. nr.",ViewOnly,FiscalDeviceSeqNr,false,0); 
    end;
  end;
  vs = 22;
  Tile(4,110,false,"4",Location);
  vs = 20; h1 = 95; h2 = 256; h3 = 456;
  EditField(h1,v=6,50,"Patalpa",Normal,Location,false,LocationSClass); 
//    EditField(200,v,60,"IVNr",Normal,IVNr,false,0);
//  CheckBox(230,v,0,"Update Stock",UpdStockFlag);//not supported any more
  EditField(h3,v,-20,"Objektai",Normal,Objects,false,ObjSClass);
  EditField(h1,v+=vs,  50,"Kainoraštis",Normal,PriceList,false,PLDefSClass); 
  EditField(h3,v,-20,"Pirk. Užsk. Nr.",Normal,CustOrdNr,false,0); 
  EditField(h1,v+=vs,  50,"Nuolaidų lent.",Normal,RebCode,false,0);
  EditField(h3,v,  50,"Kalba",Normal,LangCode,false,LangSClass); 
  EditField(h1,v+=vs, -20,"Komentaras",Normal,InvComment,false,0); 
  EditField(h1,v+=vs,80,"Viso kiekis",ViewOnly,TotQty,true,0); 
  EditField(h2,v,80,"Viso svoris",ViewOnly,TotWeight,true,0); 
  EditField(h3,v,80,"Viso tūris",ViewOnly,TotVolume,true,0); 
  Tile(5,70,false,"5",RetValue);
  vs = 20; h = 75; h2 = 150; h3 = 310; h4 = 480;
  EditField(h2,v=6,70,"Kasa",Normal,CashValue,true,0);
  EditField(h4,v,70,"Grąža",ViewOnly,RetValue,true,0);
  EditField(h2,v+=vs,70,"Kasa B2",Normal,CashValueB2,true,0);
  EditField(h4,v,70,"Grąža B2",ViewOnly,RetValueB2,true,0);
  EditField(h2,v+=vs,30,"Papild. valiuta",Normal,POSCurncyCode,true,CurncyCodeSClass);
  EditField(h3,v,70,"Kasos val.",Normal,CashValueCur,true,0);
  EditField(h4,v,70,"Bazė",ViewOnly,BaseSum4,true,0);

  SpecialMenu("Kasos ataskaita",' ',1,"IVCashCashupRnsm");
  SpecialMenu("Vadovo nuolaidos suteikimas",' ',24,"MgrsDiscOverrideIVCashDsm"); 
  SpecialMenu("Mokėjimas kreditine kortele",' ',11,"CCPayIVCashDsm");
  if (HasLocalization("ITA")) then begin
    SpecialMenu("Siųsti į fiskalinį spausdintuvą",' ',19,"FiscalInvoiceToFiscPrntIVCashDsm");
    SpecialMenu("Leidimo kvitas",' ',19,"CourtesyReceiptIVCashDsm");
  end else begin
    SpecialMenu("Siųsti į fiskalinį spausdintuvą",' ',19,"PrintToFiscPrntIVCashDsm");
  end;
  SpecialMenu("Kreditas",' ',2,"IVCashToCredit");
  SpecialMenu("POS Sesijos ataskaita",' ',1,"POSEventIVCashDsm");
//  SpecialMenu("Pay",' ',11,"PayIVCashDsm");
    if (HasTaxMatrix) then begin
      SpecialMenu("Atidaryti mok. ataskaitą",' ',25,"OpenVatMatrixIVCashDsm");
    end;    
  if (HasLocalization("SVN")) then begin
    SpecialMenu("Fiskalizuoti pard. knygos sąsk.",' ',26,"SVNFiscalizeSalesBookIVCashDsm");
  end;
  SpecialMenu("Pin Pad VOID",'',27,"PinPadVoidIVCashDsm");// Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 14 March 2018 14:06:57

  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Atidaryti sesiją",' ',8,"OpenPOSSessionsm");
  SpecialMenu("Uždaryti sesiją",' ',9,"ClosePOSSessionsm");
  SpecialMenu("Kasos pajamos",' ',11,"POSMoneyInsm");
  SpecialMenu("Kasos išlaidos",' ',12,"POSMoneyOutsm");
  SpecialMenu("Sukurti E-laišką",'m',23,"CreateMailFromIVCashDsm");
  SpecialMenu("Sukurti vėlyvo pristatymo pardavimo užsakymą",' ',5,"IVCashToLateDelivORsm");
  SpecialMenu("Perkelti į faktūrą",' ',3,"IVCashToIVDsm");
  SpecialMenu("Perkelti į pardavimo užsakymą",' ',1,"IVCashToORsm");
  end;
  EndWindow;
end;

window PIVGPRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("BP, POS faktūros",PIVGPRClass,CGRcW,RcType);
  SetWRect(20,80,450,300);
  vs = 20;
  PeriodField(h=155,v=6,"Periodas"); 
  EditFieldTL(h,v+=vs, 150,"Faktūros nr.",   M4Str,Normal,30,f1,false,0);
  EditFieldTL(h,v+=vs ,150,"Pirkėjas",M4UStr,Normal,50,f2,false,CUSClass);
  if (HasContactClassification) then begin
    EditFieldTL(h,v+=vs,150,"Pirkėjo klasė",M4UStr,Normal,30,f8,false,CClassSClass);
  end;
  if (HasCategories) then begin
    EditFieldTL(h,v+=vs,50,"Pirkėjo kategorija",M4UStr,Normal,5,f9,false,CCatSClass);
  end;
  EditFieldTL(h,v+=vs ,100,"Pardavėjas",M4UStr,Normal,10,AccStr,false,UserSClass);
  EditFieldTL(h,v+=vs ,150,"Prekė",M4UStr,Normal,20,FirstAcc,false,INSClass);
  EditFieldTL(h,v+=vs ,150,"RMI Number",M4Str,Normal,25,f10,false,0);// Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 15 November 2017 11:40:29
  if (HasItemGroups) then begin
  EditFieldTL(h,v+=vs ,80,"Prekės grupė",M4UStr,Normal,5,LastAcc,false,ITSClass);
  end;
  if (HasItemClassification) then begin
    EditFieldTL(h,v+=vs ,150,"Prekės klasė",M4UStr,Normal,200,f6,false,DISClass); 
  end;
  if (HasObjects) then begin
    EditFieldTL(h,v+=vs ,150,"Objektas",M4UStr,Normal,60,ObjStr,false,ObjSClass); 
    EditFieldTL(h,v+=vs ,150,"Objektas iš eilutės (Detaliai)",M4UStr,Normal,60,f3,false,ObjSClass); 
  end;
  EditFieldTL(h,v+=vs ,50,"Mokėjimo tipas",M4UStr,Normal,5,TransStr,false,PDSClass);
  EditFieldTL(h,v+=vs,50,"Lokalus kompiuteris",M4UStr,Normal,5,f7,false,0);
  EditFieldTL(h,v+=vs,80,"Patalpa",M4UStr,Normal,5,f4,false,LocationSClass); 
  EditFieldTL(h,v+=vs,50,"Stalčius",M4UStr,Normal,5,f5,false,DrawerSClass); 
  ButtonFrame(h,vm=(v+=41),123,2,"Funkcija");
  RadioButton(h,v,0,0,"Peržiūra",ArtMode); 
  RadioButton(h,v+=16,1,0,"Detaliai",ArtMode); 
  EndWindow;
end;

window INNPTSSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad,iPhone")
begin
  real h;

  WindowBegin("Įstatyti prekę",INNPTSSClass,CGother,HBlRecType);
  UseView(RcVc);
  ToolBar;
  h = -216;
  ColourPushButton(h,5,h+90,45,"NPTSSearchItemCancel","Nutraukti",20);
  ColourPushButton(-100,5,-10,45,"NPTSSearchItemOnceMore","Pakartotinė paieška",20);
  EndToolBar;
  SetWRect(140,80,900,898);// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 14 August 2018 12:20:47
  SoftEditField(60,20,100,"Ieškoti",Normal,"f1",false,0,M4Str,255);
  Sizeable(-1,-1,0,0);
//  StringList2(9,9,-25,-10);
  DataList(9,65,-22,-6,"NPTSItemSearch"); 
  DataListColumn(1,6,120,AdjLeft,"ArtCode","Prekė",M4Code); 
  DataListColumn(1,126,-155,AdjLeft,"ArtName","Pavadinimas",M4Str);
  DataListColumn(1,-150,-23,AdjRight,"ArtPrice","Kaina",M423Val);
  EndWindow;
end;
/*
window CashierDefTClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vm2,vs,chkbx;
  
  WindowBegin("POS Nustatymai",CashierDefTClass,CGSbl,-);
  SetWRect(64,80,700,600);
  SetBlid(CashierDefBlock);
  v = 6; vs = 20; h = 150; h2 = 290; vm=0;
  EditField(h,v,70,"Pagr. pirkėjas",Normal,DefCustCode,false,CUSClass); 
  if (HasModNL) then begin
  EditField(h,v+=vs,70,"Back office sąsk.",Normal,CredAcc,false,AccSClass); 
  EditField(h,v+=vs,70,"Nurašymo sąsk.",Normal,WriteOffAcc,false,AccSClass); 
  EditField(h,v+=vs,70,"Grynųjų išėmimo sąsk.",Normal,CashWithdrawalAcc,false,AccSClass);
  end;
  if (HasModRest) then begin
  EditField(h,v+=vs,70,"Arbatp. mok. būdas",Normal,TipPMCode,false,PMSClass);   
  end;
  if (IsEnterprise) then begin
    EditField(h,v+=vs,70,"Spausdintuvas",Normal,Printer,false,SetSClass);   
    if (StandardHansa==false) then begin
    EditField(h,v+=vs,70,"Pensininkų nuol. prekė",Normal,DiscountItem,false,INSClass);   
    end;
  end;
  EditField(h,v+=vs,120,"Buy Back Item",Normal,BuyBackItemCode,false,INSClass);// Edit ************************** BPI Ukraine - KramarAlexandr - w, 15 november 2017 y 21:57:28
  EditField(h,v+=vs,70,"Force VAT code",Normal,ForceVATCode,false,VATCodeSClass);//CUST

  if (HasModIN) then begin
    if (IsEnterprise) then begin
      chkbx = 2;
      if (HasLocalization("LVA")) then begin
        chkbx = 4;
      end;
      ButtonFrame(h-130,v+=3*vs+chkbx*16,490,3,"Automatinis sandėlio atnaujinimas POS modulyje");
      end else begin
        v = v + 40;
      if (HasLocalization("LVA")) then begin
        v = v+3*16;
      end;
      if (HasModRest) then begin
        ButtonFrame(h-130,v,490,3,"Automatinis sandėlio atnaujinimas POS modulyje");
      end else begin
        v = v;
      end;
    end;
      EditField(h,v,70,"Atnaujinimo intervalas",Normal,UpdStockMaintTime,false,PasteCurTime); 
//    ButtonFrame(h2,v,170,3,"Run Update #Stock# Maintenance");
//    RadioButton(h2,v,0,0,"Manually",UpdStockMaint);
//    RadioButton(h2,v+=16,1,0,"Periodically",UpdStockMaint);
//    RadioButton(h2,v+=16,2,0,"When OKing POS Invoice",UpdStockMaint);

    CheckBox(h2,v,0,"Vykdyti sandėlio atnaujinimą",UpdStockMaint); 
    CheckBox(h2,v+=18,0,"Kurti patvirtintus sandėlio nurašymus",POSOKSD);
    CheckBox(h2,v+=18,0,"OK Goods Receipts",AUTOOKPU);// Edit ************************** BPI Ukraine - KramarAlexandr - 01, 10 06 2019 y. at 2:39:48 PM

  end;
  if (HasModIN) then begin
    ButtonFrame(h-130,v+=40,490,2,"Automatinis sandėlio atnaujinimas Restorano modulyje");
    EditField(h,v,70,"Atnaujinimo intervalas",Normal,RestUpdStockMaintTime,false,PasteCurTime);
    CheckBox(h2,v,0,"Vykdyti sandėlio atnaujinimą",RestUpdStockMaint);
    CheckBox(h2,v+=18,0,"Kurti patvirtintus sandėlio nurašymus",RestOKSD);
//    CheckBox(h2,v,0,"OK #Goods Receipts#",OKPU);
  end;
  if (IsEnterprise) then begin
    ButtonFrame(h-130,v+=40,490,3,"Automatinis kasos sesijų uždarymas"); 
    EditField(h,v,70,"Atnaujinimo intervalas",Normal,CashupMaintInterval,false,PasteCurTime); 
    CheckBox(h2,v,0,"Vykdyti kasos sesijų uždarymą",CashupMaint); 
    CheckBox(h2,v+=18,0,"Atidaryta kasos sesija - privaloma",RequireOpenSession);
    CheckBox(h2,v+=18,0,"Spausdinti Z ataskaitą",PrintZReportatCashup);
  end;
//  EditField(h,v+=vs,60,"POS nr.",Normal,POSNr,false,0); 
  ButtonFrame(h-130,vm2=(v+=37+vs),220,3,"Prekės paveiksliukas kasininko ekrane");
  RadioButton(h,v,kPOSItemPictureDefault,0,"Numatytasis",ItemPictureCashier);
  RadioButton(h,v+=16,kPOSItemPictureOn,0,"Įjungtas",ItemPictureCashier);
  RadioButton(h,v+=16,kPOSItemPictureOff,0,"Išjungtas",ItemPictureCashier);
  if (BuildProductCode=="PAYYAPERP") then begin
    CheckBox(h2,vm2,0,"Atidaryta kasos sesija - privaloma",RequireOpenSession); 
  end;
  ButtonFrame(h-130,v+=40,220,3,"Prekės paveiksliukas kliento ekrane");
  RadioButton(h,v,kPOSItemPictureDefault,0,"Numatytasis",ItemPictureCustomer);
  RadioButton(h,v+=16,kPOSItemPictureOn,0,"Įjungtas",ItemPictureCustomer);
  RadioButton(h,v+=16,kPOSItemPictureOff,0,"Išjungtas",ItemPictureCustomer);
  v = vm + 3;
  if (HasModRest) then begin
    CheckBox(h2,v,0,"Įtraukti arbatpinigius į kasos ataskaitą",InclTipInCashup);
    v = v + 16;
  end;
  if (IsEnterprise) then begin
  if (HasModSL) then begin
//      CheckBox(h2,v,0,"Include Open Invoice value in Cash Up",InclOpenInvCashup);
//      v = v + 16;
  end;
  end;
  if (HasLocalization("LVA")) then begin
    CheckBox(h2,v,0,"Neleisti nulinių kiekių",NoZeroQty);v = v + 16; 
    CheckBox(h2,v,0,"Tikrinti PVM reg. nr. įterpiant prekę su atvirkštiniu PVM",CheckVATNo);v = v + 16; 
  end;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
    CheckBox(h2,v,0,"Registruoti pardavimus fiskaliniame įrenginyje",CashSalesToFiscalControlUnit); 
      v = v + 16;
    end;
    CheckBox(h2,v,0,"Leisti kelias sesijas tame pačiame įrenginyje",MultipleSessionsPerLocalMachine); 
    CheckBox(h2,v+=16,0,"Neleisti keisty patvirtintų POS faktūroms Live Sync klientams",NoChangesPOSOnLiveSyncClient); 
  CheckBox(h2,v+=16,0,"Reikalauti grąžinimo priežasties",RequireReturnReason); 
  CheckBox(h2,v+=16,0,"Reikalauti pirkėjo grąžinimui",RequireReturnCustomer); 
  CheckBox(h2,v+=16,0,"Neleisti pardavimų su 0 suma",NoZeroSum);v = v + 16;
    if (HasLocalization("LVA")) then begin
      CheckBox(h2,v+=16,0,"Neleisti nulinių kiekių",NoZeroQty); 
  end;
  end;
  CheckBox(h2,v+=16,0,"Run Cash Up Maintenance when closing session",RunCashupMaintenance);// Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 15 November 2017 15:25:12
  if (HasModNL) then begin
  ButtonFrame(h2,v+=29,220,2,"Kasos ataskaita per operacijų meniu"); 
  CheckBox(h2,v,0,"Pradėti nuo ankstesnio POS balanso",StartFromLastPOSBal); 
  if (HasModNL) then begin
  CheckBox(h2,v+=16,0,"Spausdinti detalią DK operaciją",PrintDetNLTrans); 
  end;
    EndFrame;
  end;
  if (IsEnterprise) then begin
    ButtonFrame(h2,v=vm2,170,3,"Numatytasis laukas naujoje faktūroje"); 
  RadioButton(h2,v,0,0,"Numatytasis",DefInvoiceField); 
  RadioButton(h2,v+=16,1,0,"Prekė",DefInvoiceField);
    if (HasSerialNumbers) then begin
  RadioButton(h2,v+=16,2,0,"Serijinis nr.",DefInvoiceField);
    end;
    EndFrame;
  end;
  EndWindow;
end;
*/
window LocationDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,l,v,vm,vs;
  Integer tilenr;
  
  WindowBegin("Patalpa",LocationDClass,CGview,-);
  SetWRect(64,80,570,520);
  UseView(LocationVc);
  v = 10; vs = 20; h = 120; h2 = 340; l = -60;
  if (IsEnterprise) then begin
  Tile(0,50+24,false,"",Code);
  end;
  EditField(h,v,120,"Kodas",Normal,Code,false,0);
  if (IsEnterprise and StandardHansa==false) then begin
    EditField(h2,v,l,"Grupė",Normal,Group,false,LocGrSClass);
  end;
  EditField(h,v+=vs,l,"Pavadinimas",Normal,Name,false,0);
  if (IsEnterprise) then begin
    tilenr = 1;
    TileButton(tilenr,"Adresas"); tilenr = tilenr + 1; 
    if (StandardHansa==false) then begin
    TileButton(tilenr,"Sandėlis"); tilenr = tilenr + 1; 
    end;
    tilenr = 1;
    Tile(tilenr,350,false,tilenr,Addr0); tilenr = tilenr + 1;
    EditField(h,v=6,l,"Adresas",Normal,Addr0,false,0); 
  end else begin
    EditField(h,v+=vs,l,"Adresas",Normal,Addr0,false,0); 
  end;
  EditField(h,v+=vs,l,"",Normal,Addr1,false,0);
  EditField(h,v+=vs,l,"",Normal,Addr2,false,0);
  EditField(h,v+=vs,l,"",Normal,Addr3,false,0);
  EditField(h,v+=vs,l,"",Normal,Addr4,false,0);
  EditField(h,v+=vs,l,"Kontaktas",Normal,Contact,false,0);
  EditField(h,v+=vs,l,"Tel. nr.",Normal,Phone,false,0);
  EditField(h,v+=vs,l,"Fakso nr.",Normal,Fax,false,0);
  EditField(h,v+=vs,l,"El. paštas",Normal,Email,false,0);
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
    EditField(h,v+=vs,l,"Klasė",Normal,Classification,false,LocClSClass);
    end;
  EditField(h,v+=vs,l,"Perspėjimas",Normal,Warning,false,);// Edit ************************** BPI Ukraine - KramarAlexandr - t, 16 november 2017 y 09:37:13

  EditField(h,v+=vs,100,"Atsakingas asmuo",Normal,RespPerson,false,UserSClass);
  EditField(h2,v,l,"Rezervac. teisė.",Normal,ReservLocAccess,false,ReservLocAccessSClass);
  end;
  if (HasModNL) then begin
  EditField(h,v+=vs,100,"Atsargų sąskaita",Normal,StockAcc,false,AccSClass);
  end;
  if (HasObjects) then begin
  EditField(h2,v,l,"Objektai",Normal,Objects,false,ObjSClass);
  end;
  if (IsEnterprise) then begin
//  EditField(h,v+=vs,100,"Kainoraštis",Normal,PriceList,false,PLDefSClass);//No Code
  EditField(h,v+=vs,100,"Pirkimo patalpa",Normal,PurLoc,false,LocationSClass);
  EditField(h2,v,l,"Perkelti į sąskaitą",Normal,ShipToAccount,false,0);
  EditField(h,v+=vs,100,"Per patalpą",Normal,ThrouLocation,false,LocationSClass); 
  CheckBox(h,vm=(v+=30),0,"Ignoruoti chronologiją",IgnoreChronology);
  CheckBox(h,v+=16,0,"Reikalauti vietos",RequirePos);
  CheckBox(h,v+=16,0,"Uždaryta",Closed);
  ButtonFrame(h2,v=vm+10,100,2,"Tipas");
  RadioButton(h2,v,0,0,"Kita",Type);
  RadioButton(h2,v+=16,1,0,"Gamybos",Type);
  end;
  if (HasModWHM) then begin
    Tile(tilenr,310,false,tilenr,WHMPalletArea); tilenr = tilenr + 1;
  EditField(h=200,v=6,l=100,"Tuščių palečių vieta",Normal,WHMPalletArea,false,LocAreaSClass);
  EditField(h,v+=vs,l,"Pakrovimo vieta",Normal,WHMPickArea,false,LocAreaSClass);
  EditField(h,v+=vs,l,"Gavimų pozicija",Normal,WHMDefPUPosCode,false,PosSClass);
  EditField(h,v+=vs,l,"Gamybos pozicija",Normal,WHMDefProdPosCode,false,PosSClass);
  EditField(h,v+=vs,l,"Vyniojimo mašinos pozicija",Normal,WHMWraperPosCode,false,PosSClass);
  EditField(h,v+=vs,l,"Siuntimo pozicija pakrovimui",Normal,WHMDeliveryPosCode,false,PosSClass);//the same as WraperPosCode at ethe moment
  EditField(h,v+=vs,l,"Siuntimo vieta",Normal,WHMDeliveryArea,false,LocAreaSClass);
  EditField(h,v+=vs,l,"Greiti užsakymai",Normal,WHMExpressOrderClass,false,OrderClassSClass);
  EditField(h,v+=vs,l,"Pagr. tiekėjas",Normal,WHMDefPUVECode,false,VESClass);
  CheckBox(h,v+=24,0,"Pozicija",RequirePos);
  CheckBox(h,v+=16,0,"Pradėti nuo aukščiausios pozicijos",WHMHighestPosCodeFirst);
  ButtonFrame(h,v+=40,140,3,"Forklifto sistema");
  RadioButton(h,v,0,0,"Išjunga",WHMForkLiftSystem);
  RadioButton(h,v+=16,1,0,"Įjunga",WHMForkLiftSystem);
  RadioButton(h,v+=16,2,0,"Įjungta, krovimo būdas išj.",WHMForkLiftSystem);
  end;
  EndWindow;
end;

window SwedBankImportSTIClass:1// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 29 May 2018 15:34:24
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real f,h,v,vm,vs;

  WindowBegin("SwedBank import Statement ",SwedBankImportSTIClass,CGIcW,RcType); 
  SetWRect(20,80,480,200);
  h = 70;
  v = 40;
  vs = 20;
  StaticText(h,v+=vs,"Import: SwedBank Bank To Customer Statement",false);
  StaticText(h,v+=vs,"File format: XML",false);
  StaticText(h,v+=vs,"Based on: Bank To Customer Statement V02 camt.053.001.02",false);

  EndWindow;
  return;
end;


window SwedbankImportLClass:1// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 29 May 2018 15:34:20
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Swedbank Imports",SwedbankImportLClass,CGmlist,-);
  SetWRect(20,80,1200,355);
  Sizeable(-1,-1,0,0);
  SpawnClass(SwedbankImportDClass);
  UseView(SwedbankImportVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,1,"NtryRef",NtryRef,false,NtryRef);
  RlCol(140,140,"BankID",BankID,false);
  RlCol(210,210,"OwnID",OwnID,false);
  RlColKey(280,280,"Date",BookgDt,false,BookgDt);
  RlCol(350,350,"IBAN",IBAN,false);
  RlCol(460,460,"Name",RecName,false);
  RlCol(660,660,"Cmt",Ustrd,false);
  RlCol(-320,-320,"PrvtId",PrvtId,false);
  RlCol(-250,-250,"OrgId",OrgId,false);
  RlColKey(-180,-180,"D/C",CdtDbtInd,false,CdtDbtInd);
  RlCol(-130,-130,"AmtCcy",AmtCcy,false);
  RlCol(-60,-60,"Curncy",CurncyCode,true);
  SearchField("Search");
  EndWindow;
end;

window SwedbankImportDClass:1// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 29 May 2018 15:34:17
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real f,h,v,vm,vs;
	
  WindowBegin("Swedbank Imports",SwedbankImportDClass,CGview,-);
  SetWRect(20,80,250,250);
  Sizeable(-1,-1,0,0);
  UseView(SwedbankImportVc);
  
  vs = 20;
  EditField(h=100,v=30,150,"NtryRef",ViewOnly,NtryRef,false,0);
  EditField(h=100,v+=vs,150,"BankID",ViewOnly,BankID,false,0);
  EditField(h=100,v+=vs,150,"OwnID",ViewOnly,OwnID,false,0);
  EditField(h=100,v+=vs,150,"Date",ViewOnly,BookgDt,false,0);
  EditField(h=100,v+=vs,150,"IBAN",ViewOnly,IBAN,false,0);
  EditField(h=100,v+=vs,-20,"Name",ViewOnly,RecName,false,0);
  EditField(h=100,v+=vs,-20,"Comment",ViewOnly,Ustrd,false,0);
  EditField(h=100,v+=vs,150,"D/C",ViewOnly,CdtDbtInd,false,0);
  EditField(h=100,v+=vs,150,"Ammount",ViewOnly,AmtCcy,false,0);
  EditField(h=100,v+=vs,150,"Curncy",ViewOnly,CurncyCode,false,0); 
  EditField(h=100,v+=vs,150,"OrgId",ViewOnly,OrgId,false,0); 
  EditField(h=100,v+=vs,150,"PrvtId",ViewOnly,PrvtId,false,0); 
  
  SearchField("Search");
  EndWindow;
  
end; 




window SEBBankImportSTIClass:1// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 29 May 2018 15:34:13
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real f,h,v,vm,vs;

  WindowBegin("SEB Bank import Statement ",SEBBankImportSTIClass,CGIcW,RcType); 
  SetWRect(20,80,480,200);
  h = 70;
  v = 40;
  vs = 20;
  StaticText(h,v+=vs,"Import: SEB Bank To Customer Statement",false);
  StaticText(h,v+=vs,"File format: XML",false);
  StaticText(h,v+=vs,"Based on: Bank To Customer Statement V02 camt.053.001.02",false);

  EndWindow;
  return;
end;


window SEBbankImportLClass:1// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 29 May 2018 15:34:10
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("SEB Bank Imports",SEBbankImportLClass,CGmlist,-);
  SetWRect(20,80,1200,355);
  Sizeable(-1,-1,0,0);
  SpawnClass(SEBbankImportDClass);
  UseView(SEBbankImportVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,1,"NtryRef",NtryRef,false,NtryRef);
  RlCol(140,140,"BankID",BankID,false);
  RlCol(210,210,"OwnID",OwnID,false);
  RlColKey(280,280,"Date",BookgDt,false,BookgDt);
  RlCol(350,350,"IBAN",IBAN,false);
  RlCol(460,460,"Name",RecName,false);
  RlCol(660,660,"Cmt",Ustrd,false);
  RlCol(-320,-320,"PrvtId",PrvtId,false);
  RlCol(-250,-250,"OrgId",OrgId,false);
  RlColKey(-180,-180,"D/C",CdtDbtInd,false,CdtDbtInd);
  RlCol(-130,-130,"AmtCcy",AmtCcy,false);
  RlCol(-60,-60,"Curncy",CurncyCode,true);
  SearchField("Search");
  EndWindow;
end;

window SEBbankImportDClass:1// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 29 May 2018 15:34:08
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real f,h,v,vm,vs;
	
  WindowBegin("SEB Bank Imports",SEBbankImportDClass,CGview,-);
  SetWRect(20,80,250,250);
  Sizeable(-1,-1,0,0);
  UseView(SEBbankImportVc);
  
  vs = 20;
  EditField(h=100,v=30,150,"NtryRef",ViewOnly,NtryRef,false,0);
  EditField(h=100,v+=vs,150,"BankID",ViewOnly,BankID,false,0);
  EditField(h=100,v+=vs,150,"OwnID",ViewOnly,OwnID,false,0);
  EditField(h=100,v+=vs,150,"Date",ViewOnly,BookgDt,false,0);
  EditField(h=100,v+=vs,150,"IBAN",ViewOnly,IBAN,false,0);
  EditField(h=100,v+=vs,-20,"Name",ViewOnly,RecName,false,0);
  EditField(h=100,v+=vs,-20,"Comment",ViewOnly,Ustrd,false,0);
  EditField(h=100,v+=vs,150,"D/C",ViewOnly,CdtDbtInd,false,0);
  EditField(h=100,v+=vs,150,"Ammount",ViewOnly,AmtCcy,false,0);
  EditField(h=100,v+=vs,150,"Curncy",ViewOnly,CurncyCode,false,0); 
  EditField(h=100,v+=vs,150,"OrgId",ViewOnly,OrgId,false,0); 
  EditField(h=100,v+=vs,150,"PrvtId",ViewOnly,PrvtId,false,0);
  
  SearchField("Search");
  EndWindow;
  
end;  

window BankImportSetTClass:1// Edit ************************** BPI Ukraine - KramarAlexandr - Monday, 10 September 2018 15:50:21
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  v = 6; vs = 20; h = 90;

  WindowBegin("Amoralle - Banking Statement Import settings",BankImportSetTClass,CGSbl,-);
  SetWRect(20,80,450,480);
  SetBlid(BankImportSetBlock);
  Sizeable(-1,-1,0,0);
  	h = 50;
  	CheckBox(h,v+=20,0,"Import payments",ImpPaym);
  	CheckBox(h,v+=20,0,"Import payment orders",ImpPaymOrd);
  	CheckBox(h,v+=20,0,"Import charges",ImpCharges);
		v=v+20;
		ButtonFrame(h,v=v+20,210,2,"Import is done by connecting");
		RadioButton(h,v,0,0,"The oldest invoices (FIFO method)",InvFIFO);
		RadioButton(h,v+=16,1,0,"The oldest due dates",InvFIFO);
  EndWindow;

end;

window IVCashLngprnWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real v;
  WindowBegin("Specify Language",IVCashLngprnWClass,CGother,RcType);
  SetWRect(20,80,350,150);
  EditFieldTL(140,v=6,70,"Language",M4Code,Normal,10,f1,false,LangSClass);
  HalPushButton(-120,-40,-20,-20,"LangPrintInvoicedsm","Print");
  EndWindow;
end;

window IVCashAddObjectWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real v;
  WindowBegin("Specify Language",IVCashAddObjectWClass,CGother,RcType);
  SetWRect(20,80,350,150);
  EditFieldTL(140,v=6,150,"Add Object",M4Code,Normal,50,f1,false,ObjSClass);
  HalPushButton(-120,-40,-20,-20,"IVCashAddObjectdsm","Proceed");
  EndWindow;
end;

window CURegFieldDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Customer Registration Field",CURegFieldDClass,CGview,-);
  UseView(CURegFieldVc);
  SetWRect(20,80,600,400);
  ActiveFieldOnNew("FieldType");
  vs = 20; h = 100; h2 = 350; v = 16; vs = 20;
  EditField(h,v,150,"Field Type",Normal,FieldType,false,SetSClass);
  EditField(h,v+=vs,-40,"Comment",Normal,Comment,false,0);
  EditField(h,v+=vs,150,"Parameter",Normal,Param,false,WebNGParamSClass);
  EditField(h2,v,-40,"Sorting",Normal,Sorting,false,0);
  CheckBox(h,v+=vs,0,"Required",Required);
  CheckBox(h,v+=16,0,"Allow Update through My Account",AllowUpdate);
  CheckBox(h,v+=16,0,"For company",ForCompany);
  MatrixBegin(10,v+=41,-30,-10,INTextRowType,99);
  MatCol(1,24,"Language",0,LangCode,false,WebNGLanguageSClass);
  MatCol(1,84,"Text",0,Text,false,0);
  EndMatrix;
  EndWindow;
end;

window IVDClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;

  WindowBegin("Faktūra",IVDClass,CGview,-);
  DynamicWindow;
  Sizeable(-1,-1,0,0);
  UseView(IVVc);
  ActiveFieldOnNew("CustCode");  
  SetWRect(20,80,750,460);
  CommunicateButton;
  Tile(0,74,false,"",CustCode);
  EditField(75,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Pirkėjas",Normal,CustCode,false,CUSClass);
  EditField(375,v,95,"",Viewonly,SaleType,false,0);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Pavadinimas",Normal,Addr0,false,0);
  //EditField(h,vm=(v+=20),135,"Oficialus Nr.",Normal,OfficialSerNr,false,LegalInvNrSClass);
  CheckBox(h4=-100,v+20,0,"OK",OKFlag);
  TileButton(1,"Terminai");
  TileButton(2,"Prekės");
  TileButton(3,"Valiuta");
  TileButton(4,"Siuntimas");
  TileButton(5,"Ident.");
  TileButton(6,"Kainodara");
  TileButton(7,"Fakt. adresas");
  TileButton(8,"Siunt. adresas");
  TileButton(9,"Superkamos prekės");
  Tile(1,110,false,"1",InvDate);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Faktūros data",Normal,InvDate,false,PasteCurDate);
  //EditField(h1,v+=vs,25,"Mok. sąl.",Normal,PayDeal,false,PDSClass);//PDMSClass);
  EditField(h1,v+=vs,82,"Apmokėti iki",Normal,PayDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Čekio nr",Normal,RefStr,false,0);
  EditField(h1,v+20,82,"RMA nr.",Normal,OfficialSerNr,false,LegalInvNrSClass);
  EditField(h2,v+=20,135,"Objektas",Normal,Objects,false,0);// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 5 April 2018 14:25:48
  EditField(h2,v+=20,135,"El. paštas",Normal,eMail,false,CUEmailSClass);//CUST

  //EditField(h1,v+=vs,82,"Pasl. prist. data",Normal,ServiceDelDate,false,PasteCurDate);
  ButtonFrame(h1,v+=16,60,2,"Bazinė kaina");
  RadioButton(h1,v,0,0,"Be PVM",InclVAT);
  RadioButton(h1,v+=16,2,0,"Su PVM",InclVAT);  // - start
  EditField(h2,v=vm,135,"Mok. sąl.",Normal,PayDeal,false,PDSClass);
  EditField(h2,v+=20,135,"Pristatymas",Viewonly,DeliveryType,false,0);
  //EditField(h2,v+=vs,135,"Perspėjimas",Normal,ClientContact,false,ContactSClass);
  //EditField(h2,v+=vs,135,"Objektai",Normal,Objects,false,ObjSClass);
  //EditField(h2,v+=vs,135,"Čekio nr.",Normal,RefStr,false,0);
  //START-CUST   October 1, 2014 by PSTPrintGift
  //EditField(h2,v+=vs,135,"Pirk. Užsk. Nr.",Normal,CustOrdNr,false,0);
  if (UserCanAction("AllowPersonChange",false)) then begin
    EditField(h2,v+=vs,135,"Pardavėjas",Normal,SalesMan,false,UserSClass);
  end else begin
    EditField(h2,v+=vs,135,"Pardavėjas",ViewOnly,SalesMan,false,0);
  end;
  HalPushButton(h2,v+=vs+40,h2+140,v+25,"GCIVsm","Parduoti Dov.k/Rank.");
  HalPushButton(h2,v=v+vs+5,h2+140,v+30,"PrintGift","Spausdinti Dov.k/Rank.");
	CheckBox(h3,v,0,"Ar grąžintas PVM?",AllowChVAT);// Edit ************************** BPI Ukraine - KramarAlexandr - 05, 01 03 2019 y. at 3:05:44 PM

  //EditField(h3,v+=vs,80,"Projektas",Normal,PRCode,false,0);
  //EditField(h3,v+=vs,80,"Kredito priežastis",Normal,Reason,false,StandProblemsSClass); 
  //CheckBox(h4,v=6,0,"Abejotina",DisputedFlag);
  Userr.Code = CurrentUser;
  if ReadFirstMain(Userr,1,true) then begin
  	if Userr.Job == "KASA" then begin
			//EditFieldTLX(h3+20,v=vm+30,160,"Grąža",M4Val,ViewOnly,100,35,patM4black,RetnValue,true,0);
			WebPage(h3-90,v=vm+30,h3+170,v+50,"","__webdata");
			HalPushButton(h3-100,v=vm,h3-40,v+30,"CashIVsm1","Grynieji");
			HalPushButton(h3-35,vm,h3+25,v+30,"CredCardIVsm2","Kortelė");
			HalPushButton(h3+30,v=vm,h3+105,v+30,"GCRIVsm1","Dov.k/Rank.");
			HalPushButton(h3+110,v=vm,h3+170,v+30,"CredCardIVsm22","Lizingas");
			HalPushButton(h3-100,v=v+80,h3+170,v+200,"IVFinishAndPrint","Čekis");
		//	HalPushButton(h3-100,v=v+80,h3+170,v+200,"IVVoidReceipt","Void");
		end;
	end;
  //END-CUST October 1, 2014 by PST
  EnterSkip(Math);
  Tile(2,220,true,"2",Math);
  if (CompileType!=ctiPhone) then begin
		EditField(55,-41,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
		if (UseTaxTemplatesforTaxCalc==false) then begin
			if (UserCanAction("ViewCostPrice",true)) then begin
				//EditField(160,-41,70,"GP %",Normal,GPProc,true,0);
				EditField(160,-21,70,"Viso BP",ViewOnly,TotGP,true,0);
			end;
			EditField(290,-41,70,"Mok. 2",ViewOnly,TAX2Sum,true,0);
			EditField(290,-21,70,"Pap. mok.",ViewOnly,TAX1Sum,true,0);
			EditField(410,-41,95,"PVM",ViewOnly ,Sum3,true,0);
		end else begin
			if (UserCanAction("ViewCostPrice",true)) then begin
				//EditField(290,-41,70,"GP %",Normal,GPProc,true,0);
				EditField(290,-21,70,"BP viso",ViewOnly,TotGP,true,0); 
			end;
			EditField(410,-41,95,"Mok.",ViewOnly ,Sum3,true,0); 
		end;
  	EditField(410,-21,95,"Suma",ViewOnly,BaseSum4,true,0);
  	EditField(-150,-41,95,"Tarp. suma",ViewOnly ,Sum1,true,0);
  	EditField(-150,-21,95,"VISO",ViewOnly ,Sum4,true,0);
  end else begin
    EditField(55,-41,80,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass); 
    EditField(55,-21,80,"PVM",ViewOnly ,Sum3,true,0); 
    EditField(-120,-41,80,"Pap. mok.",ViewOnly,TAX1Sum,true,0); 
    EditField(-120,-21,80,"VISO",ViewOnly ,Sum4,true,0); 
  end;
  v = 24;
  MatrixBegin(4,v,-50,-49,-,200);
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  MatCol(t=kInvoiceRowTypeNormal,32,"Prekė",0,ArtCode,false,ForSaleINSClass);
  MatCol(t,94,"Kiekis",0,Quant,true,MATVARINSClass);
  EnterSkip(ArtCode);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Prekė",0,ArtCode,false,ForSaleINSClass);
  MatCol(t,94,"Kiekis",0,Quant,true,MATVARINSClass);
  EnterSkip(ArtCode);
  MatText(t=kInvoiceRowTypeCredit,32,"Faktūros kreditas",true);
  MatCol(t,208,"",0,OrdRow,false,ARSClass);
  MatCol(t,-216,"",0,Spec,false,0);//MatText(t,-216,"",true);
  MatText(t=kInvoiceRowTypeDebit,32,"Faktūros debitas",true);
  MatCol(t,208,"",0,OrdRow,false,0);
  MatCol(t,-216,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeInterest,32,"Delspinigiai",true);
  MatCol(t,98,"",0,ArtCode,false,0);
  MatCol(t,153,"",0,Quant,true,0);
  MatCol(t,188,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeDownpayment,32,"Išankstinis apmokėjimas",true);
  MatColTL(t,122,"",0,-1,ViewOnly,0,ArtCode,true,0); 
  MatColTL(t,188,"",0,-1,ViewOnly,0,Quant,true,0);
  MatCol(t,238,"",0,Spec,false,0);
  MatColTL(t,-170,"",0,-1,Normal,0,Sum,true,0); //?? TL?
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-100,"",0,SalesAcc,false,AccSClass);
    MatCol(t,-54,"",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-70,"",0,SalesAcc,false,AccSClass);
    MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  end;
  MatText(t=kInvoiceRowTypePrepayment,32,"Išankstinio numeris",true);
  MatCol(t,170,"",0,CUPNr,true,ARPay3SClass);
  MatCol(t,-300,"",0,BasePrice,false,0);
  MatCol(t,-170,"",0,Price,true,0);// Price holds the #VAT# sum, Recipe holds the date of prepaym. BasePrice holds amount in base 1, TAX1Reb holds TAX1Sum
  MatCol(t,-100,"",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeLoan,32,"Paskola",true);
  MatCol(t,98,"",0,CuAccCode,true,CuAccSClass);
  MatCol(t,-350,"",0,SalesAcc,true,AccSClass);
  MatCol(t,-230,"",0,Objects,false,0);
  MatCol(t,-110,"",0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeLoanInterest,32,"Paskolos palūkanos",true);
  MatCol(t,98,"",0,CuAccCode,true,CuAccSClass);
  MatCol(t,-350,"",0,SalesAcc,true,AccSClass);
  MatCol(t,-230,"",0,Objects,false,0);
  MatCol(t,-110,"",0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeUpdateMark,32,"Signature",false); 
  MatColTL(t,94,"Parašas",0,-1,ViewOnly,0,VoidedSign,false,0); 
  MatCol(t,144,"Aprašymas",0,Spec,false,0); 
  MatText(t=kInvoiceRowTypeVoid,32,"Panaikintas",false); 
  MatColTL(t,65,"Parašas",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,100,"Prekė",0,ArtCode,false,ForSaleINSClass);
  MatCol(t,150,"Kiekis",0,Quant,true,MATVARINSClass);
  MatCol(t,190,"Kaina",0,Price,true,0);
  MatCol(t,250,"Aprašymas",0,Spec,false,0);
  MatCol(t,-195,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-110,"%",0,vRebate,true,0);
  MatCol(t,-80,"Suma",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeSubtotal,32,"Viso",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-140,"Suma",0,-1,ViewOnly,0,Sum,true,0);
  MatText(t=kInvoiceRowTypeHidden,32,"Ši ir žemiau esančios eilutės nebus spausdinamos",false);
  MatText(t=kInvoiceRowTypeCorrection,32,"K",true);
  MatCol(t,45,"Prekė",0,ArtCode,false,ForSaleINSClass);
  MatCol(t,91,"Kiekis",0,Quant,true,0); 
  MatText(t=kInvoiceRowTypeRetention,32,"Išlaikymas",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-210,"Pard.sąsk",0,-1,0,0,SalesAcc,false,AccSClass);
  MatColTL(t,-110,"Suma",0,-1,0,0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeGiftVoucherSold,32,"DČ",true);
  MatCol(t,58,"",0,GCNr,false,GCSClass);
  MatCol(t,-416,"",0,Spec,false,0);
  MatCol(t,-84,"Suma",0,Sum,true,0);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);  
  MatText(t=kInvoiceRowTypeGiftVoucherPayment,32,"GVR",true);
  MatCol(t,58,"",0,GCNr,false,GCSSClass);
  MatCol(t,-316,"",0,Spec,false,0);
  MatCol(t,-84,"Suma",0,Sum,true,0);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeCashPayment,32,"GRYNIEJI",true);
  MatCol(t,94,"Suma",0,Sum,true,0);
  MatCol(t,198,"Mok. būdas",0,PayMode,true,PMSClass); 
  MatCol(t,250,"Spec",0,Spec,true,0); 
  MatCol(t,450,"Valiuta",0,CurncyCode,false,CurncyCodeSClass); 
  MatText(t=kInvoiceRowTypeLoyaltyPointsPayment,32,"LOYPA",true);
  MatCol(t,68,"Suma",0,Sum,true,0);
  MatCol(t,108,"Taškai",0,Points,true,0);
  MatCol(t,148,"Valiuta",0,CurncyCode,true,CurncyCodeSClass);
  MatCol(t,-280,"Spec",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeLoyaltyPointsBonus,28,"LOYBO",true);
  MatCol(t,68,"Taškai",0,Points,true,0);
  MatCol(t,141,"Spec",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeCreditCardPayment,32,"KORTELĖ",true);
  MatCol(t,94,"Suma",0,Sum,true,0);
  MatCol(t,198,"Mok. būdas",0,PayMode,true,PMSClass); 
  MatCol(t,250,"Spec",0,Spec,false,0); 
  MatCol(t,-280,"",0,CreditCard,false,CreditCardSClass);
  MatCol(t,-84,"Autorizacija",0,AuthorizationCode,false,0);
  MatText(t=kInvoiceRowTypeHeader,32,"Antraštė",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowType18,28,"Rezervuota",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowType19,28,"Rezervuota",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypePerceptionTax,32,"Percepcinis mokestis",true);
  MatCol(t,132,"",0,CuAccCode,false,0);
  MatCol(t,252,"",0,TAX2Prc,true,0);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,372,"",0,SalesAcc,false,AccSClass);
  MatCol(t,452,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeWithholdingTax,32,"Sulaikymo mokestis",true);
  MatCol(t,132,"",0,WHTax,false,WHTaxSClass);
  MatCol(t,172,"",0,SalesAcc,false,AccSClass);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,392,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeMultiBuyDiscount,32,"Multipirkimų nuol.",true);
  MatCol(t,152,"",0,MBRCode,false,0);
  MatCol(t,192,"",0,ArtCode,false,ForSaleINSClass);
  MatCol(t,-400,"",0,Spec,false,0);
  MatCol(t,-270,"",0,Quant,true,0);
  MatCol(t,-235,"",0,Price,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeDebtorsTransfer,32,"DBT TRSF",true);
  MatCol(t,94,"Spec",0,Spec,false,0);
  MatCol(t,-235,"Deb. sąsk.",0,SalesAcc,false,0);
  MatCol(t,-135,"Suma",0,Sum,true,0);
  MatCol(t,-30,"PVM kd.",0,VATCode,false,0); 
  Flip(1);
  t=kInvoiceRowTypeNormal;
  MatCol(t,144,"Aprašymas",0,Spec,false,0); 
  //START-CUST   November 18, 2014 by PST
  MatCol(t,-315,"Kaina be PVM",0,PriceExclVAT,true,0);
  //END-CUST November 18, 2014 by PST
  MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Suma",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Suma",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeInterest,-260,"",0,OrdRow,true,0);
  MatCol(t,-235,"",0,BasePrice,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Suma",0,Sum,true,0);
  Flip(2);
  MatCol(t=kInvoiceRowTypeNormal,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-360,"Sąsk.",0,SalesAcc,false,AccSClass);
  MatCol(t,-310,"Sukaupta",0,PeriodCode,false,AutSimPerSClass);
  MatCol(t,-255,"Patalpa",0,Location,false,LocationSClass);
  MatCol(t,-180,"Pozicija",0,PosCode,false,UsedPosSClass);
  if (UseTaxTemplatesforTaxCalc) then begin
  	MatCol(t,-144,"Objektai",0,Objects,false,ObjSClass);
  	MatCol(t,-70,"M. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
  	MatCol(t,-124,"Objektai",0,Objects,false,ObjSClass);
    MatCol(t,-90,"PVM kd.",0,VATCode,false,VATCodeSClass);
    MatCol(t,-45,"R. PVM kd.",0,RvrsVATCode,false,VATCodeSClass);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-360,"Sąsk.",0,SalesAcc,false,AccSClass);
  MatCol(t,-310,"Padidėjimas",0,PeriodCode,false,AutSimPerSClass);
  MatCol(t,-255,"Patalpa",0,Location,false,LocationSClass);
  MatCol(t,-180,"Pozicija",0,PosCode,false,UsedPosSClass);
  if (UseTaxTemplatesforTaxCalc) then begin
  	MatCol(t,-144,"Objektas",0,Objects,false,ObjSClass);
  	MatCol(t,-70,"M. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
  	MatCol(t,-124,"Objektai",0,Objects,false,ObjSClass);
  	MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  MatCol(t=kInvoiceRowTypeInterest,-70,"",0,SalesAcc,false,AccSClass);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-250,"Sąsk.",0,SalesAcc,false,AccSClass);
  MatCol(t,-170,"Padid.",0,PeriodCode,false,AutSimPerSClass);
  MatCol(t,-104,"Objektai",0,Objects,false,ObjSClass);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-35,"Mok. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  Flip(3);
  t=kInvoiceRowTypeNormal;
  MatCol(t,144,"Aprašymas",0,Spec,false,0); 
  if (UserCanAction("ViewCostPrice",true)) then begin
		MatCol(t,-380,"Vnt. kn.",0,Price,true,0);
		MatCol(t,-315,"%",0,vRebate,true,0);
		MatCol(t,-280,"Savikaina B2",0,BasePriceB2,true,0);
		MatCol(t,-210,"Savikaina",0,BasePrice,true,0);
		MatCol(t,-140,"BP",0,rowGP,true,0);
		MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
		MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
		MatCol(t,-135,"%",0,vRebate,true,0);
		MatCol(t,-100,"Suma",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-380,"Vnt. kaina",0,Price,true,0);
    MatCol(t,-315,"%",0,vRebate,true,0);
    MatCol(t,-280,"Savik. B2",0,BasePriceB2,true,0);
    MatCol(t,-210,"Savik.",0,BasePrice,true,0);
    MatCol(t,-140,"BP",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Suma",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-315,"Vnt. kn.",0,Price,true,0);
    MatCol(t,-245,"%",0,vRebate,true,0);
    MatCol(t,-210,"Savikaina",0,BasePrice,true,0);
    MatCol(t,-140,"BP",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Suma",0,Sum,true,0);
  end;
  Flip(4);
  t=kInvoiceRowTypeNormal;
  MatCol(t=kInvoiceRowTypeNormal,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-370,"Pardavėjas",0,Salesmen,false,UserSClass); 
  MatCol(t,-300,"Ser. Nr",0,SerialNr,false,SerialNrSClass); 
  MatCol(t,-220,"K.faktorius",0,PriceFactor,true,0); 
  MatCol(t,-170,"Ruošinys",0,Recepy,false,RecSClass);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-70,"Eilutė FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-310,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-240,"K. fakt.",0,PriceFactor,true,0);
  MatCol(t,-180,"Ruošinys",0,Recepy,true,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-110,"Eilutė FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t,-40,"Koef.",0,Coefficient,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-310,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-240,"K. fakt.",0,PriceFactor,true,0);
  MatCol(t,-180,"Ruošinys",0,Recepy,true,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-110,"Eil. FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t,-80,"",0,MotherArtCode,false,0);
  MatCol(t,-40,"",0,RecipeQuant,false,0);
  Flip(5);
  t=kInvoiceRowTypeNormal;
  MatCol(t=kInvoiceRowTypeNormal,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-315,"Vnt.",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Kiekis",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Plotis",0,UnitXval,true,0);
  MatCol(t,-160,"Aukštis",0,UnitYval,true,0);
  MatCol(t,-120,"Gylis",0,UnitZval,true,0);
  MatCol(t,-80,"Vieneto kaina",0,UnitFactPrice,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-315,"Vienetas",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Vnt. kiekis",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Plotis",0,UnitXval,true,0);
  MatCol(t,-160,"Aukštis",0,UnitYval,true,0);
  MatCol(t,-120,"Gylis",0,UnitZval,true,0);
  MatCol(t,-80,"Vnt. kaina",0,UnitFactPrice,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);//New Row Type..
  MatCol(t,-315,"Vnt.",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Kiekis",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Plotis",0,UnitXval,true,0);
  MatCol(t,-160,"Aukštis",0,UnitYval,true,0);
  MatCol(t,-120,"Gylis",0,UnitZval,true,0);
  MatCol(t,-80,"Vnt. kaina",0,UnitFactPrice,true,0);
  Flip(6);
  t = kInvoiceRowTypeNormal;
  MatCol(t,144,"Aprašymas",0,Spec,false,0); 
  MatCol(t,-390,"Pirk. Prekės Nr.",0,CustArtCode,false,CUINSClass); 
  MatCol(t,-300,"Koef.",0,Coefficient,true,0); 
  MatCol(t,-260,"K.faktor.",0,PriceFactor,true,0); 
  MatCol(t,-210,"Pasl. kontr. ist.",0,CUServiceHistNr,false,0); 
  MatCol(t,-130,"Kred. eil.",0,CreditedRow,false,0); 
  MatCol(t,-70,"Aplink. mok.",0,RepaExVAT,true,0); 
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-390,"Pirk. prekės Nr.",0,CustArtCode,false,CUINSClass); 
  MatCol(t,-300,"Koef.",0,Coefficient,true,0); 
  MatCol(t,-260,"K.faktor.",0,PriceFactor,true,0); 
  MatCol(t,-210,"Pasl. kontr. ist.",0,CUServiceHistNr,false,0); 
  MatCol(t,-130,"Kred. eil.",0,CreditedRow,false,0); 
  MatCol(t,-70,"Aplink. mok.",0,RepaExVAT,true,0); 
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);//New Row Type..
  MatCol(t,-80,"Aplinkos mok.",0,RepaExVAT,true,0);
  Flip(7);
  t = kInvoiceRowTypeNormal;
  if (GuiType!=kGuiiPhone) then begin
    MatCol(t,144,"Aprašymas",0,Spec,false,0); 
  end;
  MatCol(t,-240,"Muito Nr.",0,CustomsNr,false,0); 
  MatCol(t,-100,"Kilmės šalis",0,CountryOfOrg,false,CountrySClass); 
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0); 
  MatCol(t,-240,"Muito Nr.",0,CustomsNr,false,0); 
  MatCol(t,-100,"Kilmės šalis",0,CountryOfOrg,false,CountrySClass); 
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0); 
  MatCol(t,-240,"Muito Nr.",0,CustomsNr,false,0); 
  MatCol(t,-100,"Kilmės šalis",0,CountryOfOrg,false,CountrySClass); 
  InsertRowTest;
  DeleteRowTest;
  EndMatrix;
  vs = 22;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,5,"E");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,6,"F");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,7,"G"); 
  Tile(3,70,false,"3",FrRate);
  vs = 20;
  EditField(h=110,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+vs,50,"Baz. val. 1",Normal,BaseRate1,true,0); 
  EditField(h,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0);   
  EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0); 
  RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false); 
  RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);   
  //START-CUST   October 1, 2014 by PST
	ButtonFrame(h3+200,v-10,70,2,"Bazinė kaina");
	RadioButton(h3+200,v-10,0,0,"Be PVM",InclVAT);
	RadioButton(h3+200,v+6,2,0,"Su PVM",InclVAT); 
  //END-CUST October 1, 2014 by PST  
  Tile(4,110,false,"4",ShipDeal);
  vs = 20; h1 = 110; h2 = 310; h3 = 530; h4 = -100;
  EditField(h1,v=6,80,"Siunt. terminas",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h1,v+=vs,80,"Siunt. būdas",Normal,ShipMode,false,DMSClass);
  EditField(h1,v+=vs,80,"Maršrutas",Normal,Sorting,false,DelRouteSClass);
  EditField(h1,v+=vs,80,"Patalpa",Normal,Location,false,LocationSClass);
  EditField(h1,v+=vs,80,"Plan. siunt. data",Normal,PlanSendDate,false,PasteCurDate); 
  EditField(h1,v+=vs,80,"Plan. siunt. data",Normal,PlanSendTime,false,PasteCurTime); 
  EditField(h1,v+=vs,80,"Šaka",Normal,BranchID,false,AllCUSClass);
  EditField(h2,v=vm,80,"Viso kiekis",ViewOnly,TotQty,true,0);
  EditField(h2,v+=vs,80,"Viso svoris",ViewOnly,TotWeight,true,0);
  EditField(h2,v+=vs,80,"Viso tūris",ViewOnly,TotVolume,true,0);
  EditField(h2,v+=vs,80,"Frachtas",Normal,FrPrice,true,0);
	EditField(h2,v+=vs,80,"Plan. atv. data",Normal,PlanArrDate,false,PasteCurDate); 
	EditField(h2,v+=vs,80,"Plan. atv. laiaks",Normal,PlanArrTime,false,PasteCurTime); 
	EditField(h2,v+=vs,80,"Frachto įm.",Normal,FreightCode,false,FreightCompanySClass);
	CheckBox(h3,v=vm,0,"Atnaujinti sand.",UpdStockFlag);
	EditField(h3,v+=2*vs,80,"Frachtas #PVM kd.#",Normal,FrVATCode,true,VATCodeSClass);
	EditField(h3,v+=vs,80,"Intrastat oper. kd.",Normal,IntrastatTransCode,true,IntrastatTransCodeSClass);
	EditField(h3,v+=vs,80,"Glob. transp. nr.",Normal,GlobalTransportNr,false,0);
	EditField(h3,v+=vs,80,"Glob. transp. data",Normal,GlobalTransportDate,false,PasteCurDate);
  Tile(5,170,false,"5",OrderNr);
  EditField(h1,v=vm,80,"Užsk. nr.",ViewOnly,OrderNr,false,0);
  EditField(h1,v+=vs,80,"Pasl. užsk. nr.",ViewOnly,SVONr,false,0);
  EditField(h1,v+=vs,80,"Kred. rank. nr.",ViewOnly ,CredManNr,false,0);
  EditField(h1,v+=vs,80,"Stat. vertė",Normal,StatVal,true,0);
  EditField(h1,v+=vs,80,"Oper. laikas",Normal,TransTime,false,SetSClass);
  EditField(h1,v+=(2*vs),135,"Oficialus Nr 2.",Normal,OfficialSerNr2,false,0); 
  EditField(h2,v=vm,135,"Mok. autor. ID",Normal,TaxAuthID,false,0);
  EditField(h2,v+=vs,135,"Kontrolės kd.",ViewOnly ,TaxAuthIDCC,false,0);
  EditField(h2,v+=vs,135,"CAE/CAEA",Normal,CAE,false,0);
  EditField(h2,v+=vs,135,"CAE galioj.",Normal,CAEExpiry,false,0);
  EditField(h2,v+=vs,70,"CAEA prad.",ViewOnly,CAEAStartDate,false,0);
  EditField(h2+150,v,70,"CAEA gal. data",ViewOnly,CAEAExpiryDate,false,0);  
  EditField(h2,v+=vs,70,"CAEA Pradž.",ViewOnly,CAEAStartDate,false,0);
  EditField(h2+150,v,70,"CAEA Pab.",ViewOnly,CAEAExpiryDate,false,0);  
  EditField(h2,v+=vs,135,"Būklė",Normal,Status,false,SetSClass);
  CheckBox(h3=550,v=vm,0,"Be priminimų",NoRemndrFlag);
  CheckBox(h3,v+=16,0,"Be delspinigių",NoInterestFlag);
  CheckBox(h3,v+=16,0,"Be rinkinio",NoColectionFlag);
  CheckBox(h3,v+=16,0,"Pirk. Inf. operacijoje",ARonTR);
  CheckBox(h3,v+=16,0,"Nesiųsti kaip E-fakt.",NoEInvoice);
  CheckBox(h3,v+=16,0,"Fiskalinė fakt.",FiscalFlag);
  CheckBox(h3,v+=16,0,"Sav. atsisk.",SelfBilling);
  Tile(6,150,false,"6",PriceList); vs = 20;
  EditField(h1,v=vm,80,"Kainoraštis",Normal,PriceList,false,PLDefSClass);
  EditField(h1,v+=vs,80,"Nuolaidų lentelė",Normal,RebCode,false,0);
  EditField(h1,v+=vs,80,"Orig. pirkėjas",ViewOnly,OrgCust,false,0);
  EditField(h1,v+=vs,80,"Kreditinė kortelė",Normal,CreditCard,false,CreditCardSClass);
  EditField(h1,v+=vs,80,"Autorization",Normal,AuthorizationCode,false,0);
  EditField(h1,v+=vs,80,"Debitoriai",Normal,ARAcc,false,AccSClass);
  EditField(h1,v+=vs,-20,"Komentaras",Normal,InvComment,false,0);
  EditField(h2,v=vm,80,"Pard. grupė",ViewOnly,SalesGroup,true,0);
  EditField(h2,v+=vs,80,"Kalba",Normal,LangCode,false,LangSClass);
  EditField(h2,v+=vs,80,"Komisiniai",Normal,Commision,true,0);
  EditField(h2,v+=vs,80,"Viso su komis.",ViewOnly,SumIncCom,true,0);
  EditField(h2,v+=vs,80,"Delspinigiai",Normal,IntCode,true,IntSClass);
  EditField(h2,v+=vs,80,"Org. Nr.",Normal,CredInv,false,0);
  EditField(h3,v=vm,80,"Primin. lygis",Normal,LastRemndr,false,0);
  EditField(h3,v+=vs,80,"Pask. primin. data",Normal,LastRemDate,false,PasteCurDate);
  EditField(h3,v+=vs,80,"Lojalumo kortelė",Normal,LoyaltyCardNr,false,LoyaltyCardSClass);
  EnterSkip(Math);
  EditField(h3,v+=vs,80,"Narystės lygis",ViewOnly,LCMLevel,false,LCMemberLevelSClass);
  EditField(h3,v+=vs,80,"Lojalumo taškai",ViewOnly,Points,true,0);
  Tile(7,250,false,"7",Addr1); vs = 20;
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Faktūra"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Adresas"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
  EditField(h,vm=(v+=vs),80,"Šalis",Normal,InvCountry,false,CountrySClass);
  h5 = -270;
  width = 135;
  EditField(h5,v,width,"Sąskaita",Normal,BankCode,false,BankSClass); 
  ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Patvirtinimo būklė");
  RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Nereikalaujama",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Nepradėta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Neprašoma",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Laukiama",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Patvirtinta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Atsakyta",AcceptanceStatus);  
  v = VATZoneButtonsLabelsLIT(h3=290,v=vm,140,16);
  EditField(h2=-170,v=vm,150,"Regionas",Normal,Region,false,RegionSClass); 
  EditField(h2,v+=vs,150,"PVM Reg. Nr.",Normal,VATNr,false,0);
  EditField(h2,v+=vs,150,"GLN",ViewOnly,RecipientGLN,false,0);
  EditField(h2,v+=vs,150,"Telefonas",Normal,Phone,false,0);
  EditField(h2,v+=vs,150,"Faksas",Normal,Fax,false,0);
  Tile(8,170,false,"8",ShipAddr0); vs = 20;
  EditField(h1,v=6,80,"Adreso kd.",Normal,DelAddrCode,false,DelAddr3SClass);
  EditField(h1,v+=vs,-20,"Siuntimas",Normal,ShipAddr0,false,0);
  EditField(h1,v+=vs,-20,"Adresas",Normal,ShipAddr1,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
  EditField(h1,v+=vs,80,"Šalis",Normal,DelCountry,false,CountrySClass); 
  EditField(h2,v,150,"Siuntimo GLN",ViewOnly,DelRecipientGLN,false,0);
  EnterSkip(InvDate);
  Tile(9,170,false,"9",RetItmSerNo1); vs = 20;
  EditField(h1=80,v=6,80,"1 Ser. nr.",Normal,RetItmSerNo1,false,0);
  EditField(h2=220,v,180,"1 Pavad.",Normal,RetItmName1,false,0);
  EditField(h3= 450,v,80,"1 Suma",Normal,RetItmPrice1,false,0);
  
  EditField(h1,v=v+vs,80,"2 Ser. nr.",Normal,RetItmSerNo2,false,0);
  EditField(h2,v,180,"2 Pavad.",Normal,RetItmName2,false,0);
  EditField(h3,v,80,"2 Suma",Normal,RetItmPrice2,false,0);

  EditField(h1,v=v+vs,80,"3 Ser. nr.",Normal,RetItmSerNo3,false,0);
  EditField(h2,v,180,"3 Pavad.",Normal,RetItmName3,false,0);
  EditField(h3,v,80,"3 Suma",Normal,RetItmPrice3,false,0);
  
  EditField(h1,v=v+vs,80,"4 Ser. nr.",Normal,RetItmSerNo4,false,0);
  EditField(h2,v,180,"4 Pavad.",Normal,RetItmName4,false,0);
  EditField(h3,v,80,"4 Suma",Normal,RetItmPrice4,false,0);
  
  EditField(h1,v=v+vs,80,"5 Ser. nr.",Normal,RetItmSerNo5,false,0);
  EditField(h2,v,180,"5 Pavad.",Normal,RetItmName5,false,0);
  EditField(h3,v,80,"5 Suma",Normal,RetItmPrice5,false,0);
  
  HALPushButton(10,v=v+20,700,v+25,"CashIVsm3","Pridėti į faktūrą");
  
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Faktūros būklė",'r',2,"IVInfoIVDsm"); 
    SpecialMenu("Prekės būklė",'I',0,"ItemStatusIVDsm"); 
    SpecialMenu("Atidaryti D/K operaciją",'t',8,"OpenTRFromIV"); 
    SpecialMenu("Sukurti kredito pažymą",' ',20,"CreateCreditNoteIVDsm"); 
    SpecialMenu("Pridėti tarpinę sumą",' ',12,"SubTotalLineIVDsm"); 
    SpecialMenu("Prijungti prie išankstinio",' ',4,"ConnectToPrepayIVDsm"); 
  end else begin
		SpecialMenu("Prekės būklė",'I',0,"ItemStatusIVDsm");
		SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm");
		SpecialMenu("Faktūros būklė",'r',2,"IVInfoIVDsm");
		SpecialMenu("Ankstesnės pard. kainos",' ',15,"IVLastSPrsm");
		SpecialMenu("Prijungti antraštės eilutė",' ',12,"HeaderLineIVDsm");
		SpecialMenu("Prijungti paslėptą liniją",' ',12,"HiddenLineIVDsm");
  	SpecialMenu("Prijungti aplinkos mokestį",' ',19,"RepaIVsm");
  	SpecialMenu("Pridėti užlaikymą",' ',25,"RetentionLineIVDsm"); 
  	SpecialMenu("Įstatyti tarp. sumą",' ',12,"SubTotalLineIVDsm");
    SpecialMenu("Siųsti patvirtinimui",' ',6,"IVSendforAcceptanceIVDsm");
  	SpecialMenu("Atšaukti patvirtinimą",' ',2,"CancelApprovalRequestDsm");
		SpecialMenu("Pakeisti į bazinę val. 1",' ',14,"SwitchToBase1IVDsm");
		SpecialMenu("Prijungti prie išankstinio",' ',4,"ConnectToPrepayIVDsm");
		SpecialMenu("Perskaičiuoti nuolaidą",' ',11,"RecalcDiscountIVDsm");
		SpecialMenu("Perskaičiuoti svorį ir tūrį",' ',10,"RecalcWeightIVDsm");
		SpecialMenu("Atnaujinti valiutinį kainoraštį",' ',5,"UpdatePricesIVDsm");
		SpecialMenu("Spausdinti kasos pajamas-išlaidas",' ',7,"PrintCashInOutIVDsm");
		//SpecialMenu("Spausdinti į fiskalinį spausdintuvą",' ',19,"PrintToFiscPrntIVDsm");//CUST-REMOVED
		SpecialMenu("Mokėjimas kortele",' ',22,"CCPayIVDsm");
		SpecialMenu("Keisti dalinius mokėjimus",' ',24,"EditInstalmentIVDsm");
		SpecialMenu("Persiųsti el. faktūrą",' ',21,"ResendEIVDsm");
  	SpecialMenu("Atidaryti D/K operaciją",'t',8,"OpenTRFromIV");
    SpecialMenu("Sukurti veiklą",'c',9,"CreateActFromIVDsm"); 
		SpecialMenu("Sukurti kasos pajamas",' ',1,"DoCLInFromIVD");
		SpecialMenu("Sukurti kredito pažymą/grąžinimą",' ',20,"CreateCreditNoteIVDsm");// Edit ************************** BPI Ukraine - KramarAlexandr - 03, 06 03 2019 y. at 10:03:21 AM
		SpecialMenu("Sukurti kredito sutartį",' ',25,"CreateCredManIVsm");
		SpecialMenu("Sukurti kontraktą",' ',13,"COFromIVDsm");
		SpecialMenu("Sukurti koregavimo faktūrą",' ',16,"CorrectionIVsm");
		SpecialMenu("Create Debit Note",' ',20,"CreateDebitNoteIVDsm");
		SpecialMenu("Sukurti EDI faktūrą",' ',9,"DoEDIInvFromIVD");
		SpecialMenu("Sukurti el. laišką",'m',23,"CreateMailFromIVDsm");
  	SpecialMenu("Sukurti dalinių mokėjimų įplaukas",' ',6,"CreateInstalmentsIVDsm");
  	SpecialMenu("Vadybininko nuolaidos perrašymas",' ',24,"MgrsDiscOverrideIVDsm"); 
    SpecialMenu("Apple Warranty Status Check",'w',26,"WarrantyStatusIVDsm"); 
    //START-CUST   October 2, 2014 by PST
    //SpecialMenu("Sukurti grąžinimą",'',27,"CreatePOSReturnIVDsm"); //off Edit ************************** BPI Ukraine - KramarAlexandr - 03, 06 03 2019 y. at 9:55:23 AM
    //SpecialMenu("Pin Pad VOID",'',27,"PinPadVoidIVDsm");
    //END-CUST October 2, 2014 by PST
//     SpecialMenu("Delete Invoice (don't use)",' ',10,"iDeal_ForceDeleteIVDsm");//hal-146; edz REMOVED BECAUSE HAL-309
  end;
 EndWindow;
end;

window INLinkTypeLClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Item link types",INLinkTypeLClass,CGmlist,-);
  SpawnClass(INLinkTypeDClass);
  SetWRect(64,80,509,298);
  Sizeable(-1,-1,0,0);
  UseView(INLinkTypeVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Code",Code,false,Code);
  RlColKey(120,120,"Comment",Name,false,Name);
  SearchField("Search");
  EndWindow;
end;

window INLinkTypeDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Insert item link type",INLinkTypeSClass,CGslist,-);
  SpawnClass(INLinkTypeDClass);
  SetWRect(100,80,400,298);
  Sizeable(-1,-1,0,0);
  UseView(INLinkTypeVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Code",Code,false,Code);
  RlColKey(120,120,"Comment",Name,false,Name);
  SearchField("Search");
  EndWindow;
end;

window INLinkTypeDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real vs,h1,h2,v;
  WindowBegin("Item link type",INLinkTypeDClass,CGview,-);
  SetWRect(64,80,500,350);
//  Sizeable(-1,-1,0,0);
  UseView(INLinkTypeVc);
  vs = 20; h1 = 55; h2 = 180;
  EditField(h1,v=6,40,"Code",Normal,Code,false,0);
  EditField(h2,v,-40,"Comment",Normal,Name,false,0);
  MatrixBegin(4,v+=40,-32,-20,-,99);
  MatCol(1,24,"Lang.",0,LangCode,false,LangSClass);
  MatCol(1,94,"Text",0,Text,false,0);
  EndMatrix;
  EndWindow;
end;

window INLinkLClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Item links",INLinkLClass,CGmlist,-);
  SpawnClass(INLinkDClass);
  SetWRect(64,80,600,300);
  Sizeable(-1,-1,0,0);
  UseView(INLinkVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Item",Code,false,Code);
  RlColKey(140,90,"Description",Name,false,Name);
  RlColKey(-60,-60,"Type",Type,false,Type);
  SearchField("Search");
  EndWindow;
end;

window INLinkSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Insert Item links",INLinkSClass,CGslist,-);
  SpawnClass(INLinkDClass);
  SetWRect(100,80,600,300);
  Sizeable(-1,-1,0,0);
  UseView(INLinkVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Item",Code,false,Code);
  RlColKey(100,100,"Name",Name,false,Name);
  RlColKey(-60,-60,"Type",Type,false,Type);
  SearchField("Search");
  EndWindow;
end;

window INLinkDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real vs,h1,h2,h3,v;
  WindowBegin("Artikula saites",INLinkDClass,CGview,-);
  SetWRect(64,80,700,450);
  UseView(INLinkVc);
  vs = 20; h1 = 55; h2 = 200; h3 = 320;
  EditField(h1,v=6,70,"Item",Normal,Code,false,INSClass);
  EditField(h2,v,240,"Name",Normal,Name,false,0);
  EditField(h1,v+=vs,70,"Type",Normal,Type,false,INLinkTypeSClass);
  EditField(h2,v,240,"Name",Normal,TypeName,false,0);
  HalPushButton(460,11,580,60,"SimiFriendCopy","Ģenerēt Līdzīgās");//ES
  MatrixBegin(4,v+=40,-32,-20,-,99);
  MatCol(1,24,"Item",0,ArtCode,false,INSClass);
  MatCol(1,90,"NAme",0,ArtName,false,0);
  MatCol(1,-200,"Komentārs",0,Comment,false,0);
  EndMatrix;
  EndWindow;
end;

  
window LocalMachineTClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5,vm2;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  WindowBegin("Lokalus kompiuteris",LocalMachineTClass,CGSbl,-);
  SetWRect(64,80,750,580);
  SetBlid(LocalMachineBlock);
  vs = 20; h = 208; v = 6;
  Tile(0,50,false,"",LocalMachineCode);
  EditField(h,v,60,"Kodas",Normal,LocalMachineCode,false,LocalMachineSClass);
  tilenr = 1;
  TileButton(tilenr,"Pagr."); tilenr = tilenr + 1; 
  TileButton(tilenr,"Fontai"); tilenr = tilenr + 1; 
  if (StandardHansa==false) then begin
  	if (HasHotelInterface) then begin // Hotel
    	TileButton(tilenr,"Viešbutis"); tilenr = tilenr + 1; 
  	end else begin
    	TileButton(tilenr,"Išteklių plan."); tilenr = tilenr + 1;
    end;
  end;
  TileButton(tilenr,"Integracija"); tilenr = tilenr + 1;
  TileButton(tilenr,"Vart. apibrėžti"); tilenr = tilenr + 1; 
  TileButton(tilenr,"POS"); tilenr = tilenr + 1; 
  TileButton(tilenr,"POS išvaizda"); tilenr = tilenr + 1; 
  tilenr = 1;
  Tile(tilenr,515,false,tilenr,DefLocation); tilenr = tilenr + 1;
  h2=400;
  EditField(h,v,60,"Pagrindinis pirkėjas",Normal,DefCustCode,false,CUSClass);
  EditField(h2,v,60,"Filialas",Normal,BranchID,false,CUBranchSClass);
  EditField(h,v+=vs,60,"Pagrindinė patalpa",Normal,DefLocation,false,LocationSClass);
  EditField(h2,v,60,"Pagr. grąž. patalpa",Normal,DefReturnLocation,false,LocationSClass);
  EditField(h,v+=vs,120,"Pagr. spausd.",Normal,DefPrinter,false,0);
  EditFieldTL(h,v+=vs,180,"Pagr. eksporto kodavimas",M4StrSet,Normal,89,DefExpCodepage,false,StrSetSClass);
//  EditField(h,v+=vs,100,"Printer",Normal,FiscalPrinter,false,SetSClass); used difrent way now afaik ,jj
  if (StandardHansa==false) then begin
    EditField(h,v+=vs,60,"GMT ofsetas",Normal,GMTOffset,false,0);
  end;
  ButtonFrame(h2=30,vm=(v+=40),153,4,"Įstatyti prekę");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",ItemPasteSpecial);
  RadioButton(h2,v+=16,1,0,"Be klasės",ItemPasteSpecial);
  RadioButton(h2,v+=16,2,0,"Su klase",ItemPasteSpecial);
  RadioButton(h2,v+=16,3,0,"Be Coverflow",ItemPasteSpecial); 
  
  ButtonFrame(h2=30,v+=40,153,3,"Veikl. klasės įstatymas");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",AccClassPasteSpecial);
  RadioButton(h2,v+=16,1,0,"Be klasės",AccClassPasteSpecial);
  RadioButton(h2,v+=16,2,0,"Su klase",AccClassPasteSpecial);

  ButtonFrame(h2=220,v=vm,153,4,"Pašto dėžutės įstatymas");
  RadioButton(h2,v,3,0,"Kontakto ryšiai",MailboxPasteSpecial);
  RadioButton(h2,v+=16,1,0,"Pirkėjai",MailboxPasteSpecial);
  RadioButton(h2,v+=16,2,0,"Tiekėjai",MailboxPasteSpecial);
  RadioButton(h2,v+=16,0,0,"Pašto dėž./Konferencijos",MailboxPasteSpecial);

  if (StandardHansa==false) then begin
  	ButtonFrame(h2,v+=40,153,3,"Veiklos tipo įst. lang."); 
  	RadioButton(h2,v,0,0,"Sistem. pagr.",ActTypePastePerClass); 
  	RadioButton(h2,v+=16,1,0,"Veikl. tip. veikl. klasei",ActTypePastePerClass); 
  	RadioButton(h2,v+=16,2,0,"Naudingi veikl. tipai",ActTypePastePerClass); 
  end;
  if (HasObjects) then begin
    ButtonFrame(h2=30,v+=40,153,3,"Objekto įstatymas");
    RadioButton(h2,v,0,0,"Pagal nutylėjimą",ObjectPasteSpecial);
    RadioButton(h2,v+=16,1,0,"Be tipo",ObjectPasteSpecial);
    RadioButton(h2,v+=16,2,0,"Su tipu",ObjectPasteSpecial);
  end;
  

  CheckBox(h=400,v=vm,0,"Perspėti trinant",WarnOnDelete); 
  CheckBox(h,v+=17,0,"Nerodyti Tool Tips",NoToolTips);
  CheckBox(h,v+=17,0,"Be fono",NoBackGround);
  CheckBox(h,v+=17,0,"Plati slankiojimo juosta",WideScrollBars);
  CheckBox(h,v+=17,0,"Neįjungti serverio režimo nesinaudojant",NoServerModeIdle);
  if (StandardHansa==false) then begin
    CheckBox(h,v+=17,0,"El. pašto sinch. fone",BackgroundMailSync);
    CheckBox(h,v+=17,0,"Auto. pirk. būklės atask. atidarymas atsiliepiant",CustPSOnCall);
    CheckBox(h,v+=17,0,"Patvirtinimo tipo veiklos langas",ApprovalTypeActDClass);
  end;

  if (GuiType==kGuiiPhone) then begin
    ButtonFrame(h2=30,v+=40,153,3,"Matricos redagavimas");
    RadioButton(h2,v,0,0,"Eilutėje",MatEditing);
    RadioButton(h2,v+=16,1,0,"Išplėstas",MatEditing);
    //RadioButton(h2,v+=16,2,0,"On Account A/C",MatEditing);
    EndFrame;
  end;

  Tile(tilenr,70,false,tilenr,entryFont); tilenr = tilenr + 1;
  v = 6; h = 210;
  EditField(h,v,-20,"Taisymo šriftas",Normal,entryFont,false,FontNameSClass);
  EditField(h,v+=vs,-20,"Ataskaitų šriftas",Normal,reportFont,false,FontNameSClass);
  EditField(h,v+=vs,50,"Ataskaitų šrifto dydis",Normal,reportFontSize,false,0);
  if (GuiType==kGuiiPhone) then begin
    EditField(h,v+=vs,50,"Prietaiso svarstyklių faktorius",Normal,TabletScaleFactor,false,0); 
  end;
  v = 6;
  if (StandardHansa==false) then begin
  	if (HasHotelInterface) then begin // Hotel
    	Tile(tilenr,100,false,tilenr,ResLoc); tilenr = tilenr + 1;
    	EditField(h,v,60,"Kambario patalpa",Normal,ResLoc,false,ResLocSClass);
    	EditField(h,v+=vs,150,"Kambario klasė",Normal,ResClass,false,ResClasSClass);
      EditField(h,v+=vs,60,"Užrakinimo sistemos kodo nr.",Normal,LockSysEncoderNo,false,0);
  	end else begin
    	Tile(tilenr,50,false,tilenr,ResLoc); tilenr = tilenr + 1;
    	EditField(h,v,60,"Išteklių patalpa",Normal,ResLoc,false,ResLocSClass);
    	EditField(h,v+=vs,150,"Išteklių klasė",Normal,ResClass,false,ResClasSClass);
  	end;
  end;
  Tile(tilenr,130,false,tilenr,SkypeInt); tilenr = tilenr + 1;
  ButtonFrame(h,vm=(v=20),123,3,"Prisijungti prie Skype");
  RadioButton(h,v,1,0,"Taip",SkypeInt);
  RadioButton(h,v+=16,2,0,"Ne",SkypeInt);
  RadioButton(h,v+=16,0,0,"Dar nenuspręsta",SkypeInt);

  ButtonFrame(h,v+=96,200,1,"Prisijungti prie GSX");
  EditField(h+100,v,80,"Perkelti į sąskaitą",Normal,ShipToAccount,false,0); 
  
  CheckBox(h,v+=30,0,"Garso signalas kiekvienam pranešimu",BeepOnMessage);
  if (HasItemClassification) then begin
  	CheckBox(h,v+=16,0,"Sinkronizuoti prekes ir kainasSyncronise",SyncRecordforPOS);  
  	EditField(h,v+=vs,-40,"Prekės klasė sinkronizuoti",Normal,SyncINClass,false,DISClass);
  end;
  
  ButtonFrame(h2=h+200,v=vm,140,7,"Pageidaujamas skamb. būdas");
  RadioButton(h2,v,kPreferredCallingMethodNotDecided,0,"Nenuspręsta",PreferredCallingMethod);
  RadioButton(h2,v+=16,kPreferredCallingMethodSkype,0,"Skype",PreferredCallingMethod);
  RadioButton(h2,v+=16,kPreferredCallingMethodAsterisk,0,"Asterisk",PreferredCallingMethod);
  RadioButton(h2,v+=16,kPreferredCallingMethod3CX,0,"3CX",PreferredCallingMethod);
  RadioButton(h2,v+=16,kPreferredCallingMethodTAPI,0,"TAPI",PreferredCallingMethod);
  RadioButton(h2,v+=16,kPreferredCallingMethodSoftPhone,0,"Įdiegtas",PreferredCallingMethod); 
  RadioButton(h2,v+=16,kPreferredCallingMethodBria,0,"Bria",PreferredCallingMethod); 

  Tile(tilenr,300,false,tilenr,UserStr1); tilenr = tilenr + 1;
  v = 6;
  label = UserDefined("LocalMachineSetVc","UserStr1");
  if (nonblank(label)) then begin
    EditField(h,v,-20,label,Normal,UserStr1,false,0);v = v + vs;
  end;
  label = UserDefined("LocalMachineSetVc","UserStr2");
  if (nonblank(label)) then begin
    EditField(h,v,-20,label,Normal,UserStr2,false,0);v = v + vs;
  end;
  label = UserDefined("LocalMachineSetVc","UserStr3");
  if (nonblank(label)) then begin
    EditField(h,v,-20,label,Normal,UserStr3,false,0);v = v + vs;
  end;
  label = UserDefined("LocalMachineSetVc","UserStr4");
  if (nonblank(label)) then begin
    EditField(h,v,-20,label,Normal,UserStr4,false,0);v = v + vs;
  end;
  label = UserDefined("LocalMachineSetVc","UserStr5");
  if (nonblank(label)) then begin
    EditField(h,v,-20,label,Normal,UserStr5,false,0);v = v + vs;
  end;
  Tile(tilenr,450,false,tilenr,Supervisor); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
  	EditField(h=220,v=6,60,"Prižiūrėtojas",Normal,Supervisor,false,UserSClass);
  	EditField(h,v+=20,60,"Pakuotojas",Normal,Bagger,false,BaggerSClass);
  	EditField(h,v+=vs,60,"Kainoraštis",Normal,PLCode,false,PLDefSClass); 
  end else begin
    EditField(h=220,v=6,60,"Kainoraštis",Normal,PLCode,false,PLDefSClass); 
  end;
  EditField(h,v+=vs,100,"Terminalo ID",Normal,TerminalID,false,0);
  if (IsEnterprise) then begin    
  	EditField(h,v+=vs,150,"POS mygtukų grupė",Normal,POSButtonGroup,false,POSButtonGroupsSClass);
  end;
  //START-CUST   October 1, 2014 by PST
  EditField(h,v+=20,150,"Grynųjų mokėjimo sąlyga",Normal,FiscalPrinterEJournalPath,false,PDSClass);
  EditField(h,v+=20,150,"Kreditinės kortelės mokėjimo sąlyga",Normal,FiscalPrinterEJournalPath2,false,PDSClass);
  EditField(h,v+=20,100,"Mišraus mokėjimo mok. sąlyga",Normal,TerminalID,false,0);
  //END-CUST October 1, 2014 by PST
  EditField(h,v+=20,150,"Lizingo mokėjimo būdas",Normal,TableViewCode,false,0);
  EditField(h,v+=20,150,"Baro kortelės klasė",Normal,RestAccClass,false,RestAccClassSClass);
  //EditField(h,v+=vs,100,"Terminalo ID",Normal,TerminalID,false,0);
  if (HasModRest) then begin
    EditFieldTL(h,v+=vs,-20,"Virtuvės Užsakymo ekrano skyrius",M4Str,Normal,200,KitchenOrdScrDep,false,RestOrderDeptSClass);
    EditFieldTL(h,v+=vs,50,"Virtuvės Užsakymo ekrano atnaujinimo intervalas",M4Time,Normal,0,KitchenRefreshInt,false,PasteCurTime);  
    CheckBox(h,v+=20,0,"Detalus virtuvės Užsakymo ekranas",KitchenOrdDetailed);  v = v - 4;
    CheckBox(h,v+=20,0,"Viena aktyvi baro kortelė",OneBarTabWindow);
  end;
    EditField(h,v+=20,150,"Bluetooth pavad.",Normal,BluetoothName,false,0); 
    EditField(h,v+=20,150,"Bluetooth MAC Adr.",Normal,BluetoothMACAddr,false,0);  
//  CheckBox(h,v+=20,0,"iOS Vertical Touch Screen Interface",TouchScreenLook2);
//  CheckBox(h,v+=20,0,"iOS Vertical Touch Screen Interface",TouchScreenLook2);
  CheckBox(h=30,vm=(v+=24),0,"Prekių pav. POS sąskaitose",TouchScreenLookPicture);
  CheckBox(h,v+=16,0,"Naudoti grynujų ekraną",UseDisplay);
  CheckBox(h,v+=16,0,"Naudoti pirkėjo ekraną",UseCustomerDisplay);
  CheckBox(h,v+=16,0,"Naudoti skaičių klaviatūrą",UseNumPad); 
  CheckBox(h,v+=16,0,"Suporuotas",Paired); 
  if (StandardHansa==false) then begin
    CheckBox(h=225,v=vm,0,"Pagrindinis pakuotojas ir prižiūrėtojas POS faktūroje",DefaulBaggerSupervisor);
    CheckBox(h,v+=16,0,"Rodyti pakuotoją POS faktūroje",ShowBaggerSupervisor);
    CheckBox(h,v+=16,0,"Reikalauti autorizacijos kodo, apmokėjimui kredito kortele",CCRequireAuthCode);
  end;
  CheckBox(h,v+=16,0,"Paslėpti kiekį POS faktūroje",HideQty);
  CheckBox(h,v+=16,0,"Paslėpti prekės kodą Pos sąskaitoje",HideArtCode); 
  CheckBox(h,v+=16,0,"Pavienis čekio spausdinimas ",IncrementalReceiptPrinting);
  if (HasLocalization("HRV")) then begin 
    CheckBox(h,v+=16,0,"Send Fiscal Invoice (#S/L#)",SendFiscalInvoice); 
  end;

  Tile(tilenr,490,false,tilenr,-); tilenr = tilenr + 1;

  StaticText(h=30,vm=(v=20),"POS sąskaitos",false); 
  WindowLine(20,v+1,-20,v+1,kLineTypeGray);
  ButtonFrame(h=30,vm=(v+=24),100,3,"Panelės dydis");
  RadioButton(h,v,kPOSPanelSizeLarge,0,"Didelis",POSPanelSize);
  RadioButton(h,v+=16,kPOSPanelSizeMedium,0,"Vidutinis",POSPanelSize);
  RadioButton(h,v+=16,kPOSPanelSizeSmall,0,"Mažas",POSPanelSize);
  ButtonFrame(h=225,v=vm,100,4,"Panelės šrifto dydis");
  RadioButton(h,v,0,0,"22",POSFontSize);
  RadioButton(h,v+=16,3,0,"30",POSFontSize);
  RadioButton(h,v+=16,1,0,"16",POSFontSize);
  RadioButton(h,v+=16,2,0,"11",POSFontSize);

  EditField(h=121,v+=44,50,"Panelės šrifto dydis",Normal,PanelFontSize,true,0);
  EditField(h=321,v,50,"Pirmo laukelio šrifto dydis",Normal,IVCashPOSDisplayFontSize1,true,0);
  EditField(h=521,v,50,"Antro laukelio šrifto dydis",Normal,IVCashPOSDisplayFontSize2,true,0);

/*
  EditField(h,v+=30,50,"Šrifto dysis",Normal,PanelFontSize,true,0);
  EditField(h,v+=vs,50,"Pirmo laukelio šrifto dydis",Normal,IVCashPOSDisplayFontSize1,true,0);
  EditField(h,v+=vs,50,"Antro laukelio šrifto dydis",Normal,IVCashPOSDisplayFontSize2,true,0);
*/
  ButtonFrame(h=400,v=vm,100,2,"Mygtukų pozicija"); 
  RadioButton(h,v,kPOSButtonsPositionLeft,0,"Kairė",POSButtonsPosition);
  RadioButton(h,v+=16,kPOSButtonsPositionRight,0,"Dešinė",POSButtonsPosition);
  CheckBox(h,v+=54,0,"Prekių foto ant mygtukų",POSShowButtonPictures);
  EditField(h=600,v=vm-10,50,"Mygtuko plotis",Normal,POSButtonWidth,true,0);
  EditField(h,v+=vs,50,"Mygtuko ilgis",Normal,POSButtonHeight,true,0);
  EditField(h,v+=vs,50,"Mygtuko šrifto dydis",Normal,POSLabelFontSize,true,0); 
  EditField(h,v+=vs,50,"Mygtuko šrifto dydis (Win)",Normal,POSLabelFontSizeWIN,true,0); 
  
  StaticText(h=30,v+=100,"Kliento ekranas",false);
  WindowLine(20,v+1,-20,v+1,kLineTypeGray);
  EditField(h=121,v+=24,50,"Panelės šrifto dydis",Normal,CustomerDisplayFontSize,true,0); 
  EditField(h=321,v,50,"Pirmo laukelio šrifto dydis",Normal,CUDisplayFontSize1,true,0);
  EditField(h=521,v,50,"Antro laukelio šrifto dydis",Normal,CUDisplayFontSize2,true,0);
  if (HasLocalization("AUS,NZL")) then begin
    SpecialMenu("Suporuoti su SmartPay",' ',1,"NZLSmartPayPairingTsm"); 
  end;

  if (HasLocalization("SVN")) then begin
//    SpecialMenu("",' ',1,"SVNRegisterPremiseDsm");
  end;
  EndWindow;
end;
  
window GiftVoucherVClass:1 // custom?
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Dovanų kuponas", GiftVoucherVClass, CGMnt, RcType);
  SetWRect(20, 80, 500, 150);
  v = 6; h = 140;
  EditFieldTL(h, v, 80, "Dovanų čekio suma", M4UVal, Normal, 0, vals1, true, 0);
  EditFieldTL(h, v+20, 280, "Komentaras", M4Str, Normal, 255, f1, false, 0);
  EditFieldTL(h, v+40, 80, "Galioja iki", M4Date, Normal, 0, d1, true, PasteCurDate);
  CheckBox(h,v+60,0,"Rankpinigiai",flags[1]);
  EndWindow;
	
	return;
end;
  
window  GiftVoucherRetVClass:1 // custom?
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Rankpinigių/dovanų kupono grąžinimas", GiftVoucherRetVClass, CGMnt, RcType);
  SetWRect(20, 80, 500, 150);
  v = 6; h = 140;
  EditFieldTL(h, v, 80, "Grąžinama suma", M4UVal, Normal, 0, vals1, true, 0);
  EditFieldTL(h, v+20, 280, "Komentaras", M4Str, Normal, 255, f1, false, 0);
  EndWindow;
	
	return;
end;
  
window GCDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vs;
  WindowBegin("Išleistas dovanų čekis",GCDClass,CGview,-);
  SetWRect(64,80,550,200);
  UseView(GCVc);
  FormName(GCForm);
  v = 6; vs = 20; h = 80; h2 = 240;
  EditField(h,vm=v, 55,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(h2,v, 70,"Suma",Normal,Amount,true,0);
  CheckBox(-90,v,0,"OK",OKFlag); 
  //START-CUST   November 18, 2014 by PST
  CheckBox(-120,v+20,0,"Rankpinigiai",DepositFlag); 
  //END-CUST November 18, 2014 by PST
  EditField(h,v+=vs, 70,"Oper. data",Normal,TransDate,false,PasteCurDate);
  EditField(h2,v, 70,"Galioja iki",Normal,ExpiryDate,false,PasteCurDate);
  EditField(h,v+=vs, -20,"Komentaras",Normal,Comment,false,0);
  EditField(h,v+=vs, 100,"Barkodas",Normal,BarCode,false,0);
  EditField(h2,v,70,"Tipas",Normal,Type,false,GCTypeSClass);
  EndWindow;
end;
  
window GCSDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Parduoti dovanų čekiai",GCSDClass,CGview,-);
  SetWRect(64,80,470,200);
  UseView(GCSVc);
  v = 6; vs = 20; h = 80; h2 = 270;
  EditField(h,vm=v, 55,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(h2,v, 70,"Suma",Normal,Amount,true,0);
  EditField(h,v+=vs, 70,"Oper. data",Normal,TransDate,false,PasteCurDate);
  EditField(h2,v, 70,"Galioja iki",Normal,ExpiryDate,false,PasteCurDate);
  EditField(h,v+=vs, -20,"Komentaras",Normal,Comment,false,0);
  EditField(h,v+=vs, 100,"Barkodas",Normal,BarCode,false,0);
  EditField(h2,v, 70,"Likutis",ViewOnly,Balance,true,0);
  //SpecialMenu("Grąžinti rankpinigius/ dovanų kuponą",'r',2,"ReturnGVDsm"); 
  EndWindow;
	
	return;
end;
  
window GCSLClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Parduoti dovanų čekiai",GCSLClass,CGmlist,-);
  SetWRect(64,80,709,298);
  SpawnClass(GCSDClass);
  Sizeable(-1,-1,0,0);
  UseView(GCSVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Nr.",SerNr,false,SerNr);
  RlColKey(94,94,"Data",TransDate,false,TransDate);
  RlColKey(170,170,"Barkodas",BarCode,false,BarCode);
  RlColKey(270,270,"Komentaras",Comment,false,Comment);
  RlCol(-70,-70,"Vertė",Amount,true);
  SearchField("Ieškoti");
  EndWindow;
	
	return;
end;
  
window IVGPRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("BP, faktūros",IVGPRClass,CGRcW,RcType);
  SetWRect(20,80,480,320);
  vs = 20;
  Tile(0,20,false,"",Period2Str);
  PeriodField(150,v=6,"Periodas");
  TileButtons(v,2);
  Tile(1,280,false,"1",f3);
  v = 6;
  EditFieldTL(h=150,v, 150,"Faktūros nr.",  M4Str,Normal,30,f1,false,0);
  EditFieldTL(h,v+=vs ,150,"Pirkėjas",M4UStr,Normal,50,f2,false,CUSClass);
  if (HasCategories) then begin
    EditFieldTL(150,v+=vs ,70,"Customer Category",M4UStr,Normal,5,f9,false,CCatSClass); //!!TRANSLATE
  end;
  if (HasContactClassification) then begin
    EditFieldTL(h,v+=vs ,70,"Classification Types",M4UStr,Normal,60,f10,false,CTypeSClass); //!!TRANSLATE
    EditFieldTL(h,v+=vs ,150,"Customer Classification",M4UStr,Normal,30,f8,false,CClassSClass); //!!TRANSLATE
  end;
  if (HasSalesman or HasSalesmanBonus) then begin
  	EditFieldTL(h,v+=vs ,100,"Pardavėjas",M4UStr,Normal,10,AccStr,false,UserSClass);
  end;
  if (HasSalesGroup) then begin
    EditFieldTL(h,v+=vs ,50,"Pard. grupė",M4UStr,Normal,10,f5,false,SalesGroupSClass);
  end;
  EditFieldTL(h,v+=vs ,150,"Prekė",M4UStr,Normal,20,FirstAcc,false,INSClass);
  if (HasItemClassification) then begin
    EditFieldTL(h,v+=vs ,150,"Prekės klasė",M4UStr,Normal,200,f6,false,DISClass);
  end;
  if (HasItemGroups) then begin
  EditFieldTL(h,v+=vs ,80,"Prekės grupė",M4UStr,Normal,5,LastAcc,false,ITSClass);
  end;
  if (HasObjects) then begin
  EditFieldTL(h,v+=vs ,150,"Objektas",M4UStr,Normal,60,ObjStr,false,ObjSClass);
  EditFieldTL(h,v+=vs ,150,"Objektas iš eilučių (detal.)",M4UStr,Normal,60,f3,false,ObjSClass);
  end;
  EditFieldTL(h,v+=vs ,50,"Mokėjimo sąlyga",M4UStr,Normal,5,TransStr,false,PDSClass);
  ButtonFrame(h=60,vm=(v+=45),123,2,"Funkcija");
  RadioButton(h,v,0,0,"Peržiūra",ArtMode);
  RadioButton(h,v+=16,1,0,"Detaliai",ArtMode);
  ButtonFrame(h=250,v=vm,123,2,"Būklė");    //changed
  CheckBox(h,v,0,"Nepatvirtintos",flags[1]);
  CheckBox(h,v+=16,0,"Patvirtintos",flags[2]);
  // c:
  CheckBox(h-20,v-56,0,"Tik faktūros neatnaujinančios sandėlio",flags[9]);
  ButtonFrame(h=60,vm=(v+=45),123,3,"Minusinės faktūros");
  RadioButton(h,v,0,0,"Įtraukti",flags[13]);
  RadioButton(h,v+=16,1,0,"Tik minusinės faktūros",flags[13]);
  RadioButton(h,v+=16,2,0,"Neįtraukti",flags[13]);
  
  ButtonFrame(h=60,vm=(v+=45),123,3,"PVM mokėtojas");// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 5 April 2018 14:35:26
  RadioButton(h,v,0,0,"Visos faktūros",flags[16]);
  RadioButton(h,v+=16,1,0,"Tik įmonės",flags[16]);
  RadioButton(h,v+=16,2,0,"Be įmonių",flags[16]);
  
  vm = vm - 61;// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 5 April 2018 14:37:00
  v = v-99;// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 5 April 2018 14:37:01
  
  EditFieldTL(h=310,v=vm-20, 50,"Prekių kiekis",  M4UVAL,Normal,10,vals0,false,0);
  ButtonFrame(h=250,v+=32,123,2,"Prekių kiekis");
  RadioButton(h,v,0,0,"Tik su didesniu kiekiu",flags[14]);
  RadioButton(h,v+=16,1,0,"Neįtraukti",flags[14]);
  EditFieldTL(h=310,v=v+20, 50,"Pelnas",  M4VAL,Normal,10,vals1,false,0);
  ButtonFrame(h=250,v+=32,123,2,"Pelnas");
  RadioButton(h,v,0,0,"Tik su didesniu pelnu",flags[15]);
  RadioButton(h,v+=16,1,0,"Neįtraukti",flags[15]);
  // :C
  Tile(2,310,false,"2",f4);
  h=150; v = 6;
  if (HasMultiLocations) then begin
    EditFieldTL(h,v,100,"Patalpa",M4UStr,Normal,60,f4,false,LocationSClass); //added 
  end;
   EditFieldTL(h,v+=20,100,"Patalpa grupė",M4Code,Normal,10,f10,false,LocGrSClass); // EVS: HAL-524
  EditFieldTL(h,v+=20,80,"Šaka",M4Code,Normal,20,Stext,false,ContactCUSClass);
  ButtonFrame(h=60,vm=(v+=45),123,3,"Funkcija");
  RadioButton(h,v,0,0,"Savikaina",flags[11]);
  if (HasBase2) then begin
  RadioButton(h,v+=16,2,0,"Savikaina baz. val. 2",flags[11]);
  end;
  RadioButton(h,v+=16,1,0,"Eilės savikaina",flags[11]);
  EndFrame;
  ButtonFrame(h=210,v=vm,130,6,"Įtraukti");
  CheckBox(h,v,0,"Normalias",flags[3]);
  CheckBox(h,v+=16,0,"Kasos",flags[4]);
  CheckBox(h,v+=16,0,"Kred. pažymas",flags[5]);
  if (StandardHansa==false) and (IsStandardProduct==false) then begin
  CheckBox(h,v+=16,0,"Palūkanas",flags[6]);
  CheckBox(h,v+=16,0,"Apmok. iš anksto",flags[7]);
  CheckBox(h,v+=16,0,"Dalinius apmok.",flags[8]);
  end;
  if (HasModSVO) then begin
    CheckBox(h,v+=32,0,"Tik pasl. užs. faktūras",flags[10]);
  end;
  CheckBox(h,v+=16,0,"Įtraukti POS faktūras",flags[12]); 
  EndFrame;
  EndWindow;
	
	return;
end;

window STCompRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Inventorizacijos palyginimas",STCompRClass,CGRcW,RcType);
  SetWRect(20,80,470,400);
  v = 6; vs = 20; h = 140;
  EditFieldTL(h,v, 150,"Prekė", M4UStr,Normal,50,f1,false,INSClass);
  if (HasItemGroups) then begin
  EditFieldTL(h,v+=vs, 150,"Grupė", M4UStr,Normal,5,f3,false,ITSClass);
  end;
  if (HasItemClassification) then begin
  EditFieldTL(h,v+=vs, 150,"Prekės klasė", M4UStr,Normal,60,f4,false,DISClass);
  EditFieldTL(h,v+=vs, 80,"Klasių tipas",M4UStr,Normal,60,f5,false,CTypeSClass);
  end;
  if (HasMultiLocations) then begin
    EditFieldTL(h,v+=vs, 150,"Patalpa",   M4Code,Normal,10,AccStr,false,LocationSClass);
  end;
  if (HasPositions) then begin
  EditFieldTL(h,v+=vs, 150,"Pozicija",   M4Code,Normal,10,LastAcc,false,PosSClass);
  end;
  EditFieldTL(h,v+=vs, 80,"Data",   M4Date,Normal,0,RegDate,false,PasteCurDate);
  if (IsEnterprise) then begin
  EditFieldTL(h,v+=vs, 80,"Vertės pokytis >",M4Val,Normal,0,vals0,true,0); 
  end;
  ButtonFrame(h=30,vm=(v+=50),390,3,"Jeigu prekė neregistruota Inventorizacijos įraše nurodytai datai"); 
  RadioButton(h,v,0,0,"Suskaičiuotas kiekis sandėlyje = 0",flags[3]);
//  RadioButton(h,v+=16,1,0,"If Item not on last Stocktaking assume 0 in Stock",flags[3]);
  RadioButton(h,v+=16,2,0,"Koreguotas kiekis sandėlyje = 0",flags[3]);
  RadioButton(h,v+=16,3,0,"Nerodyti prekės ataskaitoje",flags[3]);
  if (IsEnterprise) then begin
  ButtonFrame(h,vm=(v+=40),150,3,"Rūšiavimas"); 
  RadioButton(h,v,0,0,"Prekė",flags[2]); 
  RadioButton(h,v+=16,1,0,"Prekės grupė",flags[2]); 
  RadioButton(h,v+=16,2,0,"Lent. kodas",flags[2]); 

  ButtonFrame(h=230,v=vm,155,3,"Funkcija"); 
  RadioButton(h,v,0,0,"Rodyti kiekius",flags[1]); 
  RadioButton(h,v+=16,1,0,"Rodyti kainas",flags[1]); 
  RadioButton(h,v+=16,2,0,"Lent. kodas",flags[1]); 
  end;
  if (HasSecondQuantity) then begin
  CheckBox(h=30,vm=(v+=28),0,"Rodyti kiekį 2",flags[0]); 
  end;
  if (IsEnterprise) then begin
    CheckBox(h,v+=16,0,"Serijiniam numeriui (naudojant dabartinę ser. nr. būklę)",flags[5]); 
    //START-CUST   September 10, 2014 by PST
    CheckBox(h,v+=16,0,"Traukti visas prekes",flags[6]); 
    //END-CUST September 10, 2014 by PST
    CheckBox(h=160,v=vm,0,"Neįtraukti prekių jei koreguotas kiekis lygus 0",flags[4]);
end;
  EndWindow;
end;
  
window IVLClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Faktūros",IVLClass,CGmlist,-);
	SetWRect(20,80,800,298);
	Sizeable(-1,-1,0,0);
	SpawnClass(IVDClass);
	UseView(IVVc);
	FormName(PrintIVL);
	RecordList(4,17,-21,-39);
	RlColKey(4,4,"Nr.",SerNr,false,SerNr);
	RlColKey(79,79,"OK",OKFlag,false,OKFlag);
	RlColKey(111,111,"Fakt. data",InvDate,false,InvDate);
  RlColKey(191,191,"RMA nr.",OfficialSerNr,false,OfficialSerNr);    
  RlColKey(301,301,"Užsk. Nr.",OrderNr,false,OrderNr);
  RlColKey(381,381,"Pirkėjas",CustCode,false,CustCode); 
  RlColKey(441,441,"Pavadinimas",Addr0,false,Name); 
	RlColKey(-110,-110,"Viso",Sum4,true,Sum4);
	RlCol(-39,-39,"",CredMark,true);
	RlCol(-30,-30,"Val.",CurncyCode,true);
	RlCol(-1,-1,"",Invalid,true);
	SearchField("Ieškoti");
	BrowseSubsetButton(-40,-15);
	SpecialMenu("OK",'G',0,"OKIVLsm");
	SpecialMenu("Spausdinti proforma faktūrą",' ',1,"PrintIVLsm");
	SpecialMenu("Faktūros būklė",'r',2,"IVInfoIVLsm");
	EndWindow;
	
	return;
end;

window IVSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Faktūros",IVSClass,CGslist,-);
	SetWRect(20,80,800,298);
	Sizeable(-1,-1,0,0);
	UseView(IVVc);
	FormName(PrintIVL);
	RecordList(4,17,-21,-39);
	RlColKey(4,4,"Nr.",SerNr,false,SerNr);
	RlColKey(79,79,"OK",OKFlag,false,OKFlag);
	RlColKey(111,111,"Fakt. data",InvDate,false,InvDate);
  RlColKey(191,191,"RMA nr.",OfficialSerNr,false,OfficialSerNr);    
  RlColKey(301,301,"Užsk. Nr.",OrderNr,false,OrderNr);
  RlColKey(381,381,"Pirkėjas",CustCode,false,CustCode); 
  RlColKey(441,441,"Pavadinimas",Addr0,false,Name); 
	RlColKey(-110,-110,"Viso",Sum4,true,Sum4);
	RlCol(-39,-39,"",CredMark,true);
	RlCol(-30,-30,"Val.",CurncyCode,true);
	RlCol(-1,-1,"",Invalid,true);
	SearchField("Ieškoti");
	BrowseSubsetButton(-40,-15);
	SpecialMenu("OK",'G',0,"OKIVLsm");
	SpecialMenu("Spausdinti proforma faktūrą",' ',1,"PrintIVLsm");
	SpecialMenu("Faktūros būklė",'r',2,"IVInfoIVLsm");
	EndWindow;
	
	return;
end;
    
  
window StockMovDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,v,vm,vs;
  Integer tilenr,f,flipnr;
  
  WindowBegin("Sandėlio perkėlimai",StockMovDClass,CGview,-);
  if (HasJewelleryInterface) then begin
    SetWRect(20,80,850,400);
  end else begin
  SetWRect(20,80,700,400);
  end;
  Sizeable(-1,-1,0,0);
  UseView(StockMovVc);
  ActiveFieldOnNew("SentTransDate");
  Tile(0,90,false,"",TransDate);
  v = 6; vs = 20; h = 110; h2 = 300; h3 = 500; h4 = 620;
  EditField(h,v,80, "Nr.",Normal,SerNr,false,TSerSClass);
  CheckBox(h2,v,0,"Rezervuota",Reserved);
  EditField(h3,v,80,"Priežastis",Normal,Reason,false,StandProblemsSClass);
  EditField(h,v+=vs,80,"Užsakymo data",Normal,OrdTransDate,false,PasteCurDate);
  if (HasMultiLocations) then begin
    if (IsEnterprise) then begin
  EditField(h2,v,80,"Siuntimo data",Normal,SentTransDate,false,PasteCurDate);
    end;
  end;
  EditField(h3,v,80,"Gavimo data",Normal,TransDate,false,PasteCurDate);
  if (HasMultiLocations) then begin
  EditField(h,v+=vs,80, "Iš patalpos",Normal,FrLocation,false,LocationSClass);
  // c:
  if (UserCanAction("AllowPersonChange",false)) then begin
    EditField(h,v+=vs,80, "Siuntėjas",Normal,Sender,false,UserSClass);
  end else begin
    EditField(h,v+=vs,80, "Siuntėjas",ViewOnly,Sender,false,0);
  end;
  // :c
    if (IsEnterprise) then begin
  EditField(h2,v,80,"Per patalpą",Normal,ThrouLocation,false,LocationSClass);
    end;
  EditField(h3,v,80,"Į patalpą",Normal,ToLocation,false,LocationSClass);
  // c:
  if (UserCanAction("AllowPersonChange",false)) then begin
    EditField(h3,v+vs,80, "Gavėjas",Normal,Receiver,false,UserSClass);
  end else begin
    EditField(h3,v+vs,80, "Gavėjas",ViewOnly,Receiver,false,0);
  end;
  // :c
  end;
  if (HasConsStockMoveInvoices) then begin
    EditField(h,v+=vs,80, "Sąskaitos nr.",ViewOnly,InvoiceNr,false,0); 
    EditField(h2,v,80,"Sąskaitos data",ViewOnly,InvDate,false,0); 
    if (HasLocalization("PRT")) then begin 
    EditField(h3,v,80,"Sąsk. oficial. nr.",ViewOnly,InvoiceOfficialSerNr,false,0); 
    end;
  end;
  tilenr = 1;
  if (HasPositions or HasModWHM or HasLocalization("PRT")) then begin 
    TileButton(tilenr,"Pozicijos"); tilenr = tilenr + 1; 
  end;
  if (HasObjects) then begin
    TileButton(tilenr,"Objektai"); tilenr = tilenr + 1; 
  end else begin
    TileButton(tilenr,"Komentaras"); tilenr = tilenr + 1; 
  end;
  TileButton(tilenr,"Prekės"); tilenr = tilenr + 1; 
  if (HasMultiCurrency or HasBase2) then begin
    TileButton(tilenr,"Valiuta"); tilenr = tilenr + 1; 
  end;
  TileButton(tilenr,"Trukmė"); tilenr = tilenr + 1; 
  TileButton(tilenr,"Frachtas"); tilenr = tilenr + 1; 
  TileButton(tilenr,"Adresas"); tilenr = tilenr + 1; 
  tilenr = 1;
  if (HasPositions or HasModWHM or HasLocalization("PRT")) then begin 
    Tile(tilenr,60,false,tilenr,FrPos); tilenr = tilenr + 1;
    v = 6;
    if (HasPositions) then begin
      EditField(h,v,80, "Iš vietos",Normal,FrPos,false,UsedPosSClass); 
  EditField(h2,v,80,"Į vietą",Normal,ToPos,false,FreePosSClass);
    end;
    if (HasModProd) then begin
      EditField(h3,v,80,"Gamybai",Normal,ProdSerNr,false,ProdSClass); v = v + vs;
      EditField(h3,v,150,"Maršr.",Normal,Sorting,false,DelRouteSClass); v = v + vs; 
    end;
    if ((HasLocalization("PRT") and HasModIN and HasMultiLocations) or IsStandardProduct==false) then begin  
      EditField(h3,v,150,"Tipas",Normal,StockMovType,false,SetSClass); v = v + vs; 
    end;
    if (HasModWHM) then begin
      v = 6 + vs;
  CheckBox(h,v,0,"Rankinis pasirinkimas",ManualPick);
  CheckBox(h,v+=16,0,"Pasiųsti į keltuvo eilę",ToForkLiftQue);
    end;
  end;
  Tile(tilenr,70,false,tilenr,Comment); tilenr = tilenr + 1;
  v = 6;
  if (HasObjects) then begin
    EditField(h,v,-20,"Objektai",Normal,Objects,false,ObjSClass); 
    v = v + vs;
  end;
  EditField(h,v,-20,"Komentaras",Normal,Comment,false,0); 
  EditField(h,v+=vs,135,"Oficialus ser. nr.",Normal,OfficialSerNr,false,LegalInvNrSClass);
  EnterSkip(Math);
  Tile(tilenr,79,true,tilenr,Math); tilenr = tilenr + 1;
  v = 24;
  MatrixBegin(4,v,-50,-50,-,199);  
  Flip(0);
  flipnr = 1;
  if (HasJewelleryInterface) then begin
    MatCol(1,32,"Ser. Nr.",0,SerialNr,false,SerialNrSClass);
    EnterSkip(Quant);
    MatCol(1,130,"Prekė",0,ArtCode,false,INSClass); 
    Flip(flipnr); flipnr = flipnr + 1;
    if (HasVarieties) then begin
    MatCol(1,200,"Reik.kiek.",0,OrdQuant,true,MATVARINSClass);
    end else begin
      if (HasThrouLocation) then begin
      MatCol(1,200,"Reik.kiek.",0,OrdQuant,true,0); 
    end;
    end;
    if (HasThrouLocation) then begin
    MatCol(1,250,"Išs.kiek.",0,SentQuant,true,0);
    end;
    MatCol(1,300,"Gaut.kiek.",0,Quant,true,0);
    MatCol(1,350,"Aprašymas",0,Spec,false,0);
  end else begin
    MatCol(1,32,"Prekė",0,ArtCode,false,INSClass);
    Flip(flipnr);  flipnr = flipnr + 1;
    if (HasVarieties) then begin
  MatCol(1,86,"Reik.kiek.",0,OrdQuant,true,MATVARINSClass);
    end else begin
      if (HasThrouLocation) then begin
      MatCol(1,86,"Reik.kiek.",0,OrdQuant,true,0); 
    end;
    end;
    if (HasThrouLocation) then begin
  MatCol(1,148,"Išs.kiek.",0,SentQuant,true,0);
    end;
  MatCol(1,210,"Gaut.kiek.",0,Quant,true,0);
  MatCol(1,272,"Aprašymas",0,Spec,false,0);
  end;
  MatCol(1,-260,"G.sena vnt. kaina",0,OldPrice,true,0);
  MatCol(1,-160,"G.papild.kašt.",0,ExtraSCost,true,0);
  MatCol(1,-80,"G.nauja vnt.kain.",0,NewPrice,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  if (HasVarieties) then begin
  MatCol(1,86,"Reik. kiekis",0,OrdQuant,true,MATVARINSClass);
  end else begin
    if (HasThrouLocation) then begin
    MatCol(1,86,"Reik.kiek.",0,OrdQuant,true,0); 
  end;
  end;
  if (HasThrouLocation) then begin
  MatCol(1,148,"Išs. kiekis",0,SentQuant,true,0);
  end;
  MatCol(1,210,"Gautas kiekis",0,Quant,true,0);
  MatCol(1,272,"Aprašymas",0,Spec,false,0);
  MatCol(1,-260,"Išs.sena vnt.kain.",0,SentOldPrice,true,0);
  MatCol(1,-160,"Išs.papild.kašt.",0,SentExtraSCost,true,0);
  MatCol(1,-80,"Išs.nauja vnt.kaina",0,SentNewPrice,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,86,"Aprašymas",0,Spec,false,0);
  if (HasObjects) then begin
  MatCol(1,-380,"Objektai",0,Objects,false,ObjSClass);
  end;
  if (HasSerialNumbers) then begin
  MatCol(1,-280,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  end;
  MatCol(1,-140,"Baz. kaina",0,BasePrice,true,0);
  MatCol(1,-40,"Koef.",0,Coefficient,false,0);
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,86,"Aprašymas",0,Spec,false,0);
  if (HasSerialNumbers) then begin
  MatCol(1,-280,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  end;
  MatCol(1,-180,"Plotis",0,UnitXval,true,0);
  MatCol(1,-135,"Aukštis",0,UnitYval,true,0);
  MatCol(1,-90,"Gylis",0,UnitZval,true,0);
  MatCol(1,-45,"arba eilutė",0,OrderRowNr,false,0); 
  if (HasPositions) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,86,"Aprašymas",0,Spec,false,0);
  MatCol(1,-180,"Iš vietos",0,FrPosCode,false,UsedPosSClass);
  MatCol(1,-90,"Į vietą",0,ToPosCode,false,FreePosSClass);
  end;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Prekės būklė",'I','I',0,"ItemStatusStockMovDsm");
  if (HasQualityControl) then begin
    RowMenuItem(0,"Kokybės kontrolė",'u','u',0,"QualConFromStockMovDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = 18; 
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1)); 
      v = v + vs;
    end;
  end;
  if (HasThrouLocation) then begin
  CheckBox(20,-52,0,"Patvirtinta",OrdFlag);
  CheckBox(20,-36,0,"Išsiųsta",SentOKFlag);
  end;
  CheckBox(20,-20,0,"Gauta",OKFlag);
  if (HasThrouLocation) then begin
  EditField(170,-20,62,"Išs. kiekis",Normal,TotSentQty,true,0);
  end;
  EditField(310,-20,62,"Gaut. kiekis",Normal,TotQty,true,0);
  if (HasLocalization("HRV,PRT")) then begin 
    EditField(550,-40,150,"Tax Seal",ViewOnly,TaxAdminServSeal,false,0);
//    SoftEditField(550,-40,150,"Tax Auth. Approval",Normal,"TaxAdminServSeal",false,0,M4Str,200);
  end;
  EditField(550,-20,100,"Neapsk. papildomi kaštai",Normal,OtherExtraCosts,false,0);
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
    h1 = 110; vs = 20;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
    EditField(h1,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass); 
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
        EditField(h1,v+vs,50,"Bazinė valiuta 1",Normal,BaseRate1,true,0);
      end else begin
        EditField(h1,v+vs,50,"Bazinė valiuta",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin  
        EditField(h1,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0); 
      end;
      EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0); 
      if (HasBase2) then begin  
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false); 
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);           
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val.",false);     
      end;
    end else begin
      EditField(h1,v+=vs,50,"Bazinė valiuta 1",Normal,BaseRate1,true,0); 
      EditField(h1,v+=vs,50,"Bazinė valiuta 2",Normal,BaseRate2,true,0); 
    end;
  end;
  Tile(tilenr,110,false,tilenr,PlanSendDate); tilenr = tilenr + 1;
  vs = 20; h1 = 130; h2 = 330; h3 = 560;
  EditField(h,v=6,80,"Plan. išs. data",Normal,PlanSendDate,false,PasteCurDate);
  EnterSkip(PlanSendTime);
  if (HasLocalization("PRT")==false or IsStandardProduct==false) then begin  
  EditField(h2,v,40,"Plan. trukmė dien.",ViewOnly,PlanDurationDays,false,0);
  end;
  EditField(h,v+=vs,80,"Plan. išs. laikas",Normal,PlanSendTime,false,PasteCurTime);
  EnterSkip(PlanArrDate);
  if (HasLocalization("PRT")==false or IsStandardProduct==false) then begin  
  EditField(h2,v,80,"Plan. trukmė val.",ViewOnly,PlanDurationTime,false,0);
  end;
  EditField(h3,v=6,80,"Plan. atvykimo data",Normal,PlanArrDate,false,PasteCurDate);
  EditField(h3,v+=vs,80,"Plan. atvykimo laikas",Normal,PlanArrTime,false,PasteCurTime);
  if (HasLocalization("PRT")==false or IsStandardProduct==false) then begin  
  EditField(h,vm=(v+=32),80,"Išsiuntimo data",Normal,ActSendDate,false,PasteCurDate);
  EnterSkip(ActSendTime);
  EditField(h2,v,40,"Trukmė dienomis",ViewOnly,ActDurationDays,false,0);
  EditField(h,v+=vs,80,"Išsiuntimo laikas",Normal,ActSendTime,false,PasteCurTime);
  EnterSkip(ActArrDate);
  EditField(h2,v,80,"Trukmė valandomis",ViewOnly,ActDurationTime,false,0);
  EditField(h3,v=vm,80,"Atvykimo data",Normal,ActArrDate,false,PasteCurDate);
  EditField(h3,v+=vs,80,"Atvykimo laikas",Normal,ActArrTime,false,PasteCurTime);
  end;
  Tile(tilenr,110,false,tilenr,FreightCode); tilenr = tilenr + 1;
  vs = 20; h2 = 255;
  EditField(h=130,v=6,60,"Frachto įmonė",Normal,FreightCode,false,FreightCompanySClass);
  EditField(h2,v,-40,"Reg. nr.",Normal,FreightCompanyRegNr,false,0);
  EditField(h,v+=vs,-40,"Pavadinimas",Normal,FreightCompany,false,0);
  EditField(h,v+=vs,-40,"Sunkvežimio inform.",Normal,TruckInfo,false,0);
  EditField(h,v+=vs,-40,"Vairuotojas",Normal,Driver,false,0);
  EditField(h,v+=vs,-40,"CMR",Normal,CMRText,false,0);
  if (HasNumberSeries and HasLocalization("PRT")) then begin
    if (HasOfficialSerNr) then begin
      EditField(h,v+=vs,100,"Oficialus ser. nr. 2",Normal,OfficialSerNr2,false,0);
      EditField(h2+100,v,135,"Status",Normal,Status,false,SetSClass);
    end;    
  end;
  Tile(tilenr,200,false,tilenr,FrAddr0); tilenr = tilenr + 1;
  vs = 20; h2 = 255;
  EditField(h=130,v=6,-40,"Iš adresas",Normal,FrAddr0,false,0); 
  EditField(h,v+=vs,-40,"",Normal,FrAddr1,false,0); 
  EditField(h,v+=vs,-40,"",Normal,FrAddr2,false,0); 
  EditField(h,v+=vs,-40,"",Normal,FrAddr3,false,0); 
  EditField(h,v+=vs,-40,"",Normal,FrAddr4,false,0); 
  if (HasThrouLocation) then begin
  EditField(h,v+=vs,-40,"Per adresas",Normal,ThrouAddr0,false,0); 
  EditField(h,v+=vs,-40,"",Normal,ThrouAddr1,false,0); 
  EditField(h,v+=vs,-40,"",Normal,ThrouAddr2,false,0); 
  EditField(h,v+=vs,-40,"",Normal,ThrouAddr3,false,0); 
  EditField(h,v+=vs,-40,"",Normal,ThrouAddr4,false,0); 
  end;
  EditField(h,v+=vs,-40,"Į adresas",Normal,ToAddr0,false,0); 
  EditField(h,v+=vs,-40,"",Normal,ToAddr1,false,0); 
  EditField(h,v+=vs,-40,"",Normal,ToAddr2,false,0); 
  EditField(h,v+=vs,-40,"",Normal,ToAddr3,false,0); 
  EditField(h,v+=vs,-40,"",Normal,ToAddr4,false,0); 
  SpecialMenu("Įsigijimo kaina senoje vnt. kainoje",'=',0,"StockMovFillFIFODsm");
  SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm");
  if (HasIntegratedNL) then begin
  SpecialMenu("Atidaryti siuntimo D/K operaciją",' ',2,"OpenTRFromStockMovSent");
  SpecialMenu("Atidaryti gavimo D/K operaciją",'t',3,"OpenTRFromStockMov");
  end;
  if (HasLocalization("PRT")) then begin 
    if (HasETaxDocuments) then begin
      SpecialMenu("Siųsti mok. inspekcijai",'',10,"EShipPRTDsm"); 
    end;
  end;
   if (HasConsStockMoveInvoices) then begin 
     SpecialMenu("Spausdinti sandėlio judėj. sąskaitas",'p',3,"PrintStockMovInvoices");    
   end;   
  if (HasLocalization("PRT")) then begin  
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0); 
    SpecialMenu("Faktūra",'F',5,"IVFromGlobalStockMovDsm"); 
  end;
  EndWindow;
end;
  
window ItemExportTClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Prekių eksportas į web",ItemExportTClass,CGSbl,-);
  SetBlid(ItemExportBlock);
  SetWRect(20,80,650,300);
  Sizeable(-1,-1,0,0);
  h = 100;
  EditField(h,v=20,100,"Patalpa 1",Normal,Loc1,false,LocationSClass);
  EditField(h,v=v+20,100,"Patalpa 2",Normal,Loc2,false,LocationSClass);
  EditField(h,v=v+20,100,"Patalpa 3",Normal,Loc3,false,LocationSClass);
  EditField(h,v=v+20,100,"Patalpa 4",Normal,Loc4,false,LocationSClass);
  EditField(h,v=v+20,100,"Patalpa 5",Normal,Loc5,false,LocationSClass);
  EditField(h,v=v+20,100,"Patalpa 6",Normal,Loc6,false,LocationSClass);
  EditField(h,v=v+20,100,"Patalpa 7",Normal,Loc7,false,LocationSClass);
  EditField(h,v=v+20,100,"Patalpa 8",Normal,Loc8,false,LocationSClass);
  EditField(h,v=v+20,100,"Patalpa 9",Normal,Loc9,false,LocationSClass);
  EditField(h,v=v+20,100,"Patalpa 10",Normal,Loc10,false,LocationSClass);
  EditField(h,v=v+40,100,"Prekės klasė",Normal,ItmClass,false,DISClass);
  h = 300;
  EditField(h,v=20,100,"Grupė 1",Normal,ItmGr11,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 2",Normal,ItmGr12,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 3",Normal,ItmGr13,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 4",Normal,ItmGr14,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 5",Normal,ItmGr15,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 6",Normal,ItmGr16,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 7",Normal,ItmGr17,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 8",Normal,ItmGr18,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 9",Normal,ItmGr19,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 10",Normal,ItmGr110,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 11",Normal,ItmGr111,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 12",Normal,ItmGr112,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 13",Normal,ItmGr113,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 14",Normal,ItmGr114,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 15",Normal,ItmGr115,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 16",Normal,ItmGr116,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 17",Normal,ItmGr117,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 18",Normal,ItmGr118,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 19",Normal,ItmGr119,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 20",Normal,ItmGr120,false,ITSClass);
  EditField(h,v=v+40,100,"Sąskaitų importo objektas",Normal,ItmObject,false,ObjSClass);//MDS HAL-393
  h = 500;
  EditField(h,v=20,100,"Grupė 1",Normal,ItmGr21,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 2",Normal,ItmGr22,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 3",Normal,ItmGr23,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 4",Normal,ItmGr24,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 5",Normal,ItmGr25,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 6",Normal,ItmGr26,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 7",Normal,ItmGr27,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 8",Normal,ItmGr28,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 9",Normal,ItmGr29,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 10",Normal,ItmGr210,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 11",Normal,ItmGr211,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 12",Normal,ItmGr212,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 13",Normal,ItmGr213,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 14",Normal,ItmGr214,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 15",Normal,ItmGr215,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 16",Normal,ItmGr216,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 17",Normal,ItmGr217,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 18",Normal,ItmGr218,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 19",Normal,ItmGr219,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 20",Normal,ItmGr220,false,ITSClass);
  EndWindow;
	
	return;
end;
  

window RetItmTClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Superkamų prekių parametras",RetItmTClass,CGSbl,-);
  SetBlid(RetItmBlock);
  SetWRect(20,80,650,300);
  Sizeable(-1,-1,0,0);
  h = 150;
  EditField(h,v=20,100,"Prekė gavimuose",Normal,RetItm,false,INSClass);
  EditField(h,v=v+20,100,"Sąskaita gavimuose",Normal,AccNumber,false,AccSClass);

  EndWindow;
	
	return;
end;
  
window ItemExportLClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Pin Pad Counter",ItemExportLClass,CGmlist,-);
  SetWRect(64,80,709,298);
  SpawnClass(ItemExportDClass);
  Sizeable(-1,-1,0,0);
  UseView(ItemExportVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Ser Nr",SerNr,false,SerNr);
  SearchField("Ieškoti");
  EndWindow;
	
	return;
end;

window ItemExportDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Prekių eksportas į web",ItemExportDClass,CGview,-);
  SetWRect(20,80,650,300);
  Sizeable(-1,-1,0,0);
  h = 100;
  UseView(ItemExportVc);
  EditField(h,v=5,100,"SerNr",Normal,SerNr,false,0);
  EditField(h,v=20,100,"Patalpa 1",Normal,Loc1,false,LocationSClass);
  EditField(h,v=v+20,100,"Patalpa 2",Normal,Loc2,false,LocationSClass);
  EditField(h,v=v+20,100,"Patalpa 3",Normal,Loc3,false,LocationSClass);
  EditField(h,v=v+20,100,"Patalpa 4",Normal,Loc4,false,LocationSClass);
  EditField(h,v=v+20,100,"Patalpa 5",Normal,Loc5,false,LocationSClass);
  EditField(h,v=v+20,100,"Patalpa 6",Normal,Loc6,false,LocationSClass);
  EditField(h,v=v+20,100,"Patalpa 7",Normal,Loc7,false,LocationSClass);
  EditField(h,v=v+20,100,"Patalpa 8",Normal,Loc8,false,LocationSClass);
  EditField(h,v=v+20,100,"Patalpa 9",Normal,Loc9,false,LocationSClass);
  EditField(h,v=v+20,100,"Patalpa 10",Normal,Loc10,false,LocationSClass);
  EditField(h,v=v+40,100,"Prekės klasė",Normal,ItmClass,false,DISClass);
  h = 300;
  EditField(h,v=20,100,"Grupė 1",Normal,ItmGr11,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 2",Normal,ItmGr12,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 3",Normal,ItmGr13,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 4",Normal,ItmGr14,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 5",Normal,ItmGr15,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 6",Normal,ItmGr16,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 7",Normal,ItmGr17,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 8",Normal,ItmGr18,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 9",Normal,ItmGr19,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 10",Normal,ItmGr110,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 11",Normal,ItmGr111,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 12",Normal,ItmGr112,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 13",Normal,ItmGr113,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 14",Normal,ItmGr114,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 15",Normal,ItmGr115,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 16",Normal,ItmGr116,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 17",Normal,ItmGr117,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 18",Normal,ItmGr118,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 19",Normal,ItmGr119,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 20",Normal,ItmGr120,false,ITSClass);
  h = 500;
  EditField(h,v=20,100,"Grupė 1",Normal,ItmGr21,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 2",Normal,ItmGr22,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 3",Normal,ItmGr23,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 4",Normal,ItmGr24,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 5",Normal,ItmGr25,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 6",Normal,ItmGr26,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 7",Normal,ItmGr27,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 8",Normal,ItmGr28,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 9",Normal,ItmGr29,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 10",Normal,ItmGr210,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 11",Normal,ItmGr211,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 12",Normal,ItmGr212,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 13",Normal,ItmGr213,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 14",Normal,ItmGr214,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 15",Normal,ItmGr215,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 16",Normal,ItmGr216,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 17",Normal,ItmGr217,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 18",Normal,ItmGr218,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 19",Normal,ItmGr219,false,ITSClass);
  EditField(h,v=v+20,100,"Grupė 20",Normal,ItmGr220,false,ITSClass);
  EndWindow;
	
	return;
end;
  
  
window  PinPadYesNoAClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Pasirinkti tęsti", PinPadYesNoAClass, CGOther, RcType);
  SetWRect(20, 80, 400, 150);
  v = 26; h = 20;
  StaticText(20,v,"Pardavimas, Pin kodas neįvestas",false);
  v = v + 20;
  HalPushButton(h,v,h+100,v+49,"PinPadNo","Ne");
  HalPushButton(h+120,v,h+220,v+49,"PinPadYes","Taip");
  EndWindow;
	
	return;
end;
  
window  MagneticStripeVClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  WindowBegin("PARDAVIMAS PASKUTINIEJI 4 KORT. NUMERIO SKAIČIAI", MagneticStripeVClass,CGMnt,RcType);
  SetWRect(20, 80, 400, 220);
  v = 26; h = 20;
  UseView(RcVc);
  StaticText(20,v,"PARDAVIMAS PASKUTINIEJI 4 KORT. NUMERIO SKAIČIAI",false);
  v = v + 20;
  EditField(h,v,100,"",Normal,f1,false,0);
  v = v + 40;
  HalPushButton(290,v,390,v+49,"PinPadCancel","Nutraukti");
  //HalPushButton(h+120,v,h+220,v+49,"PinPadConfirm","Patvirtinti");
  EndWindow;
	
	return;
end;
  
window  MagneticStripeReturnVClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("PARDAVIMAS PASKUTINIEJI 4 KORT. NUMERIO SKAIČIAI", MagneticStripeReturnVClass,CGMnt,RcType);
  SetWRect(20, 80, 400, 220);
  v = 26; h = 20;
  UseView(RcVc);
  StaticText(20,v,"PARDAVIMAS PASKUTINIEJI 4 KORT. NUMERIO SKAIČIAI",false);
  v = v + 20;
  EditField(h,v,100,"",Normal,f1,false,0);
  v = v + 40;
  HalPushButton(290,v,390,v+49,"PinPadCancelReturn","Nutraukti");
  //HalPushButton(h+120,v,h+220,v+49,"PinPadConfirm","Patvirtinti");
  EndWindow;
	
	return;
end;
  
window PinPadCntLClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Pin Pad Counter",PinPadCntLClass,CGmlist,-);
  SetWRect(64,80,709,298);
  SpawnClass(PinPadCntDClass);
  Sizeable(-1,-1,0,0);
  UseView(PinPadCntVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Local machine",LocalMachine,false,LocalMachine);
  RlCol(94,94,"Counter",Counter,false);
  SearchField("Ieškoti");
  EndWindow;
	
	return;
end;
  
window PinPadCntDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Pin Pad Counter",PinPadCntDClass,CGview,-);
  SetWRect(64,80,550,200);
  UseView(PinPadCntVc);
  v = 6; vs = 20; h = 80; h2 = 240;
  EditField(h,vm=v, 55,"Local machine",Normal,LocalMachine,false,0);
  EditField(h2,v, 70,"Counter",Normal,Counter,true,0);
  EditField(h2+130,v, 70,"To be voided",Normal,ToBeVoided,true,0);
  EndWindow;
	
	return;
end;
  
window GCSLClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Parduoti dovanų čekiai",GCSLClass,CGmlist,-);
  SetWRect(64,80,509,298);
  SpawnClass(GCSDClass);
  Sizeable(-1,-1,0,0);
  UseView(GCSVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Nr.",SerNr,false,SerNr);
  RlColKey(94,94,"Data",TransDate,false,TransDate);
  RlColKey(170,170,"Komentaras",Comment,false,Comment);
  RlCol(-70,-70,"Vertė",Amount,true);
  SearchField("Ieškoti");
  EndWindow;
	
	return;
end;
  
window ResListLClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Rezervacijos parduotuvėse",ResListLClass,CGmlist,-);
  SetWRect(64,80,709,298);
  SpawnClass(ResListDClass);
  Sizeable(-1,-1,0,0);
  UseView(ResListVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Parduotuvė",Loc,false,Loc);
//  RlCol(4,4,"Pavadinimas",Name,false);
  SearchField("Ieškoti");
  EndWindow;
	
	return;
end;

window ResListBrokLClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Rezervacijos parduotuvėse - BROKAI",ResListBrokLClass,CGmlist,-);
  SetWRect(64,80,709,298);
  SpawnClass(ResListBrokDClass);
  Sizeable(-1,-1,0,0);
  UseView(ResListBrokVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Parduotuvė",Loc,false,Loc);
//  RlCol(4,4,"Pavadinimas",Name,false);
  SearchField("Ieškoti");
  EndWindow;
	
	return;
end;

window ResListDemoLClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Rezervacijos parduotuvėse - DEMO",ResListDemoLClass,CGmlist,-);
  SetWRect(64,80,709,298);
  SpawnClass(ResListDemoDClass);
  Sizeable(-1,-1,0,0);
  UseView(ResListDemoVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Parduotuvė",Loc,false,Loc);
//  RlCol(4,4,"Pavadinimas",Name,false);
  SearchField("Ieškoti");
  EndWindow;
	
	return;
end;
  
window ResListDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Rezervacija parduotuvėje",ResListDClass,CGview,-);
  SetWRect(20,80,840,881);
  UseView(ResListVc);
  Sizeable(-1,-1,0,0);
  v = 6; vs = 20; h = 80; h2 = 240;
  EditField(80,v+20,100,"Parduotuvė",Normal,Loc,false,LocationSClass);
 // EditField(80,v+40,100,"Parduotuvė",Normal,Name,false,0);
  EnterSkip(Math);
  MatrixBegin(h=10,v+=135,-25,-10,-,300); // Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 13 December 2017 17:30:49
  MatCol(1,24,"Prekė",0,ArtCode,false,INSClass);
  MatCol(1,94,"Aprašymas",0,Description,false,0);
  MatCol(1,200,"Kiekis",0,Qty,false,0);
  MatCol(1,250,"Komentaras",0,Comment,false,0);
  EndMatrix;
  EndWindow;
	
	return;
end;

window ResListBrokDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Rezervacija parduotuvėje - BROKAI",ResListBrokDClass,CGview,-);
  SetWRect(20,80,840,881);
  UseView(ResListBrokVc);
  Sizeable(-1,-1,0,0);
  v = 6; vs = 20; h = 80; h2 = 240;
  EditField(80,v+20,100,"Parduotuvė",Normal,Loc,false,LocationSClass);
 // EditField(80,v+40,100,"Parduotuvė",Normal,Name,false,0);
  EnterSkip(Math);
  MatrixBegin(h=10,v+=135,-25,-10,-,300); // Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 13 December 2017 17:30:49
  MatCol(1,24,"Prekė",0,ArtCode,false,INSClass);
  MatCol(1,94,"Aprašymas",0,Description,false,0);
  MatCol(1,200,"Kiekis",0,Qty,false,0);
  MatCol(1,250,"Komentaras",0,Comment,false,0);
  EndMatrix;
  EndWindow;
	
	return;
end;

window ResListDemoDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Rezervacija parduotuvėje - DEMO",ResListDemoDClass,CGview,-);
  SetWRect(20,80,840,881);
  UseView(ResListDemoVc);
  Sizeable(-1,-1,0,0);
  v = 6; vs = 20; h = 80; h2 = 240;
  EditField(80,v+20,100,"Parduotuvė",Normal,Loc,false,LocationSClass);
 // EditField(80,v+40,100,"Parduotuvė",Normal,Name,false,0);
  EnterSkip(Math);
  MatrixBegin(h=10,v+=135,-25,-10,-,300); // Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 13 December 2017 17:30:49
  MatCol(1,24,"Prekė",0,ArtCode,false,INSClass);
  MatCol(1,94,"Aprašymas",0,Description,false,0);
  MatCol(1,200,"Kiekis",0,Qty,false,0);
  MatCol(1,250,"Komentaras",0,Comment,false,0);
  EndMatrix;
  EndWindow;
	
	return;
end;
  
window ItemColorLClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Item Color",ItemColorLClass,CGmlist,-);
  SetWRect(64,80,709,298);
  SpawnClass(ItemColorDClass);
  Sizeable(-1,-1,0,0);
  UseView(ItemColorVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Code",Color,false,Color);
  RlCol(94,94,"Name",ColorName,false);
  SearchField("Ieškoti");
  EndWindow;
	
	return;
end;
  
window ItemColorSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Item Color",ItemColorSClass,CGslist,-);
  SetWRect(64,80,709,298);
  SpawnClass(ItemColorDClass);
  Sizeable(-1,-1,0,0);
  UseView(ItemColorVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Code",Color,false,Color);
  RlCol(94,94,"Name",ColorName,false);
  SearchField("Ieškoti");
  EndWindow;
	
	return;
end;
  
window ItemColorDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Item Color",ItemColorDClass,CGview,-);
  SetWRect(64,80,550,200);
  UseView(ItemColorVc);
  v = 6; vs = 20; h = 80; h2 = 240;
  EditField(h,vm=v, 55,"Code",Normal,Color,false,0);
  EditField(h2,v, 70,"Coloar Name",Normal,ColorName,true,0);
  EndWindow;
	
	return;
end;
  
window SameItemLClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Bendra prekė",SameItemLClass,CGmlist,-);
  SetWRect(64,80,709,298);
  SpawnClass(SameItemDClass);
  Sizeable(-1,-1,0,0);
  UseView(SameItemVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Kodas",Code,false,Code);
  RlCol(94,94,"Komentaras",Comment,false);
  SearchField("Ieškoti");
  EndWindow;
	
	return;
end;
  
window SameItemSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Item Color",SameItemSClass,CGslist,-);
  SetWRect(64,80,709,298);
  SpawnClass(SameItemDClass);
  Sizeable(-1,-1,0,0);
  UseView(SameItemVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Kodas",Code,false,Code);
  RlCol(94,94,"Komentaras",Comment,false);
  SearchField("Ieškoti");
  EndWindow;
	
	return;
end;
  
window SameItemDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer tilenr,flipnr,f;
  record UserVc Userr;
  
  windowBegin("Item Color",SameItemDClass,CGview,-);
  SetWRect(64,80,550,200);
  UseView(SameItemVc);
  v = 6; vs = 20; h = 80; h2 = 240;
  EditField(h,vm=v, 55,"Kodas",Normal,Code,false,0);
  EditField(h2,v, 70,"Komentaras",Normal,Comment,true,0);
  EndWindow;
	
	return;
end;

window TouchlessPaymentTClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  
  windowBegin("Touchless Payments",TouchlessPaymentTClass,CGSbl,-);
  SetBlid(TouchlessPayBlock);
  SetWRect(20,80,450,300);
  Sizeable(-1,-1,0,0);
  h = 150;
  EditField(h,v=6,-40,"IP Address",Normal,IPAddress,false,0);
  EditField(h,v=v+20,-40,"Port",Normal,Port,false,0);
  EditField(h,v=v+20,-40,"User Name",Normal,UserName,false,0);
  EditField(h,v=v+20,-40,"Password",Normal,Password,false,0);
  EditField(h,v=v+20,-40,"Project ID",Normal,ProjectID,false,0);
  EditField(h,v=v+20,-40,"Last Trans. Number",Normal,LastRrn,false,0);
  EditField(h,v=v+20,-40,"Last Trans. Amount",Normal,LastSum,false,0);
  EditField(h,v=v+20,-40,"Last Trans. Time",Normal,LastTimeStamp,false,0);
  EndWindow;
	
	return;
end;

window VoidBankPaymentWClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real v,vs;
  record RcVc RepSPec;

  WindowBegin("Void Bank Payment",VoidBankPaymentWClass,CGother,-);
  SetWRect(20,80,450,190);
  DynamicWindow;
  Sizeable(-1,-1,0,0);
  UseView(RcVc);
  v = 6; vs = 20;
  GetWindowRecord(CurWindow,RepSpec);
  StaticText(20,v+=vs,"Void Bank payment for " & RepSpec.vals0 & " EUR?",false);
  ColourPushButton(20,v+=vs,120,v+45,"VoidBankPaymentWClassProceed","Proceed",20);
  ColourPushButton(140,v,240,v+45,"VoidBankPaymentWClassCancel","Cancel",20);

  EndWindow;
end;

window ItemPasteSpecTClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Item Paste Special",ItemPasteSpecTClass,CGHbl,HBlRecType);
  SetBlid(ItemPasteSpecBlock);
  SetWRect(20,80,500,291);
  Sizeable(-1,-1,0,0);
  h = 20; v = 27;
  MatrixBegin(h,v,-50,-20,-,100);
  MatCol(1,24,"Window",0,WindowClass,false,StrSetSClass);
  MatCol(1,-100,"Show",0,ShowFlag,false,SetSClass);
  EndMatrix;
  EndWindow;
end;

window RvrsVATPDTClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Reversed VAT Payment Modes",RvrsVATPDTClass,CGHbl,HBlRecType);
  SetBlid(RvrsVATPDBlock);
  SetWRect(20,80,400,291);
  Sizeable(-1,-1,0,0);
  h = 20; v = 27;
  MatrixBegin(h,v,-50,-20,-,50);
  MatCol(1,24,"Mok. būdas",0,PayDeal,false,PDSClass);
  EndMatrix;
  EndWindow;
end;



window CashSimpleInDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,hm,l,v,v3,vm,vs;
  real fieldh,fieldh2,keypadh,keypadh2,keypadv,fntsize;
  
  WindowBegin("Pajamos",CashSimpleInDClass,CGview,-);
  AutoSizeWindow(false);
  Modality(kModalityGlobal);
  SetWRect(64,80,610,425);
  UseView(CashVc);
  SetupColumWithKeypadWindow(fieldh,fieldh2,keypadh,keypadh2,keypadv,vs,fntsize);
  vs = 20; h = fieldh-60; h2 = 260; h3 = 350;
  EditField(h,v=6,170,"Komentaras",Normal,Comment,false,0);
  EditField(h,v=v+vs,70,"Stalčius",Normal,Drawer,false,DrawerSClass);
  MatrixBegin(h-43,vm=(v+=40),h+180,v+5*20+1,-,99);
  MatCol(1,24,"Mok. būdas",0,PMCode,false,PMSClass);
  MatCol(1,60,"Denomination",0,Denomination,false,SetSClass);
  MatColTL(1,-75,"Suma",0,M4Str,Normal,20,AmountStr,false,0);//CUST
  InsertRowTest;
  DeleteRowTest;
  EndMatrix;
  EditField(h+95,v+=110,70,"Viso",Normal,Total,true,0);
  CheckBox(20,-20,0,"OK",OKFlag);

  v = keypadv;
  POSKeyPad(v,keypadh,v + 250,keypadh2,2,"NPTSPaymentToolKeyPad",kKeyPadEnter + kKeyPadWithNotes);
  v = v + 255;
  SplitButton(keypadh,v,keypadh2,v + 2*vs,2,"CancelNPTSCashPaymentTClass","Atšaukti" & F_Label("F2"),"ProceedCashSimpleInDClass","Tęsti" & F_Label("F1"),20);

  EndWindow;
end;

window CashSimpleOutDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,hm,l,v,v3,vm,vs;
  real fieldh,fieldh2,keypadh,keypadh2,keypadv,fntsize;
  
  WindowBegin("Išlaidos",CashSimpleOutDClass,CGview,-);
  SetWRect(64,80,610,425);
  AutoSizeWindow(false);
  Modality(kModalityGlobal);
  UseView(CashVc);

  SetupColumWithKeypadWindow(fieldh,fieldh2,keypadh,keypadh2,keypadv,vs,fntsize);
  vs = 20; h = fieldh-60; h2 = 260; h3 = 350;
  EditField(h,v=6,170,"Komentaras",Normal,Comment,false,0);
  EditField(h,v=v+vs,70,"Stalčius",Normal,Drawer,false,DrawerSClass);
  MatrixBegin(h-43,vm=(v+=40),h+180,v+5*20+1,-,99);
  MatCol(1,24,"Mok. būdas",0,PMCode,false,PMSClass);
  MatCol(1,60,"Denomination",0,Denomination,false,SetSClass);
  MatCol(1,-75,"Suma",0,AmountStr,false,0);//CUST
  InsertRowTest;
  DeleteRowTest;
  EndMatrix;
  EditField(h+95,v+=110,70,"Viso",Normal,Total,true,0);
  CheckBox(20,-20,0,"OK",OKFlag);

  v = keypadv;
  POSKeyPad(v,keypadh,v + 250,keypadh2,2,"NPTSPaymentToolKeyPad",kKeyPadEnter + kKeyPadWithNotes);
  v = v + 255;
  SplitButton(keypadh,v,keypadh2,v + 2*vs,2,"CancelNPTSCashPaymentTClass","Atšaukti" & F_Label("F2"),"ProceedCashSimpleOutDClass","Tęsti" & F_Label("F1"),20);

  EndWindow;
end;

window WebNGProductCatDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Web Product Category",WebNGProductCatDClass,CGview,-);
  UseView(WebNGProductCatVc);
  SetWRect(20,80,500,380);
  vs = 20;h = 100;h2 =  320; v = 6;
  EditField(h,v,120,"Code",Normal,Code,false,0);
  EditField(h,v+=vs,-40,"Comment",Normal,Comment,false,0);
  EditField(h,v+=vs,-40,"Parent Category",Normal,ParentCategory,false,WebNGProductCatSClass);
  
  CheckBox(h,v+=18,0,"Show sub-category images",ShowSubcatImages); // cust
  
//  ButtonFrame(h,vm=(v+=40),345,2,"Template Element when displaying lists"); //no code attached to these fields
//  EditField(h,v,120,"Products",Normal,ElementProducts,false,WebNGElementSClass);
//  EditField(h2,v,-40,"Categories",Normal,ElementCategories,false,WebNGElementSClass);
//  CheckBox(h,v+=18,0,"Don't inherit parent category's template elements",DontInheritElements);
  MatrixBegin(4,v+=40,-32,-20,-,99);
  MatCol(1,24,"Lang.",0,LangCode,false,WebNGLanguageSClass);
  MatCol(1,84,"Text",0,Text,false,0);
  EndMatrix;
  EndWindow;
end;

window WebRegOutEClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Web Registers",WebRegOutEClass,CGEcW,RcType);
  SetWRect(20,80,500,450);
  EndWindow;
end;

window ARRClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,v3,vm,vs;
  WindowBegin("Pardavimų knyga",ARRClass,CGRcW,RcType);
  if (IsEnterprise) then begin
  SetWRect(20,80,532,360);
  Tile(0,20,false,"",f1);
  EditFieldTL(h=150,v=6, 150,"Pirkėjas",   M4UStr,Normal,30,f1,false,CUSClass);
  TileButtons(v,2);
  Tile(1,340,false,"1",f3);
    v = 6; vm = v; vs = 20;
    if (HasCategories) then begin
      EditFieldTL(h,v, 70, "Kategorija",   M4UStr,Normal,5,f3,false,CCatSClass); 
      v = v + 20;
    end;
    if (HasContactClassification) then begin
      EditFieldTL(h,v,70,"Klasė",M4UStr,Normal,30,f4,false,CClassSClass); 
      v = v + 20;
      EditFieldTL(h,v,70,"Klasės tipas",M4UStr,Normal,60,f5,false,CTypeSClass); 
      v = v + 20;
    end;
    if (HasSalesman or HasSalesmanBonus) then begin
      EditFieldTL(h,v, 70, "Pardavėjas",   M4UStr,Normal,10,f2,false,UserSClass); 
      v = v + 20;
    end;
    if (HasSalesGroup) then begin
      EditFieldTL(h,v ,50,"Pardavimų grupė",M4UStr,Normal,10,TransStr,false,SalesGroupSClass);
      v = v + 20;
    end;
    if (HasObjects) then begin
      EditFieldTL(h,v, 150, "Objektai",M4UStr,Normal,60,ObjStr,false,ObjSClass); 
      v = v + 20;
      EditFieldTL(h,v, 70, "Objekto tipas",M4UStr,Normal,5,ObjType,false,OTSClass); 
      v = v + 20;
    end;
    if (HasMultiCurrency or HasBase2) then begin
      EditFieldTL(h,v, 70, "Valiuta",M4UStr,Normal,5,CurncyCode,false,CurncyCodeSClass); 
    end;
    EditFieldTL(h,v+=20, 70, "Uždelsta daugiau nei",   M4Long,Normal,0,long1,false,0); 
    EditFieldTL(h,v+=20, 70, "Data",   M4Date,Normal,0,d1,false,PasteCurDate); 
    EditFieldTL(h,v3=(v+=20), 70, "Debitorių sąsk.",   M4UStr,Normal,10,AccStr,false,AccSClass); 
    if (HasMultiCurrency or HasBase2) then begin
      ButtonFrame(h=20,v=(vm=(v3+=42)),123,2,"Sumos"); 
      RadioButton(h,v,0,0,"Bazine val. 1",flags[2]); 
      RadioButton(h,v+=16,1,0,"Valiuta",flags[2]); 
    end;
  ButtonFrame(h,v+=45,123,2,"Rūšiavimas");
  RadioButton(h,v,0,0,"Pirkėjo nr.",flags[1]);
  RadioButton(h,v+=16,1,0,"Pirkėjo pavadinimas",flags[1]);
  ButtonFrame(h+=148,v=vm,140,4,"Avansai");
  RadioButton(h,v,0,0,"Įtraukti avansus",flags[21]);
  RadioButton(h,v+=16,1,0,"Tik avansai",flags[21]);
  RadioButton(h,v+=16,2,0,"Praleisti avansus",flags[21]);
  CheckBox(h,v+=18,0,"Rodyti išankst. nr.",flags[20]);
/*    
    ButtonFrame(h,v+=40,140,2,"Invoice Sorting"); 
    RadioButton(h,v,0,0,"Customer C_ode",flags[22]); 
    RadioButton(h,v+=16,1,0,"Invoice Date",flags[22]); 
*/    
  ButtonFrame(h+=168,v=90,123,7,"Funkcija");
  RadioButton(h,v,0,0,"Detaliai",ArtMode);
  RadioButton(h,v+=16,1,0,"Peržiūra",ArtMode);
  if (HasAged) then begin
    RadioButton(h,v+=16,2,0,"Laikotarpiais",ArtMode);
    RadioButton(h,v+=16,5,0,"Laikotarp. detaliai",ArtMode);
  end;
  RadioButton(h,v+=16,3,0,"Likučiai",ArtMode);
  RadioButton(h,v+=16,4,0,"Kursų skirtumas",ArtMode);
  RadioButton(h,v+=16,6,0,"Kursų skirt. detaliai",ArtMode);
  ButtonFrame(h,v=vm,123,2,"Būklė");
  RadioButton(h,v,0,0,"Neapmokėtos",flags[0]);
  RadioButton(h,v+=16,2,0,"Uždelstos",flags[0]);
  ButtonFrame(h,v+=40,123,3,"Abejotinos");
  RadioButton(h,v,0,0,"Įtraukti abejotinas",flags[3]);
  RadioButton(h,v+=16,1,0,"Neįtr. abejotinų",flags[3]);
  RadioButton(h,v+=16,2,0,"Tik abejotinos",flags[3]);
  Tile(2,320,false,"2",Language);
  v = 6;h=150;
    EditFieldTL(h,v, 80, "Kalba",M4UStr,Normal,5,Language,false,LangSClass);
    EditFieldTL(h,v+=20, 80, "Pagr. partneris",M4UStr,Normal,20,f9,false,CUSClass);

    EditFieldTL(h,v+=vs, 80, "Suma nuo",M4Val,Normal,0,vals0,true,0);
    StaticText(h+94,v+13,"kam",false);
    EditFieldTL(h+120,v, 80, "",M4Val,Normal,0,vals1,true,0);
//CUST-BEGIN
    PeriodField(h,v+=vs,"Periodas");
//CUST-END
  CheckBox(h,v+=30,0,"Rodyti viso 2-a baz. valiuta",flags[12]);
  CheckBox(h,v+=16,0,"Tik palūkanų faktūras",flags[13]);
  CheckBox(h,v+=16,0,"Rodyti fakt. komentarą",flags[14]);
    if (HasOfficialSerNr or HasInvoiceOfficialSerNr) then begin
  CheckBox(h,v+=16,0,"Rodyti oficialų ser. nr.",flags[23]);
    end;
  CheckBox(h,v+=16,0,"Rodyti debitorių sąsk.",flags[18]);
    if (StandardHansa==false) then begin
  CheckBox(h,v+=16,0,"Rodyti dal. apmokėjimus",flags[19]);
    end;
  CheckBox(h,v+=16,0,"Laikot. pagal faktūros datą",flags[22]);
  CheckBox(h,v+=16,0,"Neįtr. be priminimų",flags[16]);
    if (StandardHansa==false) then begin
  CheckBox(h,v+=16,0,"Neįtr. be kolekcijos",flags[17]);
    end;
  end else begin
    SetWRect(20,80,400,300);
  EditFieldTL(h=120,v=6, 150,"Pirkėjas",   M4UStr,Normal,30,f1,false,CUSClass); 
    if (HasCategories) then begin
  EditFieldTL(h,v+=20, 50, "Kategorija",   M4UStr,Normal,5,f3,false,CCatSClass); 
    end;
    if (HasObjects) then begin
      EditFieldTL(h,v+=20, 150, "Objektai",M4UStr,Normal,60,ObjStr,false,ObjSClass); 
      EditFieldTL(h,v+=20, 50, "Objekto tipas",M4UStr,Normal,5,ObjType,false,OTSClass); 
    end;
    if (HasMultiCurrency or HasBase2) then begin
      EditFieldTL(h,v+=20, 50, "Valiuta",M4UStr,Normal,5,CurncyCode,false,CurncyCodeSClass);
    end;
    if (HasContactClassification) then begin
      EditFieldTL(h,v+=20 ,70,"Klasė",M4UStr,Normal,30,f4,false,CClassSClass);
    end;
  EditFieldTL(h,v+=20, 82, "Data",   M4Date,Normal,0,d1,false,PasteCurDate); 
    if (HasLanguages) then begin
      EditFieldTL(h,v+=20,30,"Kalba",M4UStr,Normal,5,Language,false,LangSClass);
end;
  if (HasModCO) then begin
    ButtonFrame(h = 30,vm=(v+=40),123,5,"Funkcija"); 
    RadioButton(h,v,0,0,"Istorija",ArtMode); 
    RadioButton(h,v+=16,1,0,"Peržiūra",ArtMode); 
    if (HasAged) then begin
      RadioButton(h,v+=16,2,0,"Laikot.",ArtMode); 
      RadioButton(h,v+=16,4,0,"Detaliai laikot.",ArtMode); 
    end;
    RadioButton(h,v+=16,3,0,"Likutis",ArtMode); 
  end else begin
    ButtonFrame(h = 30,vm=(v+=40),123,3,"Funkcija");   
    RadioButton(h,v,0,0,"Istorija",ArtMode); 
    RadioButton(h,v+=16,1,0,"Peržiūra",ArtMode); 
    if (HasAged) then begin
      RadioButton(h,v+=16,2,0,"Laikotarpiais",ArtMode); 
    end;
    RadioButton(h,v+=16,3,0,"Likutis",ArtMode);
    if (HasAged) then begin
      RadioButton(h,v+=16,4,0,"Detaliai laikotarpiais",ArtMode); 
    end;
  end;
    if (HasMultiCurrency or HasBase2) then begin
      ButtonFrame(h,v+=40,123,2,"Sumos"); 
      if (HasBase2) then begin
      RadioButton(h,v,0,0,"Baz. val. 1",flags[2]); 
      end else begin
        RadioButton(h,v,0,0,"Baz. val.",flags[2]); 
      end;
      RadioButton(h,v+=16,1,0,"Valiuta",flags[2]); 
      if (HasBase2) then begin
        CheckBox(h,v+=32,0,"Rodyti Baz. val. 2 sumas",flags[12]); 
      end;
    end;

    if (HasPrepayments) then begin 
      if (HasMultiCurrency or HasBase2) then begin 
        CheckBox(h,v+=16,0,"Rodyti išankstinio mokėjimo Nr.",flags[20]);
      end else begin
        CheckBox(h,v+=32,0,"Rodyti išankstinio mokėjimo Nr.",flags[20]);
      end;
    end;
    if (HasOfficialSerNr) then begin
      CheckBox(h,v+=16,0,"Rodyti oficialų Ser. Nr.",flags[23]); v = v + 16;
    end;
    if (HasLocalization("PRT")) then begin
      CheckBox(h,v,0,"Rodyti debitorių sąskaitas",flags[18]); v = v + 16;
    end;
    ButtonFrame(h+=165,v = vm,153,2,"Būklė"); 
    RadioButton(h,v,0,0,"Neapmokėtos",flags[0]); 
    RadioButton(h,v+=16,2,0,"Uždelstos",flags[0]);
    ButtonFrame(h,v+=56,153,2,"Rūšiavimas");
    RadioButton(h,v,0,0,"Nr.",flags[1]); 
    RadioButton(h,v+=16,1,0,"Pavadinimas",flags[1]);
    
  end;
  EndWindow;
end;

window ITDClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vs,tilenr;
  boolean taxtempf;
  WindowBegin("Prekės grupė",ITDClass,CGview,-);
  if (IsEnterprise) then begin
    SetWRect(64,80,680,470);
//  Sizeable(-1,-1,0,0);
  UseView(ITVc);
  Tile(0,90,false,"",Code);
  v = 6; vs = 20; h = 120;
  EditField(h=120,v, 70,"Nr.",St_i,Code,false,0);
  EditField(h,v+=20 ,200,"Pavadinimas",Normal,Comment,false,0);
  EditField(h,v+=vs ,200,"Klasių tipai",Normal,ClassType,false,CTypeSClass);
    tilenr = 1;
    TileButton(tilenr,"Sąsk.");  tilenr = tilenr + 1; 
    TileButton(tilenr,"Kredito sąsk.");  tilenr = tilenr + 1; 
    if (StandardHansa==false) then begin
      TileButton(tilenr,"Paslugų sąsk.");  tilenr = tilenr + 1; 
    end;
    TileButton(tilenr,"Savikainos modelis");  tilenr = tilenr + 1; 
    TileButton(tilenr,"Frachtas");  tilenr = tilenr + 1; 
    if (HasLocalization("LVA")) then begin
      TileButton(tilenr,"POS"); tilenr = tilenr + 1;  
    end;
    TileButton(tilenr,"Tekstas");  tilenr = tilenr + 1; 
    if (HasCharts) then begin
      TileButton(tilenr,"BI");  tilenr = tilenr + 1;  
    end;
    tilenr = 1;
    Tile(tilenr,260,false,tilenr,SalesAcc);  tilenr = tilenr + 1;
    h2 = 530;
  EditField(h=120,vm=(v=6),55,"Viet. pard. sąsk.",Normal,SalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,VATZoneNameLIT & "Pardavimų sąsk.",Normal,EUSalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Ne ES pard. sąsk.",Normal,ExpSalesAcc,false,AccSClass);
  EditField(h,v+=vs ,55,"Viet. savik. sąsk.",Normal,CostAcc,false,AccSClass);
  EditField(h,v+=vs ,55,VATZoneNameLIT & "Savikainos sąsk.",Normal,EUCostAcc,false,AccSClass);
  EditField(h,v+=vs ,55,"Ne ES savik. sąsk.",Normal,ExpCostAcc,false,AccSClass);
    if (StandardHansa==false) then begin
  EditField(h,v+=vs ,55,"Neb. gaminių sąsk.",Normal,WIPAcc,false,AccSClass);
    end;
  EditField(h,v+=vs,55,"Komponentų pan.",Normal,CompUsage,false,AccSClass);
    if (StandardHansa==false) then begin
  EditField(h,v+=vs,55,"Gamybos kontrolė",Normal,ProdControl,false,AccSClass);
  EditField(h,v+=vs,55,"Gamybos pap. kaštai",Normal,ProdWCostAcc,false,AccSClass);
    EditField(h,v+=vs,55,"Viešbučio WIP sąsk.",Normal,HotelWIPAcc,false,AccSClass);
    end;
    EditField(h=350,v=vm,45,"Vietinis PVM kodas",Normal,VATCodeDom,false,VATCodeSClass);
    EditField(h,v+=vs,45,VATZoneEditFieldLabel_LIT(1) & "PVM kodas",Normal,VATCodeEU,false,VATCodeSClass);
    EditField(h,v+=vs,45,"Ne ES PVM kodas",Normal,VATCodeExp,false,VATCodeSClass);
  EditField(h,v+=vs ,55,"Viet. pirk. kontrol. sąsk.",Normal,PurchAcc,false,AccSClass);
  EditField(h,v+=vs ,55,VATZoneNameLIT & "Pirkimų kontr. sąsk.",Normal,EUPurchAcc,false,AccSClass);
  EditField(h,v+=vs ,55,"Ne ES pirk. kontrol. sąsk.",Normal,ExpPurchAcc,false,AccSClass);
  EditField(h,v+=vs ,55,"Atsargų sąsk.",Normal,InvAcc,false,AccSClass);
    if (StandardHansa==false) then begin
  EditField(h,v+=vs ,55,"Pirk. kainų kaitos sąsk.",Normal,PriceVarianceAcc,false,AccSClass);
  EditField(h,v+=vs ,55,"Panaud. kaitos sąsk.",Normal,UsageVarianceAcc,false,AccSClass);
    end;
  EditField(h,v+=vs ,55,"Nuolaidos sąsk.",Normal,DiscountAcc,false,AccSClass);
    EditField(h,v+=vs,55,"Proj. medž. pan. sąsk.",Normal,ProjMaterialsUsageAcc,false,AccSClass); 
    if (HasObjects) then begin
      EditField(h=120,v+=vs,405-120,"Objektas",Normal,Objects,false,ObjSClass);
    end;
    if (HasTaxMatrix) then begin
      EditField(h2=530,v=vm,70,"Viet. mok. šabl.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
      EditField(h2,v+=vs,70,VATZoneEditFieldLabel_LIT(1) & "PVM kodas",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass);
      EditField(h2,v+=vs,70,"Eksp. mok. šabl.",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass);
    end;
    v = vm; h2=530;
    if (HasTaxMatrix) then begin
      EditField(h2,v,70,"Vietin. mok. šablonas",Normal,TaxTemplateCode,false,TaxTemplateSClass); v = v + vs; 
      EditField(h2,v,70,VATZoneEditFieldLabel_LIT(1) & "PVM kodas",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass); v = v + vs;
      EditField(h2,v,70,"Eksporuoti mok. šabloną",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass); v = v + vs; 
    end;
    if (HasLocalization("ITA,LVA")) then begin
      EditField(h2,v,55,"Fiskalinis Departamentas",Normal,FiscalDep,false,FiscalDepSClass);
    end;
    Tile(tilenr,100,false,tilenr,CredSalesAcc); tilenr = tilenr + 1;
    //StaticText(h=120,v=7,"Kredito faktūros",false);//CUST >> Made the edit fields below not work for some reason??
    EditField(h,vm=(v+=20),55,"Pradžios data",Normal,CredSalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,VATZoneNameLIT & "Pardavimų sąsk.",Normal,CredEUSalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Ne ES pard. sąsk.",Normal,CredExpSalesAcc,false,AccSClass);
//CUST-BEGIN
    EditField(h,v+=vs,45,"Gavimo PVM kodas",Normal,PUVATCode,false,VATCodeSClass); v = v + vs;
//CUST-END
    EditField(h=350,v=vm,45,"Viet. PVM kodas",Normal,CredVATCodeDom,false,VATCodeSClass);
    EditField(h,v+=vs,45,VATZoneEditFieldLabel_LIT(1) & "PVM kodas",Normal,CredVATCodeEU,false,VATCodeSClass);
    EditField(h,v+=vs,45,"Ne ES PVM kodas",Normal,CredVATCodeExp,false,VATCodeSClass);
    if (HasLocalization("GBR,LTU,POL,LVA")) then begin
      EditField(h,v+=vs,45,"Atvirkštinio PVM kodas",Normal,RvrsVATCode,false,VATCodeSClass);
    end;
    if (StandardHansa==false) then begin
      Tile(tilenr,100,false,tilenr,SVOInvbleSalesAcc); tilenr = tilenr + 1;
  EditField(h=170,v=6,55,"Pasl. Fakt. pard. sąsk.",Normal,SVOInvbleSalesAcc,false,AccSClass); 
//       EditField(h,v+=vs,55,"Serv. Warranty Sales A/C",Normal,SVOWarrantySalesAcc,false,AccSClass); // Not being used in code atm
//       EditField(h,v+=vs,55,"Serv. Contract Sales A/C",Normal,SVOContractSalesAcc,false,AccSClass); // Not being used in code atm
//       EditField(h,v+=vs,55,"Serv. Goodwill Sales A/C",Normal,SVOGoodwillSalesAcc,false,AccSClass); // Not being used in code atm
  EditField(h=400,v=6,55,"Pasl. Fakt. sav. sąsk.",Normal,SVOInvbleCostAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Pasl. garant. sav. sąsk.",Normal,SVOWarrantyCostAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Pasl. sut. sav. sąsk.",Normal,SVOContractCostAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Pasl. Goodwill sav. sąsk.",Normal,SVOGoodwillCostAcc,false,AccSClass);
    end;
    Tile(tilenr,250,false,tilenr,CostPerc); tilenr = tilenr + 1;
  ButtonFrame(h=30,vm=(v=20),230,6,"Pirminis savikainos mod.");
  RadioButton(h,v,0,0,"Pagal nutylėjimą",PrimaryCostModel);
  RadioButton(h,v+=16,1,0,"Įsigijimo kaina",PrimaryCostModel);
  RadioButton(h,v+=16,2,0,"% _nuo bazinės kainos",PrimaryCostModel);
  EditField(h+150,v,55,"%",Normal,CostPerc,true,0);
  RadioButton(h,v+=16,3,0,"Svertinis vidurkis",PrimaryCostModel);
  RadioButton(h,v+=16,4,0,"Eilė",PrimaryCostModel);
  RadioButton(h,v+=16,9,0,"Jokio",PrimaryCostModel);
  ButtonFrame(h,v+=40,230,3,"Eilės savikainos modelis");
  RadioButton(h,v,0,0,"Pagal nutylėjimą",QueuedCostModel);
  RadioButton(h,v+=16,1,0,"F_IFO",QueuedCostModel);
  RadioButton(h,v+=16,2,0,"LIFO",QueuedCostModel);

  ButtonFrame(h2=280,v=vm,200,3,"Savikaina serijiniams nr.");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",FIFOPerSerialNr);
  RadioButton(h2,v+=16,1,0,"Savikaina ne serijiniams nr.",FIFOPerSerialNr);
  RadioButton(h2,v+=16,2,0,"Savikaina serijiniams nr.",FIFOPerSerialNr);
  ButtonFrame(h2,v+=40,200,3,"Eilės modelis pagal patalpą");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",FIFOPerLocation);
  RadioButton(h2,v+=16,1,0,"Eilės modelis pagal patalpą",FIFOPerLocation);
  RadioButton(h2,v+=16,2,0,"Eilė pagal patalpą",FIFOPerLocation);
  ButtonFrame(h2,v+=40,200,3,"Svertinis vid. pagal patalpą");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",WAPerLocation);
  RadioButton(h2,v+=16,1,0,"Svert. vid. ne pagal patalpą",WAPerLocation);
  RadioButton(h2,v+=16,2,0,"Svert. vid. pagal patalpą",WAPerLocation);
/*  5.3
  ButtonFrame(h2,v+=40,200,3,"Savikaina patalpai");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",CostPricePerLocation);
  RadioButton(h2,v+=16,1,0,"Savikaina ne pagal patalpą",CostPricePerLocation);
  RadioButton(h2,v+=16,2,0,"Savikaina patalpai",CostPricePerLocation);
*/
    Tile(tilenr,80,false,tilenr,EUCodex); tilenr = tilenr + 1;
  //  CheckBox(h=90,v+=30,0,"Internal (Not Showing in WebShop)",Internal);
    if (StandardHansa==false) then begin
    CheckBox(h=90,vm=(v=16),0,"Šiai grupei nespausdinti frachto etikečių",ExclFrLabPr);
  CheckBox(h,v+=16,0,"Įtraukti fiksuotą prekės kainą",InclItemFreight);
  EditField(h+195,v+2 ,55,"",Normal,FixedFreight,true,0);
    EditField(h=140,v+=22,200,"Reikmenų/EAN kodas",Normal,EUCodex,false,CommoditySClass);
    end else begin
      EditField(h=120,vm=(v=16),200,"Reikmenų/EAN",Normal,EUCodex,false,CommoditySClass); 
    end;
    EditField(h=220,v+=vs,120,"Produkto/paslaugų klasė",Normal,CPSCode,false,0); 
    ButtonFrame(h=400,v=vm,80,3,"Tipas");
  RadioButton(h,v,0,0,"Pagrindinis",Type);
  RadioButton(h,v+=16,1,0,"Transportas",Type);
  RadioButton(h,v+=16,2,0,"Įpakavimas",Type);
    if (HasLocalization("LVA")) then begin
      Tile(tilenr,120,true,tilenr,FiscalDep); tilenr = tilenr + 1;
      EditField(h=120,v=20,55,"Fiskalinis Departamentas",Normal,FiscalDep,false,FiscalDepSClass);
    end;
    Tile(tilenr,120,true,tilenr,Math); tilenr = tilenr + 1;
  v = 24;
  MatrixBegin(4,v,-32,-20,INTextRowType,99);
  MatCol(1,24,"Kalba",0,LangCode,false,LangSClass);
  MatCol(1,84,"Tekstas",0,Text,false,0);
  EndMatrix;
    if (HasCharts) then begin
      Tile(tilenr,400,false,tilenr,-);  tilenr = tilenr + 1;
    ChartArea(10,6,-10,390,"$ITDCLass_BIChart"); 
    end;
  end else begin
  SetWRect(64,80,470,230);
  UseView(ITVc);
    v = 6; vs = 20; h = 120; h2 = 300;
  EditField(h,v,70,"Kodas",Normal,Code,false,0);
    EditField(h,v+=vs,-20,"Pavadinimas",Normal,Comment,false,0);
    if (HasLocalization("LVA") and HasModPOS) then begin
      EditField(h=120,v+=vs,55,"Fiskalinis Departamentas",Normal,FiscalDep,false,FiscalDepSClass);
    end;
    if (HasVATZone) then begin
      EditField(h,vm=(v+=vs),45,"Vietinis PVM kodas",Normal,VATCodeDom,false,VATCodeSClass);
      EditField(h,v+=vs,45,VATZoneEditFieldLabel_LIT(1) & "PVM kodas",Normal,VATCodeEU,false,VATCodeSClass);
      EditField(h,v+=vs,45,"Ne ES PVM kodas",Normal,VATCodeExp,false,VATCodeSClass);
      if (HasLocalization("GBR,LTU,POL,LVA")) then begin
        EditField(h,v+=vs,45,"Atvirkštinio PVM kodas",Normal,RvrsVATCode,false,VATCodeSClass);
      end;
    end else begin
      if (HasTaxMatrix) then begin
        EditField(h,v+=vs,55,"Mok.šabl.",Normal,TaxTemplateCode,false,TaxTemplateSClass); taxtempf = true; 
      end else begin
        EditField(h,v+=vs,45,"PVM kodas",Normal,VATCodeDom,false,VATCodeSClass);
      end;    
    end;
  if (HasModNL) then begin
      if (HasVATZone) then begin
        EditField(h2,v=vm,55,"Viet. pard. sąsk.",Normal,SalesAcc,false,AccSClass);
        EditField(h2,v+=vs,55,VATZoneNameLIT & "Pard. sąsk.",Normal,EUSalesAcc,false,AccSClass);
        EditField(h2,v+=vs,55,"Eksporto pardavimų A/C",Normal,ExpSalesAcc,false,AccSClass);
      if (HasModIN) then begin
          EditField(h2,v+=vs,55,"Atsargų A/C",Normal,InvAcc,false,AccSClass);
          EditField(h2,v+=vs ,55,"Vietinių pirk. padidėj A/C",Normal,PurchAcc,false,AccSClass);
          EditField(h2,v+=vs ,55,VATZoneNameLIT & "Pirkimų padidėj. A/C",Normal,EUPurchAcc,false,AccSClass);
          EditField(h2,v+=vs ,55,"Importuoti pirk. padidėj. A/C",Normal,ExpPurchAcc,false,AccSClass);
        end else begin
//          EditField(h,v+=vs,55,"#Stock# A/C",Normal,InvAcc,false,AccSClass);
        end;
      end else begin
        EditField(h,v+=vs,70,"Pard. sąsk.",Normal,SalesAcc,false,AccSClass);
        EditField(h,v+=vs ,55,"Savik. sąsk.",Normal,CostAcc,false,AccSClass); 
        if (HasModIN) then begin
  EditField(h,v+=vs,70,"Atsargų sąsk.",Normal,InvAcc,false,AccSClass);
  EditField(h,v+=vs,70,"Pirkimų kontr. sąsk.",Normal,PurchAcc,false,AccSClass);
        end;
      end;
      if (BuildProductCode=="StandardHealthcare") then begin
        EditField(h,v+=vs ,55,"Savik. sąsk.",Normal,CostAcc,false,AccSClass);
      end;
      if (BuildProductCode=="StandardRestaurant") then begin
        EditField(h,v+=vs ,55,"Nuolaidos sąsk.",Normal,DiscountAcc,false,AccSClass); 
      end;
      if (HasLocalization("PRT")) then begin 
        StaticText(h,v+=40,"Kredito faktūra",false); 
        EditField(h,v+=vs,55,"Pard. sąsk.",Normal,CredSalesAcc,false,AccSClass);
        EditField(h,v+=vs,45,"PVM kodas",Normal,CredVATCodeDom,false,VATCodeSClass);
      end;
      if (HasLocalization("BRA,HRV") or HasTaxMatrix) then begin
        if (HasVATZone) then begin
          if (taxtempf==false) then begin 
          EditField(h,v+=vs,55,"Viet. mok. šabl.",Normal,TaxTemplateCode,false,TaxTemplateSClass); 
          end; 
          EditField(h,v+=vs,55,VATZoneEditFieldLabel_LIT(1) & "PVM kodas",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass);
          EditField(h,v+=vs,55,"Eksporto mok. šabl.",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass); 
        end else begin
          if (taxtempf==false) then begin 
          EditField(h,v+=vs,55,"Mok. šabl.",Normal,TaxTemplateCode,false,TaxTemplateSClass); 
          end;
      end;
    end;
    end;
    if (HasLocalization("BRA,KEN,POL")) then begin
      EditField(h+100,v+=vs,120,"Produkto/paslaugų klasė",Normal,CPSCode,false,0); 
    end;
    if (HasLanguages) then begin
      v = v+54;
      MatrixBegin(4,v,-32,-20,-,99);
      MatCol(1,24,"Kalba",0,LangCode,false,LangSClass); 
      MatCol(1,84,"Tekstas",0,Text,false,0); 
      EndMatrix; 
  end;
end;
  EndWindow;
end;

window iDealCashierDefTClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vm2,vs,chkbx;
  
  WindowBegin("iDeal - POS Nustatymai",iDealCashierDefTClass,CGSbl,-);
  SetWRect(64,80,700,600);
  SetBlid(iDealCashierDefBlock);
  v = 6; vs = 20; h = 150; h2 = 290; vm=0;
  EditField(h,v=6,120,"Buy Back Item",Normal,BuyBackItemCode,false,INSClass);
//  EditField(h,v+=vs,70,"Force VAT code",Normal,ForceVATCode,false,VATCodeSClass);//CUST
  EditField(h,v+=vs,70,"Replace VAT code",Normal,ReplaceVATCode,false,VATCodeSClass);//CUST
  EditField(h,v+=vs,70,"With",Normal,WithVATCode,false,VATCodeSClass);//CUST
  CheckBox(h,v+=20,0,"OK Goods Receipts",AUTOOKPU);
  CheckBox(h,v+=16,0,"Run Cash Up Maintenance when closing session",RunCashupMaintenance);
  CheckBox(h,v+=16,0,"Disallow reversed VAT on POS",RemoveRvrsVATCode);
  EndWindow;
end;


window GiftVoucherSalesTouchScreenDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad")
begin
  real h,h2,v,vs;
  real fieldh,fieldh2,keypadh,keypadh2,keypadv,fntsize;

  WindowBegin("Parduoti dov. kuponą",GiftVoucherSalesTouchScreenDClass,CGother,RcType);
//  Modality(kModalityGlobal);
  UseView(RcVc);
  SetWRect(80,200,600,510);
  AutoSizeWindow(false);
  SetupColumWithKeypadWindow(fieldh,fieldh2,keypadh,keypadh2,keypadv,vs,fntsize);


  EditFieldTL(fieldh,v=6,100,"Dovanų kupono nr.",M4Str,Normal,100,f1,false,GCSClass);

  v = keypadv;
  POSKeyPad(v,keypadh,v + 250,keypadh2,2,"NPTSPaymentToolKeyPad",kKeyPadEnter);  
  v = v + 255;
  SplitButton(keypadh,v,keypadh2,v + vs,2,"CancelNPTSCashPaymentTClass","Atšaukti" & F_Label("F2"),"ProceedGiftVoucherSalesTouchScreenDClass","Tęsti" & F_Label("F1"),20);  

  EndWindow;
end;


window SLCreditNPTSSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real fldlen,h,h2,h3,h4,hm,l,v,v3,v4,v5,vm,vs,flv,hs,screenmid,fntsize;
  LongInt bm,lt,rt,tp;

  WindowBegin("Credit Invoice",SLCreditNPTSSClass,CGother,RcType);
  UseView(RcVc);
  Modality(kModalityGlobal);
  if (GuiType==kGuiAndroid or GuiType==kGuiiPhone) then begin
    FullScreenWindow;
    SetWRect(tp,lt,bm,rt);

    v = 6; vs = 45;
    hm = 20; hs = 130; fldlen = -10;
  end else begin
    SetWRect(80,200,550,540);

    v = 20; vs = 30;
    hm = 20; hs = 160; fldlen = 80;
  end;

  vs = 20;
  EditFieldTL(h=110,v=6,-20,"Invoice No.",M4Str,Normal,200,f1,false,IVSClass);

  v3 = 33; vs = 37; h3 = 210; h4 = 400; hm = 280;

  vm = -160; vs = 52; h2 = 55; v3 = 48; l = 57;

  switch (GuiType) begin
    case kGuiAndroid:
      v = bm - 250 - 2 - vs - 3;
      POSKeyPad(v,3,v + 250,rt - 3,2,"NPTSPaymentToolKeyPad",kKeyPadNone);
      v = v + 250 + 2;
    case kGuiiPhone:
    otherwise
      v = v + vs;
      POSKeyPad(v,243,v + 250,443,2,"NPTSPaymentToolKeyPad",kKeyPadNone);
      v = v + 250 + 2;
  end;


  v = -60;
  ColourPushButton(-257,v,-257+2*h2,v+v3,"CancelAndOverrideLogout","Cancel<BR>F2",20);
  ColourPushButton(-137,v,-137+2*h2,v+v3,"ProceedSLCreditNPTSSClass","Proceed<BR>F1",20);

  EndWindow;
end;


window CUNPTDSClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  integer i,rwcnt;
  real h,h1,h2,h3,h4,h5,l,v,vs;
  record NPTSNewCUFieldsBlock NPTSNCUFb;
  row NPTSNewCUFieldsBlock NPTSNCUFbrw;
  string 255 label;
  
  WindowBegin("Kontaktas",CUNPTDSClass,CGview,-);
  Modality(kModalityGlobal);
  DynamicWindow;
  SetWRect(20,80,680,441);
  Sizeable(-1,-1,0,0); 
  UseView(CUVc);
  v = 6; h = 130; l=223; vs = 20; h1=410; h2 = 340; h3 = 430; h4 = 580; h5 = 460;
  ActiveFieldOnNew("Code"); //dont change, otherwise automatic address lookup helper window wont show automatically //wns
  EditField(h,v ,   95,"Nr.",Normal,Code,false,TSerSClass);
  EditField(h,v+=vs,h1-h+50,"Pavadinimas",Normal,Name,false,0);

/*
  HalPushButton(h+120,v+=20,h+120+100,v+20,"UpdCustomerAddressCUDsm","Update Address"); 
  v=v+10;
  StaticText(h,v+13,"Invoice Address",false); 
  label = UserDefined("CUVc","InvAddr0");
  EditField(h,v+=vs,-20,label,Normal,InvAddr0,false,0);
  label = UserDefined("CUVc","InvAddr1");
  EditField(h,v+=vs,-20,label,Normal,InvAddr1,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs,-20,label,Normal,InvAddr2,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs,-20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs,-20,label,Normal,InvAddr4,false,0);
  EditField(h,v+=vs,50,"Šalis",Normal,CountryCode,false,CountrySClass);//tsp-101118
  EditField(h1,v,-20,"Skyrius",Normal,Department,false,0);
  EditField(h,v+=vs,150,"Tel.",Normal,Phone,false,0);
  EditField(h1,v,-20,"Fax",Normal,Fax,false,0); 
  EditField(h,v+=vs,150,"Alt Phone",Normal,AltPhone,false,0); 
  EditField(h1,v,-20,"Mob.",Normal,Mobile,false,0);
  EditField(h,v+=vs,150,"Skype Name",Normal,SkypeName,false,0); 
  EditField(h1,v,-20,"SIP",Normal,SIPCode,false,0); 
  EditField(h,v+=vs,150,"El. paštas",Normal,eMail,false,0);  
  EditField(h1,v,-20,"Extension",Normal,Extension,false,0); 

  HalPushButton(h+120,v+=vs,h+120+100,v+20,"UpdDeliveryAddressCUDsm","Update Address"); 
  v=v+12;
  StaticText(h,v+13,"Delivery Address",false); 
  label = UserDefined("CUVc","DelAddr0");
  EditField(h,v+=vs,-20,label,Normal,DelAddr0,false,0);
  label = UserDefined("CUVc","DelAddr1");
  EditField(h,v+=vs,-20,label,Normal,DelAddr1,false,0);
  label = UserDefined("CUVc","DelAddr2");
  EditField(h,v+=vs,-20,label,Normal,DelAddr2,false,0);
  label = UserDefined("CUVc","DelAddr3");
  EditField(h,v+=vs,-20,label,Normal,DelAddr3,false,0);
  label = UserDefined("CUVc","DelAddr4");
  EditField(h,v+=vs,-20,label,Normal,DelAddr4,false,0);  
  EditField(h,v+=vs,50,"Šalis",Normal,DelCountry,false,CountrySClass);
*/  

  BlockLoad(NPTSNCUFb);
  rwcnt = MatRowCnt(NPTSNCUFb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(NPTSNCUFb,i,NPTSNCUFbrw);
    label = "";
    switch (NPTSNCUFbrw.FieldName) begin
      case "InvAddr0": label = UserDefined("CUVc","InvAddr0");
      case "InvAddr1": label = UserDefined("CUVc","InvAddr1");
      case "InvAddr2": label = UserDefined("CUVc","InvAddr2");
      case "InvAddr3": label = UserDefined("CUVc","InvAddr3");
      case "InvAddr4": label = UserDefined("CUVc","InvAddr4");
    end;
    if (blank(label)) then begin
      label = NPTSNCUFbrw.Label;
    end;
    if (blank(label)) then begin
      label = NPTSNCUFbrw.FieldName;
    end;
//CUST-BEGIN
    if (NPTSNCUFbrw.FieldName=="CustType") then begin
      ButtonFrame(h,v+=40,143,2,label);
      RadioButton(h,v,0,0,"Imone",CustType);
      RadioButton(h,v+=16,1,0,"Asmuo",CustType);
      v = v + vs;
    end else begin
//CUST-END
    EditField2(h,v+=vs,h1-h+50,label,NPTSNCUFbrw.EditState,NPTSNCUFbrw.FieldName,false,0);
    end;
  end;
  EndWindow;
end;

window CUEmailSClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer") 
begin
  WindowBegin("",CUEmailSClass,CGother,HBlRecType);
  SetWRect(240,80,650,298);
//  StringList(9,9,236,209);
  DataList(9,20,-22,-6,"EmailAddr"); 
  DataListColumn(1,6,-10,AdjLeft,"Email","Email",M4Str); 
  SearchField("Ieškoti");
  EndWindow;
end;

window iDealSetTClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  
  windowBegin("iDeal - Bendri nustatymai",iDealSetTClass,CGSbl,-);
  SetBlid(iDealSetBlock);
  SetWRect(20,80,450,300);
  Sizeable(-1,-1,0,0);
  h = 150; vs = 20;
  CheckBox(h,v=10,0,"Pažymėti kontaktą kaip pirkėją ir tiekėją",CuVeContactFlag);
  EditField(h,v+=30,150,"Disallow Sales from",Normal,DisallowLocClass,false,LocClSClass);
  EndWindow;
	
	return;
end;
